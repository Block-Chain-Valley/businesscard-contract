{"id":"85d682ccfef1366b0ce16db887b2f4a3","_format":"hh-sol-build-info-1","solcVersion":"0.8.7","solcLongVersion":"0.8.7+commit.e28d00a7","input":{"language":"Solidity","sources":{"contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"contracts/BusinessCardBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./ERC721EnumerableUpgradeable.sol\";\nimport \"./access/Ownable.sol\";\n\n// Errors\nerror BusinessCardBase__NotFirstMint();\nerror BusinessCardBase__InvalidString();\nerror BusinessCardBase__InvalidETHAmountSent();\nerror BusinessCardBase__NotMintable();\nerror BusinessCardBase__NotStaked();\nerror BusinessCardBase__ExceededPeople();\nerror BusinessCardBase__InvalidArrayCount();\n\ncontract BusinessCardBase is ERC721EnumerableUpgradeable {\n    enum CardType {\n        Personal,\n        Business\n    }\n    // State Variables\n    Card[] private cards;\n    uint32 internal constant MAX_CARDS = 1000;\n    uint32 internal constant MAX_FIRST_MINT = 10;\n    uint32 constant MAX_EMPLOYEES = 10;\n    uint32 constant MAX_DECIMALS = 10 ^ 18;\n    uint256 internal stakePrice;\n    uint256 internal firstMintPrice;\n    uint256 internal mintPrice;\n    uint256 constant STAKE_TIME = 180 days;\n\n    // Mappings\n    mapping(address => bool) internal firstMinted;\n    mapping(address => mapping(address => uint256)) internal addressToDivisionToMintable;\n    mapping(address => uint256) internal stakedTime;\n    mapping(address => bool) internal successfullyStaked;\n    mapping(address => string) internal addressToCompanyName;\n\n    struct Card {\n        string name;\n        string email;\n        string phone;\n        string company;\n        CardType cardType;\n        uint256 valueDesired;\n        address owner;\n    }\n\n    // Events\n    event CardCreated(\n        uint256 indexed id,\n        string name,\n        string email,\n        string phone,\n        string company,\n        uint256 valueDesired,\n        address owner\n    );\n    event CardTransfer(uint256 indexed id, address indexed from, address indexed to);\n    event Stake(address indexed staker, uint256 amount, string companyName);\n    event PartyMint(address indexed company, address[] employeeAddresses, uint32 employeeCount);\n\n    // Functions\n    modifier isMintable() {\n        if (addressToDivisionToMintable[msg.sender][msg.sender] <= 0) {\n            revert BusinessCardBase__NotMintable();\n        }\n        _;\n    }\n\n    modifier onlyStaked() {\n        if (successfullyStaked[msg.sender] == false) {\n            revert BusinessCardBase__NotStaked();\n        }\n\n        _;\n    }\n\n    function __BusinessCardBase__init(uint256 _firstMintPrice, uint256 _mintPrice, uint256 _stakePrice) external {\n        __ERC721_init(\"BusinessCardBase\", \"BC\");\n        firstMintPrice = _firstMintPrice;\n        mintPrice = _mintPrice;\n        stakePrice = _stakePrice;\n    }\n\n    function mint() public payable returns (bool success) {\n        if (firstMinted[msg.sender]) {\n            if (msg.value != mintPrice) {\n                revert BusinessCardBase__InvalidETHAmountSent();\n            }\n            addressToDivisionToMintable[msg.sender][msg.sender] += 1;\n        } else {\n            if (msg.value != firstMintPrice) {\n                revert BusinessCardBase__InvalidETHAmountSent();\n            }\n            firstMinted[msg.sender] = true;\n            addressToDivisionToMintable[msg.sender][msg.sender] = MAX_FIRST_MINT;\n        }\n\n        return true;\n    }\n\n    function _mint(\n        string memory _name,\n        string memory _email,\n        string memory _phone,\n        address _company,\n        uint256 valueDesired\n    ) public virtual isMintable {\n        if (\n            bytes(_name).length * bytes(_email).length * bytes(_phone).length * valueDesired == 0 || _company == address(0)\n        ) {\n            revert BusinessCardBase__InvalidString();\n        }\n        if (addressToDivisionToMintable[msg.sender][_company] <= 0) {\n            revert BusinessCardBase__NotMintable();\n        }\n\n        CardType cardType;\n        string memory company = addressToCompanyName[_company];\n        if (bytes(company).length == 0 || (msg.sender == _company)) {\n            cardType = CardType.Personal;\n        } else {\n            cardType = CardType.Business;\n        }\n\n        Card memory card = Card({\n            name: _name,\n            email: _email,\n            phone: _phone,\n            company: bytes(company).length == 0 ? \"N/A\" : company,\n            cardType: cardType,\n            valueDesired: valueDesired,\n            owner: msg.sender\n        });\n\n        cards.push(card);\n        uint256 _id = cards.length - 1;\n        addressToDivisionToMintable[msg.sender][msg.sender] -= 1;\n        _safeMint(msg.sender, _id);\n        if (cardType == CardType.Business) approve(_company, _id);\n        emit CardCreated(_id, _name, _email, _phone, company, valueDesired, msg.sender);\n    }\n\n    function stake(string memory _company) public payable returns (bool success) {\n        if (msg.value != stakePrice) {\n            revert BusinessCardBase__NotStaked();\n        }\n\n        successfullyStaked[msg.sender] = true;\n        addressToCompanyName[msg.sender] = _company;\n\n        emit Stake(msg.sender, msg.value, _company);\n\n        return true;\n    }\n\n    function partyMint(\n        uint256 _employeeCount,\n        address[] memory employeeAddresses\n    ) external payable onlyStaked returns (bool success) {\n        if (_employeeCount > MAX_EMPLOYEES) {\n            revert BusinessCardBase__ExceededPeople();\n        }\n        if (msg.value != mintPrice * _employeeCount) {\n            revert BusinessCardBase__InvalidETHAmountSent();\n        }\n        if (_employeeCount != employeeAddresses.length) {\n            revert BusinessCardBase__InvalidArrayCount();\n        }\n\n        address companyAddress = msg.sender;\n        for (uint256 i = 0; i < _employeeCount; i++) {\n            addressToDivisionToMintable[employeeAddresses[i]][companyAddress] += 1;\n        }\n\n        emit PartyMint(msg.sender, employeeAddresses, uint32(_employeeCount));\n\n        return true;\n    }\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal virtual override {\n        super._transfer(_from, _to, _tokenId);\n        emit CardTransfer(_tokenId, _from, _to);\n    }\n\n    function getFirstMintPrice() external view returns (uint256) {\n        return firstMintPrice;\n    }\n\n    function getMintPrice() external view returns (uint256) {\n        return mintPrice;\n    }\n\n    function getCards() external view returns (Card[] memory) {\n        return cards;\n    }\n\n    function getCard(uint256 _id) external view returns (Card memory) {\n        return cards[_id];\n    }\n\n    function getCardCount() external view returns (uint256) {\n        return cards.length;\n    }\n\n    function getCardCountByOwner(address _owner) external view returns (uint256) {\n        return balanceOf(_owner);\n    }\n\n    function getCardByOwner(address _owner, uint256 _index) external view returns (Card memory) {\n        return cards[tokenOfOwnerByIndex(_owner, _index)];\n    }\n\n    function getCompanyName(address companyAddress) external view returns (string memory) {\n        return addressToCompanyName[companyAddress];\n    }\n}\n"},"contracts/BusinessCardMarketplace.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./IERC721.sol\";\n\n// Errors\nerror BusinessCardMarketplace__OnlyOwner();\nerror BusinessCardMarketplace__AlreadyListed();\nerror BusinessCardMarketplace__NotListed();\nerror BusinessCardMarketplace__InvalidPrice();\nerror BusinessCardMarketplace__NotApproved();\nerror BusinessCardMarketplace__ApproveNotCleared();\n\ncontract BusinessCardMarketplace {\n    // State Variables\n    struct Listing {\n        uint256 listId;\n        uint256 price;\n        address seller;\n    }\n\n    // Mappings\n    mapping(address => mapping(uint256 => Listing)) internal listings;\n\n    // Events\n    event ListingListed(uint256 indexed cardId, uint256 price, address indexed seller);\n    event ListingRemoved(uint256 indexed cardId, address indexed seller);\n    event ListingBought(uint256 indexed cardId, address indexed buyer, address indexed seller, uint256 price);\n\n    // Functions\n    modifier onlyOwner(address _nftAddress, uint256 _cardId) {\n        if (IERC721(_nftAddress).ownerOf(_cardId) != msg.sender) {\n            revert BusinessCardMarketplace__OnlyOwner();\n        }\n        _;\n    }\n\n    modifier notListed(address _nftAddress, uint256 _cardId) {\n        if (listings[_nftAddress][_cardId].seller != address(0) || listings[_nftAddress][_cardId].price != 0) {\n            revert BusinessCardMarketplace__AlreadyListed();\n        }\n        _;\n    }\n\n    modifier Listed(address _nftAddress, uint256 _cardId) {\n        if (listings[_nftAddress][_cardId].seller == address(0) || listings[_nftAddress][_cardId].price == 0) {\n            revert BusinessCardMarketplace__NotListed();\n        }\n        _;\n    }\n\n    function createListing(\n        address _nftAddress,\n        uint256 _price,\n        uint256 _cardId\n    ) external onlyOwner(_nftAddress, _cardId) notListed(_nftAddress, _cardId) {\n        if (_price <= 0) {\n            revert BusinessCardMarketplace__InvalidPrice();\n        }\n        IERC721(_nftAddress).approve(address(this), _cardId);\n        if (IERC721(_nftAddress).getApproved(_cardId) != address(this)) {\n            revert BusinessCardMarketplace__NotApproved();\n        }\n\n        Listing memory listing = Listing(_cardId, _price, msg.sender);\n        listings[msg.sender][_cardId] = listing;\n        emit ListingListed(_cardId, _price, msg.sender);\n    }\n\n    function removeListing(\n        address _nftAddress,\n        uint256 _cardId\n    ) external onlyOwner(_nftAddress, _cardId) Listed(_nftAddress, _cardId) {\n        IERC721(_nftAddress).approve(address(0), _cardId);\n        if (IERC721(_nftAddress).getApproved(_cardId) != address(0)) {\n            revert BusinessCardMarketplace__ApproveNotCleared();\n        }\n\n        delete listings[msg.sender][_cardId];\n        emit ListingRemoved(_cardId, msg.sender);\n    }\n\n    function buyCard(address _nftAddress, uint256 _cardId) external payable Listed(_nftAddress, _cardId) {\n        Listing memory listing = listings[_nftAddress][_cardId];\n        if (msg.value < listing.price) {\n            revert BusinessCardMarketplace__InvalidPrice();\n        }\n        payable(listing.seller).transfer(msg.value);\n        IERC721(_nftAddress).safeTransferFrom(listing.seller, msg.sender, _cardId);\n        delete listings[_nftAddress][_cardId];\n        emit ListingBought(_cardId, msg.sender, listing.seller, listing.price);\n    }\n\n    function updateListing(\n        address _nftAddress,\n        uint256 _cardId,\n        uint256 _price\n    ) external onlyOwner(_nftAddress, _cardId) Listed(_nftAddress, _cardId) {\n        if (_price <= 0) {\n            revert BusinessCardMarketplace__InvalidPrice();\n        }\n        listings[_nftAddress][_cardId].price = _price;\n        emit ListingListed(_cardId, _price, msg.sender);\n    }\n}\n"},"contracts/ERC721EnumerableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"./proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal onlyInitializing {}\n\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {}\n\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"},"contracts/ERC721Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"./utils/AddressUpgradeable.sol\";\nimport \"./utils/ContextUpgradeable.sol\";\nimport \"./utils/StringsUpgradeable.sol\";\nimport \"./utils/introspection/ERC165Upgradeable.sol\";\nimport \"./proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is\n    Initializable,\n    ContextUpgradeable,\n    ERC165Upgradeable,\n    IERC721Upgradeable,\n    IERC721MetadataUpgradeable\n{\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 /* firstTokenId */, uint256 batchSize) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"},"contracts/extensions/IERC721MetadataUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"contracts/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(\n        uint256 tokenId\n    ) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(\n        address owner,\n        address operator\n    ) external view returns (bool);\n}\n"},"contracts/IERC721EnumerableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"},"contracts/IERC721ReceiverUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"contracts/IERC721Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"contracts/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"contracts/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {}\n\n    function __Context_init_unchained() internal onlyInitializing {}\n\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"contracts/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {}\n\n    function __ERC165_init_unchained() internal onlyInitializing {}\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"contracts/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"contracts/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"contracts/BusinessCardBase.sol":{"ast":{"absolutePath":"contracts/BusinessCardBase.sol","exportedSymbols":{"AddressUpgradeable":[3263],"BusinessCardBase":[656],"BusinessCardBase__ExceededPeople":[15],"BusinessCardBase__InvalidArrayCount":[17],"BusinessCardBase__InvalidETHAmountSent":[9],"BusinessCardBase__InvalidString":[7],"BusinessCardBase__NotFirstMint":[5],"BusinessCardBase__NotMintable":[11],"BusinessCardBase__NotStaked":[13],"Context":[3285],"ContextUpgradeable":[3327],"ERC165Upgradeable":[3600],"ERC721EnumerableUpgradeable":[1419],"ERC721Upgradeable":[2389],"IERC165Upgradeable":[3624],"IERC721EnumerableUpgradeable":[2536],"IERC721MetadataUpgradeable":[2810],"IERC721ReceiverUpgradeable":[2554],"IERC721Upgradeable":[2670],"Initializable":[2979],"MathUpgradeable":[4490],"Ownable":[2783],"SignedMathUpgradeable":[4595],"StringsUpgradeable":[3556]},"id":657,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"32:23:0"},{"absolutePath":"contracts/ERC721EnumerableUpgradeable.sol","file":"./ERC721EnumerableUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":657,"sourceUnit":1420,"src":"57:43:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/access/Ownable.sol","file":"./access/Ownable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":657,"sourceUnit":2784,"src":"101:30:0","symbolAliases":[],"unitAlias":""},{"id":5,"name":"BusinessCardBase__NotFirstMint","nameLocation":"149:30:0","nodeType":"ErrorDefinition","parameters":{"id":4,"nodeType":"ParameterList","parameters":[],"src":"179:2:0"},"src":"143:39:0"},{"id":7,"name":"BusinessCardBase__InvalidString","nameLocation":"189:31:0","nodeType":"ErrorDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"220:2:0"},"src":"183:40:0"},{"id":9,"name":"BusinessCardBase__InvalidETHAmountSent","nameLocation":"230:38:0","nodeType":"ErrorDefinition","parameters":{"id":8,"nodeType":"ParameterList","parameters":[],"src":"268:2:0"},"src":"224:47:0"},{"id":11,"name":"BusinessCardBase__NotMintable","nameLocation":"278:29:0","nodeType":"ErrorDefinition","parameters":{"id":10,"nodeType":"ParameterList","parameters":[],"src":"307:2:0"},"src":"272:38:0"},{"id":13,"name":"BusinessCardBase__NotStaked","nameLocation":"317:27:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[],"src":"344:2:0"},"src":"311:36:0"},{"id":15,"name":"BusinessCardBase__ExceededPeople","nameLocation":"354:32:0","nodeType":"ErrorDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[],"src":"386:2:0"},"src":"348:41:0"},{"id":17,"name":"BusinessCardBase__InvalidArrayCount","nameLocation":"396:35:0","nodeType":"ErrorDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"431:2:0"},"src":"390:44:0"},{"abstract":false,"baseContracts":[{"baseName":{"id":18,"name":"ERC721EnumerableUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":1419,"src":"465:27:0"},"id":19,"nodeType":"InheritanceSpecifier","src":"465:27:0"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":656,"linearizedBaseContracts":[656,1419,2536,2389,2810,2670,3600,3624,3327,2979],"name":"BusinessCardBase","nameLocation":"445:16:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"BusinessCardBase.CardType","id":22,"members":[{"id":20,"name":"Personal","nameLocation":"523:8:0","nodeType":"EnumValue","src":"523:8:0"},{"id":21,"name":"Business","nameLocation":"541:8:0","nodeType":"EnumValue","src":"541:8:0"}],"name":"CardType","nameLocation":"504:8:0","nodeType":"EnumDefinition","src":"499:56:0"},{"constant":false,"id":26,"mutability":"mutable","name":"cards","nameLocation":"598:5:0","nodeType":"VariableDeclaration","scope":656,"src":"583:20:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Card_$87_storage_$dyn_storage","typeString":"struct BusinessCardBase.Card[]"},"typeName":{"baseType":{"id":24,"nodeType":"UserDefinedTypeName","pathNode":{"id":23,"name":"Card","nodeType":"IdentifierPath","referencedDeclaration":87,"src":"583:4:0"},"referencedDeclaration":87,"src":"583:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Card_$87_storage_ptr","typeString":"struct BusinessCardBase.Card"}},"id":25,"nodeType":"ArrayTypeName","src":"583:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Card_$87_storage_$dyn_storage_ptr","typeString":"struct BusinessCardBase.Card[]"}},"visibility":"private"},{"constant":true,"id":29,"mutability":"constant","name":"MAX_CARDS","nameLocation":"634:9:0","nodeType":"VariableDeclaration","scope":656,"src":"609:41:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":27,"name":"uint32","nodeType":"ElementaryTypeName","src":"609:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"31303030","id":28,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"646:4:0","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"visibility":"internal"},{"constant":true,"id":32,"mutability":"constant","name":"MAX_FIRST_MINT","nameLocation":"681:14:0","nodeType":"VariableDeclaration","scope":656,"src":"656:44:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":30,"name":"uint32","nodeType":"ElementaryTypeName","src":"656:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"3130","id":31,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"698:2:0","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"visibility":"internal"},{"constant":true,"id":35,"mutability":"constant","name":"MAX_EMPLOYEES","nameLocation":"722:13:0","nodeType":"VariableDeclaration","scope":656,"src":"706:34:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":33,"name":"uint32","nodeType":"ElementaryTypeName","src":"706:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"3130","id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"738:2:0","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"visibility":"internal"},{"constant":true,"id":40,"mutability":"constant","name":"MAX_DECIMALS","nameLocation":"762:12:0","nodeType":"VariableDeclaration","scope":656,"src":"746:38:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":36,"name":"uint32","nodeType":"ElementaryTypeName","src":"746:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"commonType":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"id":39,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":37,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"777:2:0","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"3138","id":38,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"782:2:0","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"src":"777:7:0","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"}},"visibility":"internal"},{"constant":false,"id":42,"mutability":"mutable","name":"stakePrice","nameLocation":"807:10:0","nodeType":"VariableDeclaration","scope":656,"src":"790:27:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":41,"name":"uint256","nodeType":"ElementaryTypeName","src":"790:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":44,"mutability":"mutable","name":"firstMintPrice","nameLocation":"840:14:0","nodeType":"VariableDeclaration","scope":656,"src":"823:31:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43,"name":"uint256","nodeType":"ElementaryTypeName","src":"823:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":46,"mutability":"mutable","name":"mintPrice","nameLocation":"877:9:0","nodeType":"VariableDeclaration","scope":656,"src":"860:26:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45,"name":"uint256","nodeType":"ElementaryTypeName","src":"860:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":true,"id":49,"mutability":"constant","name":"STAKE_TIME","nameLocation":"909:10:0","nodeType":"VariableDeclaration","scope":656,"src":"892:38:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":47,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313830","id":48,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"922:8:0","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_15552000_by_1","typeString":"int_const 15552000"},"value":"180"},"visibility":"internal"},{"constant":false,"id":53,"mutability":"mutable","name":"firstMinted","nameLocation":"987:11:0","nodeType":"VariableDeclaration","scope":656,"src":"953:45:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":52,"keyType":{"id":50,"name":"address","nodeType":"ElementaryTypeName","src":"961:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"953:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":51,"name":"bool","nodeType":"ElementaryTypeName","src":"972:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":59,"mutability":"mutable","name":"addressToDivisionToMintable","nameLocation":"1061:27:0","nodeType":"VariableDeclaration","scope":656,"src":"1004:84:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":58,"keyType":{"id":54,"name":"address","nodeType":"ElementaryTypeName","src":"1012:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1004:47:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":57,"keyType":{"id":55,"name":"address","nodeType":"ElementaryTypeName","src":"1031:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1023:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":56,"name":"uint256","nodeType":"ElementaryTypeName","src":"1042:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"},{"constant":false,"id":63,"mutability":"mutable","name":"stakedTime","nameLocation":"1131:10:0","nodeType":"VariableDeclaration","scope":656,"src":"1094:47:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":62,"keyType":{"id":60,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1094:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":61,"name":"uint256","nodeType":"ElementaryTypeName","src":"1113:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"successfullyStaked","nameLocation":"1181:18:0","nodeType":"VariableDeclaration","scope":656,"src":"1147:52:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":66,"keyType":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"1155:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1147:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":65,"name":"bool","nodeType":"ElementaryTypeName","src":"1166:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":71,"mutability":"mutable","name":"addressToCompanyName","nameLocation":"1241:20:0","nodeType":"VariableDeclaration","scope":656,"src":"1205:56:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_string_storage_$","typeString":"mapping(address => string)"},"typeName":{"id":70,"keyType":{"id":68,"name":"address","nodeType":"ElementaryTypeName","src":"1213:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1205:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_string_storage_$","typeString":"mapping(address => string)"},"valueType":{"id":69,"name":"string","nodeType":"ElementaryTypeName","src":"1224:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"internal"},{"canonicalName":"BusinessCardBase.Card","id":87,"members":[{"constant":false,"id":73,"mutability":"mutable","name":"name","nameLocation":"1297:4:0","nodeType":"VariableDeclaration","scope":87,"src":"1290:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":72,"name":"string","nodeType":"ElementaryTypeName","src":"1290:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":75,"mutability":"mutable","name":"email","nameLocation":"1318:5:0","nodeType":"VariableDeclaration","scope":87,"src":"1311:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":74,"name":"string","nodeType":"ElementaryTypeName","src":"1311:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":77,"mutability":"mutable","name":"phone","nameLocation":"1340:5:0","nodeType":"VariableDeclaration","scope":87,"src":"1333:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":76,"name":"string","nodeType":"ElementaryTypeName","src":"1333:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"company","nameLocation":"1362:7:0","nodeType":"VariableDeclaration","scope":87,"src":"1355:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":78,"name":"string","nodeType":"ElementaryTypeName","src":"1355:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":82,"mutability":"mutable","name":"cardType","nameLocation":"1388:8:0","nodeType":"VariableDeclaration","scope":87,"src":"1379:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"},"typeName":{"id":81,"nodeType":"UserDefinedTypeName","pathNode":{"id":80,"name":"CardType","nodeType":"IdentifierPath","referencedDeclaration":22,"src":"1379:8:0"},"referencedDeclaration":22,"src":"1379:8:0","typeDescriptions":{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"valueDesired","nameLocation":"1414:12:0","nodeType":"VariableDeclaration","scope":87,"src":"1406:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":83,"name":"uint256","nodeType":"ElementaryTypeName","src":"1406:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":86,"mutability":"mutable","name":"owner","nameLocation":"1444:5:0","nodeType":"VariableDeclaration","scope":87,"src":"1436:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":85,"name":"address","nodeType":"ElementaryTypeName","src":"1436:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Card","nameLocation":"1275:4:0","nodeType":"StructDefinition","scope":656,"src":"1268:188:0","visibility":"public"},{"anonymous":false,"id":103,"name":"CardCreated","nameLocation":"1482:11:0","nodeType":"EventDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":89,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1519:2:0","nodeType":"VariableDeclaration","scope":103,"src":"1503:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":88,"name":"uint256","nodeType":"ElementaryTypeName","src":"1503:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":91,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"1538:4:0","nodeType":"VariableDeclaration","scope":103,"src":"1531:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":90,"name":"string","nodeType":"ElementaryTypeName","src":"1531:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":93,"indexed":false,"mutability":"mutable","name":"email","nameLocation":"1559:5:0","nodeType":"VariableDeclaration","scope":103,"src":"1552:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":92,"name":"string","nodeType":"ElementaryTypeName","src":"1552:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":95,"indexed":false,"mutability":"mutable","name":"phone","nameLocation":"1581:5:0","nodeType":"VariableDeclaration","scope":103,"src":"1574:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":94,"name":"string","nodeType":"ElementaryTypeName","src":"1574:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":97,"indexed":false,"mutability":"mutable","name":"company","nameLocation":"1603:7:0","nodeType":"VariableDeclaration","scope":103,"src":"1596:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":96,"name":"string","nodeType":"ElementaryTypeName","src":"1596:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":99,"indexed":false,"mutability":"mutable","name":"valueDesired","nameLocation":"1628:12:0","nodeType":"VariableDeclaration","scope":103,"src":"1620:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":98,"name":"uint256","nodeType":"ElementaryTypeName","src":"1620:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":101,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"1658:5:0","nodeType":"VariableDeclaration","scope":103,"src":"1650:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"1650:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1493:176:0"},"src":"1476:194:0"},{"anonymous":false,"id":111,"name":"CardTransfer","nameLocation":"1681:12:0","nodeType":"EventDefinition","parameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":105,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1710:2:0","nodeType":"VariableDeclaration","scope":111,"src":"1694:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":104,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":107,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1730:4:0","nodeType":"VariableDeclaration","scope":111,"src":"1714:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":106,"name":"address","nodeType":"ElementaryTypeName","src":"1714:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":109,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1752:2:0","nodeType":"VariableDeclaration","scope":111,"src":"1736:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":108,"name":"address","nodeType":"ElementaryTypeName","src":"1736:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1693:62:0"},"src":"1675:81:0"},{"anonymous":false,"id":119,"name":"Stake","nameLocation":"1767:5:0","nodeType":"EventDefinition","parameters":{"id":118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"indexed":true,"mutability":"mutable","name":"staker","nameLocation":"1789:6:0","nodeType":"VariableDeclaration","scope":119,"src":"1773:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":115,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1805:6:0","nodeType":"VariableDeclaration","scope":119,"src":"1797:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":114,"name":"uint256","nodeType":"ElementaryTypeName","src":"1797:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":117,"indexed":false,"mutability":"mutable","name":"companyName","nameLocation":"1820:11:0","nodeType":"VariableDeclaration","scope":119,"src":"1813:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":116,"name":"string","nodeType":"ElementaryTypeName","src":"1813:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1772:60:0"},"src":"1761:72:0"},{"anonymous":false,"id":128,"name":"PartyMint","nameLocation":"1844:9:0","nodeType":"EventDefinition","parameters":{"id":127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"indexed":true,"mutability":"mutable","name":"company","nameLocation":"1870:7:0","nodeType":"VariableDeclaration","scope":128,"src":"1854:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"1854:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":124,"indexed":false,"mutability":"mutable","name":"employeeAddresses","nameLocation":"1889:17:0","nodeType":"VariableDeclaration","scope":128,"src":"1879:27:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"1879:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":123,"nodeType":"ArrayTypeName","src":"1879:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":126,"indexed":false,"mutability":"mutable","name":"employeeCount","nameLocation":"1915:13:0","nodeType":"VariableDeclaration","scope":128,"src":"1908:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":125,"name":"uint32","nodeType":"ElementaryTypeName","src":"1908:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1853:76:0"},"src":"1838:92:0"},{"body":{"id":145,"nodeType":"Block","src":"1975:152:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":130,"name":"addressToDivisionToMintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"1989:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":133,"indexExpression":{"expression":{"id":131,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2017:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2017:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1989:39:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":136,"indexExpression":{"expression":{"id":134,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2029:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2029:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1989:51:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30","id":137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2044:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1989:56:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":143,"nodeType":"IfStatement","src":"1985:125:0","trueBody":{"id":142,"nodeType":"Block","src":"2047:63:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":139,"name":"BusinessCardBase__NotMintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"2068:29:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2068:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":141,"nodeType":"RevertStatement","src":"2061:38:0"}]}},{"id":144,"nodeType":"PlaceholderStatement","src":"2119:1:0"}]},"id":146,"name":"isMintable","nameLocation":"1962:10:0","nodeType":"ModifierDefinition","parameters":{"id":129,"nodeType":"ParameterList","parameters":[],"src":"1972:2:0"},"src":"1953:174:0","virtual":false,"visibility":"internal"},{"body":{"id":160,"nodeType":"Block","src":"2155:134:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":148,"name":"successfullyStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"2169:18:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":151,"indexExpression":{"expression":{"id":149,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2188:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2188:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2169:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2203:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2169:39:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":158,"nodeType":"IfStatement","src":"2165:106:0","trueBody":{"id":157,"nodeType":"Block","src":"2210:61:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":154,"name":"BusinessCardBase__NotStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2231:27:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2231:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":156,"nodeType":"RevertStatement","src":"2224:36:0"}]}},{"id":159,"nodeType":"PlaceholderStatement","src":"2281:1:0"}]},"id":161,"name":"onlyStaked","nameLocation":"2142:10:0","nodeType":"ModifierDefinition","parameters":{"id":147,"nodeType":"ParameterList","parameters":[],"src":"2152:2:0"},"src":"2133:156:0","virtual":false,"visibility":"internal"},{"body":{"id":187,"nodeType":"Block","src":"2404:164:0","statements":[{"expression":{"arguments":[{"hexValue":"427573696e6573734361726442617365","id":171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2428:18:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_85eba22a908b2ef90aed4183e9f1ebfab5ee135b2739582a983acbca2d9447f7","typeString":"literal_string \"BusinessCardBase\""},"value":"BusinessCardBase"},{"hexValue":"4243","id":172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2448:4:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_cf64ed798cc730363dc3e4c9e3b0c8887625ef44cdc667fe8460dea13b34813e","typeString":"literal_string \"BC\""},"value":"BC"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_85eba22a908b2ef90aed4183e9f1ebfab5ee135b2739582a983acbca2d9447f7","typeString":"literal_string \"BusinessCardBase\""},{"typeIdentifier":"t_stringliteral_cf64ed798cc730363dc3e4c9e3b0c8887625ef44cdc667fe8460dea13b34813e","typeString":"literal_string \"BC\""}],"id":170,"name":"__ERC721_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"2414:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2414:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":174,"nodeType":"ExpressionStatement","src":"2414:39:0"},{"expression":{"id":177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":175,"name":"firstMintPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"2463:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":176,"name":"_firstMintPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"2480:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2463:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":178,"nodeType":"ExpressionStatement","src":"2463:32:0"},{"expression":{"id":181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":179,"name":"mintPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"2505:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":180,"name":"_mintPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"2517:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2505:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":182,"nodeType":"ExpressionStatement","src":"2505:22:0"},{"expression":{"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":183,"name":"stakePrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"2537:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":184,"name":"_stakePrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"2550:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2537:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":186,"nodeType":"ExpressionStatement","src":"2537:24:0"}]},"functionSelector":"47c36b8c","id":188,"implemented":true,"kind":"function","modifiers":[],"name":"__BusinessCardBase__init","nameLocation":"2304:24:0","nodeType":"FunctionDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":163,"mutability":"mutable","name":"_firstMintPrice","nameLocation":"2337:15:0","nodeType":"VariableDeclaration","scope":188,"src":"2329:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":162,"name":"uint256","nodeType":"ElementaryTypeName","src":"2329:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":165,"mutability":"mutable","name":"_mintPrice","nameLocation":"2362:10:0","nodeType":"VariableDeclaration","scope":188,"src":"2354:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":164,"name":"uint256","nodeType":"ElementaryTypeName","src":"2354:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":167,"mutability":"mutable","name":"_stakePrice","nameLocation":"2382:11:0","nodeType":"VariableDeclaration","scope":188,"src":"2374:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":166,"name":"uint256","nodeType":"ElementaryTypeName","src":"2374:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2328:66:0"},"returnParameters":{"id":169,"nodeType":"ParameterList","parameters":[],"src":"2404:0:0"},"scope":656,"src":"2295:273:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":247,"nodeType":"Block","src":"2628:538:0","statements":[{"condition":{"baseExpression":{"id":193,"name":"firstMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"2642:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":196,"indexExpression":{"expression":{"id":194,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2654:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2654:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2642:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":243,"nodeType":"Block","src":"2875:263:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":217,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2893:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2893:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":219,"name":"firstMintPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"2906:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2893:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":225,"nodeType":"IfStatement","src":"2889:113:0","trueBody":{"id":224,"nodeType":"Block","src":"2922:80:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":221,"name":"BusinessCardBase__InvalidETHAmountSent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"2947:38:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2947:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":223,"nodeType":"RevertStatement","src":"2940:47:0"}]}},{"expression":{"id":231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":226,"name":"firstMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"3015:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":229,"indexExpression":{"expression":{"id":227,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3027:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3027:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3015:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3041:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3015:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":232,"nodeType":"ExpressionStatement","src":"3015:30:0"},{"expression":{"id":241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":233,"name":"addressToDivisionToMintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"3059:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":238,"indexExpression":{"expression":{"id":234,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3087:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3087:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3059:39:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":239,"indexExpression":{"expression":{"id":236,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3099:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3099:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3059:51:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":240,"name":"MAX_FIRST_MINT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"3113:14:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"3059:68:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":242,"nodeType":"ExpressionStatement","src":"3059:68:0"}]},"id":244,"nodeType":"IfStatement","src":"2638:500:0","trueBody":{"id":216,"nodeType":"Block","src":"2667:202:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":197,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2685:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2685:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":199,"name":"mintPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"2698:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2685:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":205,"nodeType":"IfStatement","src":"2681:108:0","trueBody":{"id":204,"nodeType":"Block","src":"2709:80:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":201,"name":"BusinessCardBase__InvalidETHAmountSent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"2734:38:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2734:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":203,"nodeType":"RevertStatement","src":"2727:47:0"}]}},{"expression":{"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":206,"name":"addressToDivisionToMintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"2802:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":211,"indexExpression":{"expression":{"id":207,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2830:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2830:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2802:39:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":212,"indexExpression":{"expression":{"id":209,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2842:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2842:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2802:51:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2857:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2802:56:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":215,"nodeType":"ExpressionStatement","src":"2802:56:0"}]}},{"expression":{"hexValue":"74727565","id":245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3155:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":192,"id":246,"nodeType":"Return","src":"3148:11:0"}]},"functionSelector":"1249c58b","id":248,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"2583:4:0","nodeType":"FunctionDefinition","parameters":{"id":189,"nodeType":"ParameterList","parameters":[],"src":"2587:2:0"},"returnParameters":{"id":192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":191,"mutability":"mutable","name":"success","nameLocation":"2619:7:0","nodeType":"VariableDeclaration","scope":248,"src":"2614:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":190,"name":"bool","nodeType":"ElementaryTypeName","src":"2614:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2613:14:0"},"scope":656,"src":"2574:592:0","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":418,"nodeType":"Block","src":"3364:1245:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":265,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"3397:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3391:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":263,"name":"bytes","nodeType":"ElementaryTypeName","src":"3391:5:0","typeDescriptions":{}}},"id":266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3391:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3391:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"arguments":[{"id":270,"name":"_email","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"3419:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3413:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":268,"name":"bytes","nodeType":"ElementaryTypeName","src":"3413:5:0","typeDescriptions":{}}},"id":271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3413:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3413:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3391:42:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"arguments":[{"id":276,"name":"_phone","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3442:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3436:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":274,"name":"bytes","nodeType":"ElementaryTypeName","src":"3436:5:0","typeDescriptions":{}}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3436:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3436:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3391:65:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":280,"name":"valueDesired","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3459:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3391:80:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3475:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3391:85:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":284,"name":"_company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3480:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3500:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3492:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":285,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:0","typeDescriptions":{}}},"id":288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3492:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3480:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3391:111:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":295,"nodeType":"IfStatement","src":"3374:204:0","trueBody":{"id":294,"nodeType":"Block","src":"3513:65:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":291,"name":"BusinessCardBase__InvalidString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"3534:31:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3534:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":293,"nodeType":"RevertStatement","src":"3527:40:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":296,"name":"addressToDivisionToMintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"3591:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":299,"indexExpression":{"expression":{"id":297,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3619:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3619:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3591:39:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":301,"indexExpression":{"id":300,"name":"_company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3631:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3591:49:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30","id":302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3644:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3591:54:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":308,"nodeType":"IfStatement","src":"3587:123:0","trueBody":{"id":307,"nodeType":"Block","src":"3647:63:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":304,"name":"BusinessCardBase__NotMintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"3668:29:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3668:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":306,"nodeType":"RevertStatement","src":"3661:38:0"}]}},{"assignments":[311],"declarations":[{"constant":false,"id":311,"mutability":"mutable","name":"cardType","nameLocation":"3729:8:0","nodeType":"VariableDeclaration","scope":418,"src":"3720:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"},"typeName":{"id":310,"nodeType":"UserDefinedTypeName","pathNode":{"id":309,"name":"CardType","nodeType":"IdentifierPath","referencedDeclaration":22,"src":"3720:8:0"},"referencedDeclaration":22,"src":"3720:8:0","typeDescriptions":{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"}},"visibility":"internal"}],"id":312,"nodeType":"VariableDeclarationStatement","src":"3720:17:0"},{"assignments":[314],"declarations":[{"constant":false,"id":314,"mutability":"mutable","name":"company","nameLocation":"3761:7:0","nodeType":"VariableDeclaration","scope":418,"src":"3747:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":313,"name":"string","nodeType":"ElementaryTypeName","src":"3747:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":318,"initialValue":{"baseExpression":{"id":315,"name":"addressToCompanyName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"3771:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_string_storage_$","typeString":"mapping(address => string storage ref)"}},"id":317,"indexExpression":{"id":316,"name":"_company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3792:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3771:30:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3747:54:0"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":321,"name":"company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"3821:7:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3815:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":319,"name":"bytes","nodeType":"ElementaryTypeName","src":"3815:5:0","typeDescriptions":{}}},"id":322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3815:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3815:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3840:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3815:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":326,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3846:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3846:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":328,"name":"_company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3860:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3846:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":330,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3845:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3815:54:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":343,"nodeType":"Block","src":"3930:53:0","statements":[{"expression":{"id":341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":338,"name":"cardType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"3944:8:0","typeDescriptions":{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":339,"name":"CardType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"3955:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CardType_$22_$","typeString":"type(enum BusinessCardBase.CardType)"}},"id":340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Business","nodeType":"MemberAccess","referencedDeclaration":21,"src":"3955:17:0","typeDescriptions":{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"}},"src":"3944:28:0","typeDescriptions":{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"}},"id":342,"nodeType":"ExpressionStatement","src":"3944:28:0"}]},"id":344,"nodeType":"IfStatement","src":"3811:172:0","trueBody":{"id":337,"nodeType":"Block","src":"3871:53:0","statements":[{"expression":{"id":335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":332,"name":"cardType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"3885:8:0","typeDescriptions":{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":333,"name":"CardType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"3896:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CardType_$22_$","typeString":"type(enum BusinessCardBase.CardType)"}},"id":334,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Personal","nodeType":"MemberAccess","referencedDeclaration":20,"src":"3896:17:0","typeDescriptions":{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"}},"src":"3885:28:0","typeDescriptions":{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"}},"id":336,"nodeType":"ExpressionStatement","src":"3885:28:0"}]}},{"assignments":[347],"declarations":[{"constant":false,"id":347,"mutability":"mutable","name":"card","nameLocation":"4005:4:0","nodeType":"VariableDeclaration","scope":418,"src":"3993:16:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Card_$87_memory_ptr","typeString":"struct BusinessCardBase.Card"},"typeName":{"id":346,"nodeType":"UserDefinedTypeName","pathNode":{"id":345,"name":"Card","nodeType":"IdentifierPath","referencedDeclaration":87,"src":"3993:4:0"},"referencedDeclaration":87,"src":"3993:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Card_$87_storage_ptr","typeString":"struct BusinessCardBase.Card"}},"visibility":"internal"}],"id":367,"initialValue":{"arguments":[{"id":349,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"4037:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":350,"name":"_email","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"4063:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":351,"name":"_phone","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"4090:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":354,"name":"company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"4125:7:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4119:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":352,"name":"bytes","nodeType":"ElementaryTypeName","src":"4119:5:0","typeDescriptions":{}}},"id":355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4119:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4119:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4144:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4119:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":360,"name":"company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"4156:7:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4119:44:0","trueExpression":{"hexValue":"4e2f41","id":359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4148:5:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fa16d72b8b645307c26ffa7557c21e65db30efe4f9a68006fb6ae044528f9047","typeString":"literal_string \"N/A\""},"value":"N/A"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":362,"name":"cardType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"4187:8:0","typeDescriptions":{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"}},{"id":363,"name":"valueDesired","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"4223:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":364,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4256:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4256:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":348,"name":"Card","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"4012:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Card_$87_storage_ptr_$","typeString":"type(struct BusinessCardBase.Card storage pointer)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["name","email","phone","company","cardType","valueDesired","owner"],"nodeType":"FunctionCall","src":"4012:265:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Card_$87_memory_ptr","typeString":"struct BusinessCardBase.Card memory"}},"nodeType":"VariableDeclarationStatement","src":"3993:284:0"},{"expression":{"arguments":[{"id":371,"name":"card","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"4299:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Card_$87_memory_ptr","typeString":"struct BusinessCardBase.Card memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Card_$87_memory_ptr","typeString":"struct BusinessCardBase.Card memory"}],"expression":{"id":368,"name":"cards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"4288:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Card_$87_storage_$dyn_storage","typeString":"struct BusinessCardBase.Card storage ref[] storage ref"}},"id":370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"4288:10:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Card_$87_storage_$dyn_storage_ptr_$_t_struct$_Card_$87_storage_$returns$__$bound_to$_t_array$_t_struct$_Card_$87_storage_$dyn_storage_ptr_$","typeString":"function (struct BusinessCardBase.Card storage ref[] storage pointer,struct BusinessCardBase.Card storage ref)"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4288:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":373,"nodeType":"ExpressionStatement","src":"4288:16:0"},{"assignments":[375],"declarations":[{"constant":false,"id":375,"mutability":"mutable","name":"_id","nameLocation":"4322:3:0","nodeType":"VariableDeclaration","scope":418,"src":"4314:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":374,"name":"uint256","nodeType":"ElementaryTypeName","src":"4314:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":380,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":376,"name":"cards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"4328:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Card_$87_storage_$dyn_storage","typeString":"struct BusinessCardBase.Card storage ref[] storage ref"}},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4328:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4343:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4328:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4314:30:0"},{"expression":{"id":389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":381,"name":"addressToDivisionToMintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"4354:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":386,"indexExpression":{"expression":{"id":382,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4382:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4382:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4354:39:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":387,"indexExpression":{"expression":{"id":384,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4394:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4394:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4354:51:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4409:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4354:56:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":390,"nodeType":"ExpressionStatement","src":"4354:56:0"},{"expression":{"arguments":[{"expression":{"id":392,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4430:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4430:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":394,"name":"_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"4442:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":391,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1934,1963],"referencedDeclaration":1934,"src":"4420:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4420:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":396,"nodeType":"ExpressionStatement","src":"4420:26:0"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":397,"name":"cardType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"4460:8:0","typeDescriptions":{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":398,"name":"CardType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"4472:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CardType_$22_$","typeString":"type(enum BusinessCardBase.CardType)"}},"id":399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Business","nodeType":"MemberAccess","referencedDeclaration":21,"src":"4472:17:0","typeDescriptions":{"typeIdentifier":"t_enum$_CardType_$22","typeString":"enum BusinessCardBase.CardType"}},"src":"4460:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":406,"nodeType":"IfStatement","src":"4456:57:0","trueBody":{"expression":{"arguments":[{"id":402,"name":"_company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"4499:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":403,"name":"_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"4509:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":401,"name":"approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"4491:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4491:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":405,"nodeType":"ExpressionStatement","src":"4491:22:0"}},{"eventCall":{"arguments":[{"id":408,"name":"_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"4540:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":409,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"4545:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":410,"name":"_email","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"4552:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":411,"name":"_phone","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"4560:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":412,"name":"company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"4568:7:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":413,"name":"valueDesired","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"4577:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":414,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4591:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4591:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":407,"name":"CardCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":103,"src":"4528:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,string memory,string memory,string memory,string memory,uint256,address)"}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4528:74:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":417,"nodeType":"EmitStatement","src":"4523:79:0"}]},"functionSelector":"a2235934","id":419,"implemented":true,"kind":"function","modifiers":[{"id":261,"kind":"modifierInvocation","modifierName":{"id":260,"name":"isMintable","nodeType":"IdentifierPath","referencedDeclaration":146,"src":"3353:10:0"},"nodeType":"ModifierInvocation","src":"3353:10:0"}],"name":"_mint","nameLocation":"3181:5:0","nodeType":"FunctionDefinition","parameters":{"id":259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"_name","nameLocation":"3210:5:0","nodeType":"VariableDeclaration","scope":419,"src":"3196:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":249,"name":"string","nodeType":"ElementaryTypeName","src":"3196:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":252,"mutability":"mutable","name":"_email","nameLocation":"3239:6:0","nodeType":"VariableDeclaration","scope":419,"src":"3225:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":251,"name":"string","nodeType":"ElementaryTypeName","src":"3225:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":254,"mutability":"mutable","name":"_phone","nameLocation":"3269:6:0","nodeType":"VariableDeclaration","scope":419,"src":"3255:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":253,"name":"string","nodeType":"ElementaryTypeName","src":"3255:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"_company","nameLocation":"3293:8:0","nodeType":"VariableDeclaration","scope":419,"src":"3285:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"3285:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":258,"mutability":"mutable","name":"valueDesired","nameLocation":"3319:12:0","nodeType":"VariableDeclaration","scope":419,"src":"3311:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":257,"name":"uint256","nodeType":"ElementaryTypeName","src":"3311:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3186:151:0"},"returnParameters":{"id":262,"nodeType":"ParameterList","parameters":[],"src":"3364:0:0"},"scope":656,"src":"3172:1437:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":459,"nodeType":"Block","src":"4692:283:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":426,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4706:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"4706:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":428,"name":"stakePrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"4719:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4706:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":434,"nodeType":"IfStatement","src":"4702:90:0","trueBody":{"id":433,"nodeType":"Block","src":"4731:61:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":430,"name":"BusinessCardBase__NotStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"4752:27:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4752:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":432,"nodeType":"RevertStatement","src":"4745:36:0"}]}},{"expression":{"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":435,"name":"successfullyStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"4802:18:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":438,"indexExpression":{"expression":{"id":436,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4821:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4821:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4802:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4835:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4802:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":441,"nodeType":"ExpressionStatement","src":"4802:37:0"},{"expression":{"id":447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":442,"name":"addressToCompanyName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"4849:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_string_storage_$","typeString":"mapping(address => string storage ref)"}},"id":445,"indexExpression":{"expression":{"id":443,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4870:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4870:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4849:32:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":446,"name":"_company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"4884:8:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"4849:43:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":448,"nodeType":"ExpressionStatement","src":"4849:43:0"},{"eventCall":{"arguments":[{"expression":{"id":450,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4914:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4914:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":452,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4926:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"4926:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":454,"name":"_company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"4937:8:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":449,"name":"Stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"4908:5:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,uint256,string memory)"}},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4908:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":456,"nodeType":"EmitStatement","src":"4903:43:0"},{"expression":{"hexValue":"74727565","id":457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4964:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":425,"id":458,"nodeType":"Return","src":"4957:11:0"}]},"functionSelector":"46f45b8d","id":460,"implemented":true,"kind":"function","modifiers":[],"name":"stake","nameLocation":"4624:5:0","nodeType":"FunctionDefinition","parameters":{"id":422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":421,"mutability":"mutable","name":"_company","nameLocation":"4644:8:0","nodeType":"VariableDeclaration","scope":460,"src":"4630:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":420,"name":"string","nodeType":"ElementaryTypeName","src":"4630:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4629:24:0"},"returnParameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"mutability":"mutable","name":"success","nameLocation":"4683:7:0","nodeType":"VariableDeclaration","scope":460,"src":"4678:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":423,"name":"bool","nodeType":"ElementaryTypeName","src":"4678:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4677:14:0"},"scope":656,"src":"4615:360:0","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":539,"nodeType":"Block","src":"5133:667:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":472,"name":"_employeeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"5147:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":473,"name":"MAX_EMPLOYEES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"5164:13:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"5147:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":479,"nodeType":"IfStatement","src":"5143:102:0","trueBody":{"id":478,"nodeType":"Block","src":"5179:66:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":475,"name":"BusinessCardBase__ExceededPeople","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"5200:32:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5200:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":477,"nodeType":"RevertStatement","src":"5193:41:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":480,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5258:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"5258:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":482,"name":"mintPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"5271:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":483,"name":"_employeeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"5283:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5258:39:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":490,"nodeType":"IfStatement","src":"5254:117:0","trueBody":{"id":489,"nodeType":"Block","src":"5299:72:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":486,"name":"BusinessCardBase__InvalidETHAmountSent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"5320:38:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5320:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":488,"nodeType":"RevertStatement","src":"5313:47:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":491,"name":"_employeeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"5384:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":492,"name":"employeeAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"5402:17:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5402:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5384:42:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":499,"nodeType":"IfStatement","src":"5380:117:0","trueBody":{"id":498,"nodeType":"Block","src":"5428:69:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":495,"name":"BusinessCardBase__InvalidArrayCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"5449:35:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5449:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":497,"nodeType":"RevertStatement","src":"5442:44:0"}]}},{"assignments":[501],"declarations":[{"constant":false,"id":501,"mutability":"mutable","name":"companyAddress","nameLocation":"5515:14:0","nodeType":"VariableDeclaration","scope":539,"src":"5507:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":500,"name":"address","nodeType":"ElementaryTypeName","src":"5507:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":504,"initialValue":{"expression":{"id":502,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5532:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"5532:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5507:35:0"},{"body":{"id":525,"nodeType":"Block","src":"5597:95:0","statements":[{"expression":{"id":523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":515,"name":"addressToDivisionToMintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"5611:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":520,"indexExpression":{"baseExpression":{"id":516,"name":"employeeAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"5639:17:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":518,"indexExpression":{"id":517,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"5657:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5639:20:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5611:49:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":521,"indexExpression":{"id":519,"name":"companyAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"5661:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5611:65:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5680:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5611:70:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":524,"nodeType":"ExpressionStatement","src":"5611:70:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":509,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"5572:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":510,"name":"_employeeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"5576:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5572:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":526,"initializationExpression":{"assignments":[506],"declarations":[{"constant":false,"id":506,"mutability":"mutable","name":"i","nameLocation":"5565:1:0","nodeType":"VariableDeclaration","scope":526,"src":"5557:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":505,"name":"uint256","nodeType":"ElementaryTypeName","src":"5557:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":508,"initialValue":{"hexValue":"30","id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5569:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5557:13:0"},"loopExpression":{"expression":{"id":513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5592:3:0","subExpression":{"id":512,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"5592:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":514,"nodeType":"ExpressionStatement","src":"5592:3:0"},"nodeType":"ForStatement","src":"5552:140:0"},{"eventCall":{"arguments":[{"expression":{"id":528,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5717:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"5717:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":530,"name":"employeeAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"5729:17:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"arguments":[{"id":533,"name":"_employeeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"5755:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5748:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":531,"name":"uint32","nodeType":"ElementaryTypeName","src":"5748:6:0","typeDescriptions":{}}},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5748:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":527,"name":"PartyMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"5707:9:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_array$_t_address_$dyn_memory_ptr_$_t_uint32_$returns$__$","typeString":"function (address,address[] memory,uint32)"}},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5707:64:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":536,"nodeType":"EmitStatement","src":"5702:69:0"},{"expression":{"hexValue":"74727565","id":537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5789:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":471,"id":538,"nodeType":"Return","src":"5782:11:0"}]},"functionSelector":"154308f0","id":540,"implemented":true,"kind":"function","modifiers":[{"id":468,"kind":"modifierInvocation","modifierName":{"id":467,"name":"onlyStaked","nodeType":"IdentifierPath","referencedDeclaration":161,"src":"5099:10:0"},"nodeType":"ModifierInvocation","src":"5099:10:0"}],"name":"partyMint","nameLocation":"4990:9:0","nodeType":"FunctionDefinition","parameters":{"id":466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"_employeeCount","nameLocation":"5017:14:0","nodeType":"VariableDeclaration","scope":540,"src":"5009:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":461,"name":"uint256","nodeType":"ElementaryTypeName","src":"5009:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":465,"mutability":"mutable","name":"employeeAddresses","nameLocation":"5058:17:0","nodeType":"VariableDeclaration","scope":540,"src":"5041:34:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":463,"name":"address","nodeType":"ElementaryTypeName","src":"5041:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":464,"nodeType":"ArrayTypeName","src":"5041:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"4999:82:0"},"returnParameters":{"id":471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":470,"mutability":"mutable","name":"success","nameLocation":"5124:7:0","nodeType":"VariableDeclaration","scope":540,"src":"5119:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":469,"name":"bool","nodeType":"ElementaryTypeName","src":"5119:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5118:14:0"},"scope":656,"src":"4981:819:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"baseFunctions":[2192],"body":{"id":564,"nodeType":"Block","src":"5897:103:0","statements":[{"expression":{"arguments":[{"id":553,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"5923:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":554,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"5930:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":555,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"5935:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":550,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5907:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_BusinessCardBase_$656_$","typeString":"type(contract super BusinessCardBase)"}},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_transfer","nodeType":"MemberAccess","referencedDeclaration":2192,"src":"5907:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5907:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":557,"nodeType":"ExpressionStatement","src":"5907:37:0"},{"eventCall":{"arguments":[{"id":559,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"5972:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":560,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"5982:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":561,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"5989:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":558,"name":"CardTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"5959:12:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$returns$__$","typeString":"function (uint256,address,address)"}},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5959:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":563,"nodeType":"EmitStatement","src":"5954:39:0"}]},"id":565,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"5815:9:0","nodeType":"FunctionDefinition","overrides":{"id":548,"nodeType":"OverrideSpecifier","overrides":[],"src":"5888:8:0"},"parameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":542,"mutability":"mutable","name":"_from","nameLocation":"5833:5:0","nodeType":"VariableDeclaration","scope":565,"src":"5825:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":541,"name":"address","nodeType":"ElementaryTypeName","src":"5825:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":544,"mutability":"mutable","name":"_to","nameLocation":"5848:3:0","nodeType":"VariableDeclaration","scope":565,"src":"5840:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":543,"name":"address","nodeType":"ElementaryTypeName","src":"5840:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":546,"mutability":"mutable","name":"_tokenId","nameLocation":"5861:8:0","nodeType":"VariableDeclaration","scope":565,"src":"5853:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":545,"name":"uint256","nodeType":"ElementaryTypeName","src":"5853:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5824:46:0"},"returnParameters":{"id":549,"nodeType":"ParameterList","parameters":[],"src":"5897:0:0"},"scope":656,"src":"5806:194:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":572,"nodeType":"Block","src":"6067:38:0","statements":[{"expression":{"id":570,"name":"firstMintPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"6084:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":569,"id":571,"nodeType":"Return","src":"6077:21:0"}]},"functionSelector":"61a53251","id":573,"implemented":true,"kind":"function","modifiers":[],"name":"getFirstMintPrice","nameLocation":"6015:17:0","nodeType":"FunctionDefinition","parameters":{"id":566,"nodeType":"ParameterList","parameters":[],"src":"6032:2:0"},"returnParameters":{"id":569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":573,"src":"6058:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":567,"name":"uint256","nodeType":"ElementaryTypeName","src":"6058:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6057:9:0"},"scope":656,"src":"6006:99:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":580,"nodeType":"Block","src":"6167:33:0","statements":[{"expression":{"id":578,"name":"mintPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"6184:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":577,"id":579,"nodeType":"Return","src":"6177:16:0"}]},"functionSelector":"a7f93ebd","id":581,"implemented":true,"kind":"function","modifiers":[],"name":"getMintPrice","nameLocation":"6120:12:0","nodeType":"FunctionDefinition","parameters":{"id":574,"nodeType":"ParameterList","parameters":[],"src":"6132:2:0"},"returnParameters":{"id":577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":576,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":581,"src":"6158:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":575,"name":"uint256","nodeType":"ElementaryTypeName","src":"6158:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6157:9:0"},"scope":656,"src":"6111:89:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":590,"nodeType":"Block","src":"6264:29:0","statements":[{"expression":{"id":588,"name":"cards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"6281:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Card_$87_storage_$dyn_storage","typeString":"struct BusinessCardBase.Card storage ref[] storage ref"}},"functionReturnParameters":587,"id":589,"nodeType":"Return","src":"6274:12:0"}]},"functionSelector":"b0df9e53","id":591,"implemented":true,"kind":"function","modifiers":[],"name":"getCards","nameLocation":"6215:8:0","nodeType":"FunctionDefinition","parameters":{"id":582,"nodeType":"ParameterList","parameters":[],"src":"6223:2:0"},"returnParameters":{"id":587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":586,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":591,"src":"6249:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr","typeString":"struct BusinessCardBase.Card[]"},"typeName":{"baseType":{"id":584,"nodeType":"UserDefinedTypeName","pathNode":{"id":583,"name":"Card","nodeType":"IdentifierPath","referencedDeclaration":87,"src":"6249:4:0"},"referencedDeclaration":87,"src":"6249:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Card_$87_storage_ptr","typeString":"struct BusinessCardBase.Card"}},"id":585,"nodeType":"ArrayTypeName","src":"6249:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Card_$87_storage_$dyn_storage_ptr","typeString":"struct BusinessCardBase.Card[]"}},"visibility":"internal"}],"src":"6248:15:0"},"scope":656,"src":"6206:87:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":603,"nodeType":"Block","src":"6365:34:0","statements":[{"expression":{"baseExpression":{"id":599,"name":"cards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"6382:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Card_$87_storage_$dyn_storage","typeString":"struct BusinessCardBase.Card storage ref[] storage ref"}},"id":601,"indexExpression":{"id":600,"name":"_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"6388:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6382:10:0","typeDescriptions":{"typeIdentifier":"t_struct$_Card_$87_storage","typeString":"struct BusinessCardBase.Card storage ref"}},"functionReturnParameters":598,"id":602,"nodeType":"Return","src":"6375:17:0"}]},"functionSelector":"9188d312","id":604,"implemented":true,"kind":"function","modifiers":[],"name":"getCard","nameLocation":"6308:7:0","nodeType":"FunctionDefinition","parameters":{"id":594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":593,"mutability":"mutable","name":"_id","nameLocation":"6324:3:0","nodeType":"VariableDeclaration","scope":604,"src":"6316:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":592,"name":"uint256","nodeType":"ElementaryTypeName","src":"6316:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6315:13:0"},"returnParameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":604,"src":"6352:11:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Card_$87_memory_ptr","typeString":"struct BusinessCardBase.Card"},"typeName":{"id":596,"nodeType":"UserDefinedTypeName","pathNode":{"id":595,"name":"Card","nodeType":"IdentifierPath","referencedDeclaration":87,"src":"6352:4:0"},"referencedDeclaration":87,"src":"6352:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Card_$87_storage_ptr","typeString":"struct BusinessCardBase.Card"}},"visibility":"internal"}],"src":"6351:13:0"},"scope":656,"src":"6299:100:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":612,"nodeType":"Block","src":"6461:36:0","statements":[{"expression":{"expression":{"id":609,"name":"cards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"6478:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Card_$87_storage_$dyn_storage","typeString":"struct BusinessCardBase.Card storage ref[] storage ref"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6478:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":608,"id":611,"nodeType":"Return","src":"6471:19:0"}]},"functionSelector":"7d620130","id":613,"implemented":true,"kind":"function","modifiers":[],"name":"getCardCount","nameLocation":"6414:12:0","nodeType":"FunctionDefinition","parameters":{"id":605,"nodeType":"ParameterList","parameters":[],"src":"6426:2:0"},"returnParameters":{"id":608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":613,"src":"6452:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":606,"name":"uint256","nodeType":"ElementaryTypeName","src":"6452:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6451:9:0"},"scope":656,"src":"6405:92:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":624,"nodeType":"Block","src":"6580:41:0","statements":[{"expression":{"arguments":[{"id":621,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"6607:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":620,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"6597:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6597:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":619,"id":623,"nodeType":"Return","src":"6590:24:0"}]},"functionSelector":"95acf987","id":625,"implemented":true,"kind":"function","modifiers":[],"name":"getCardCountByOwner","nameLocation":"6512:19:0","nodeType":"FunctionDefinition","parameters":{"id":616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":615,"mutability":"mutable","name":"_owner","nameLocation":"6540:6:0","nodeType":"VariableDeclaration","scope":625,"src":"6532:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":614,"name":"address","nodeType":"ElementaryTypeName","src":"6532:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6531:16:0"},"returnParameters":{"id":619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":618,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":625,"src":"6571:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":617,"name":"uint256","nodeType":"ElementaryTypeName","src":"6571:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6570:9:0"},"scope":656,"src":"6503:118:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":642,"nodeType":"Block","src":"6719:66:0","statements":[{"expression":{"baseExpression":{"id":635,"name":"cards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"6736:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Card_$87_storage_$dyn_storage","typeString":"struct BusinessCardBase.Card storage ref[] storage ref"}},"id":640,"indexExpression":{"arguments":[{"id":637,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":627,"src":"6762:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":638,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"6770:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":636,"name":"tokenOfOwnerByIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"6742:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6742:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6736:42:0","typeDescriptions":{"typeIdentifier":"t_struct$_Card_$87_storage","typeString":"struct BusinessCardBase.Card storage ref"}},"functionReturnParameters":634,"id":641,"nodeType":"Return","src":"6729:49:0"}]},"functionSelector":"185590e2","id":643,"implemented":true,"kind":"function","modifiers":[],"name":"getCardByOwner","nameLocation":"6636:14:0","nodeType":"FunctionDefinition","parameters":{"id":630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":627,"mutability":"mutable","name":"_owner","nameLocation":"6659:6:0","nodeType":"VariableDeclaration","scope":643,"src":"6651:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":626,"name":"address","nodeType":"ElementaryTypeName","src":"6651:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":629,"mutability":"mutable","name":"_index","nameLocation":"6675:6:0","nodeType":"VariableDeclaration","scope":643,"src":"6667:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":628,"name":"uint256","nodeType":"ElementaryTypeName","src":"6667:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6650:32:0"},"returnParameters":{"id":634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":633,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":643,"src":"6706:11:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Card_$87_memory_ptr","typeString":"struct BusinessCardBase.Card"},"typeName":{"id":632,"nodeType":"UserDefinedTypeName","pathNode":{"id":631,"name":"Card","nodeType":"IdentifierPath","referencedDeclaration":87,"src":"6706:4:0"},"referencedDeclaration":87,"src":"6706:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Card_$87_storage_ptr","typeString":"struct BusinessCardBase.Card"}},"visibility":"internal"}],"src":"6705:13:0"},"scope":656,"src":"6627:158:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":654,"nodeType":"Block","src":"6877:60:0","statements":[{"expression":{"baseExpression":{"id":650,"name":"addressToCompanyName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"6894:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_string_storage_$","typeString":"mapping(address => string storage ref)"}},"id":652,"indexExpression":{"id":651,"name":"companyAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"6915:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6894:36:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":649,"id":653,"nodeType":"Return","src":"6887:43:0"}]},"functionSelector":"a4ef7031","id":655,"implemented":true,"kind":"function","modifiers":[],"name":"getCompanyName","nameLocation":"6800:14:0","nodeType":"FunctionDefinition","parameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":645,"mutability":"mutable","name":"companyAddress","nameLocation":"6823:14:0","nodeType":"VariableDeclaration","scope":655,"src":"6815:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":644,"name":"address","nodeType":"ElementaryTypeName","src":"6815:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6814:24:0"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":655,"src":"6862:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":647,"name":"string","nodeType":"ElementaryTypeName","src":"6862:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6861:15:0"},"scope":656,"src":"6791:146:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":657,"src":"436:6503:0","usedErrors":[7,9,11,13,15,17]}],"src":"32:6908:0"},"id":0},"contracts/BusinessCardMarketplace.sol":{"ast":{"absolutePath":"contracts/BusinessCardMarketplace.sol","exportedSymbols":{"BusinessCardMarketplace":[1045],"BusinessCardMarketplace__AlreadyListed":[663],"BusinessCardMarketplace__ApproveNotCleared":[671],"BusinessCardMarketplace__InvalidPrice":[667],"BusinessCardMarketplace__NotApproved":[669],"BusinessCardMarketplace__NotListed":[665],"BusinessCardMarketplace__OnlyOwner":[661],"IERC165":[3612],"IERC721":[2505]},"id":1046,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":658,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"contracts/IERC721.sol","file":"./IERC721.sol","id":659,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1046,"sourceUnit":2506,"src":"57:23:1","symbolAliases":[],"unitAlias":""},{"id":661,"name":"BusinessCardMarketplace__OnlyOwner","nameLocation":"98:34:1","nodeType":"ErrorDefinition","parameters":{"id":660,"nodeType":"ParameterList","parameters":[],"src":"132:2:1"},"src":"92:43:1"},{"id":663,"name":"BusinessCardMarketplace__AlreadyListed","nameLocation":"142:38:1","nodeType":"ErrorDefinition","parameters":{"id":662,"nodeType":"ParameterList","parameters":[],"src":"180:2:1"},"src":"136:47:1"},{"id":665,"name":"BusinessCardMarketplace__NotListed","nameLocation":"190:34:1","nodeType":"ErrorDefinition","parameters":{"id":664,"nodeType":"ParameterList","parameters":[],"src":"224:2:1"},"src":"184:43:1"},{"id":667,"name":"BusinessCardMarketplace__InvalidPrice","nameLocation":"234:37:1","nodeType":"ErrorDefinition","parameters":{"id":666,"nodeType":"ParameterList","parameters":[],"src":"271:2:1"},"src":"228:46:1"},{"id":669,"name":"BusinessCardMarketplace__NotApproved","nameLocation":"281:36:1","nodeType":"ErrorDefinition","parameters":{"id":668,"nodeType":"ParameterList","parameters":[],"src":"317:2:1"},"src":"275:45:1"},{"id":671,"name":"BusinessCardMarketplace__ApproveNotCleared","nameLocation":"327:42:1","nodeType":"ErrorDefinition","parameters":{"id":670,"nodeType":"ParameterList","parameters":[],"src":"369:2:1"},"src":"321:51:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1045,"linearizedBaseContracts":[1045],"name":"BusinessCardMarketplace","nameLocation":"383:23:1","nodeType":"ContractDefinition","nodes":[{"canonicalName":"BusinessCardMarketplace.Listing","id":678,"members":[{"constant":false,"id":673,"mutability":"mutable","name":"listId","nameLocation":"469:6:1","nodeType":"VariableDeclaration","scope":678,"src":"461:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":672,"name":"uint256","nodeType":"ElementaryTypeName","src":"461:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":675,"mutability":"mutable","name":"price","nameLocation":"493:5:1","nodeType":"VariableDeclaration","scope":678,"src":"485:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":674,"name":"uint256","nodeType":"ElementaryTypeName","src":"485:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":677,"mutability":"mutable","name":"seller","nameLocation":"516:6:1","nodeType":"VariableDeclaration","scope":678,"src":"508:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":676,"name":"address","nodeType":"ElementaryTypeName","src":"508:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Listing","nameLocation":"443:7:1","nodeType":"StructDefinition","scope":1045,"src":"436:93:1","visibility":"public"},{"constant":false,"id":685,"mutability":"mutable","name":"listings","nameLocation":"608:8:1","nodeType":"VariableDeclaration","scope":1045,"src":"551:65:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct BusinessCardMarketplace.Listing))"},"typeName":{"id":684,"keyType":{"id":679,"name":"address","nodeType":"ElementaryTypeName","src":"559:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"551:47:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct BusinessCardMarketplace.Listing))"},"valueType":{"id":683,"keyType":{"id":680,"name":"uint256","nodeType":"ElementaryTypeName","src":"578:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"570:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$","typeString":"mapping(uint256 => struct BusinessCardMarketplace.Listing)"},"valueType":{"id":682,"nodeType":"UserDefinedTypeName","pathNode":{"id":681,"name":"Listing","nodeType":"IdentifierPath","referencedDeclaration":678,"src":"589:7:1"},"referencedDeclaration":678,"src":"589:7:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_storage_ptr","typeString":"struct BusinessCardMarketplace.Listing"}}}},"visibility":"internal"},{"anonymous":false,"id":693,"name":"ListingListed","nameLocation":"643:13:1","nodeType":"EventDefinition","parameters":{"id":692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":687,"indexed":true,"mutability":"mutable","name":"cardId","nameLocation":"673:6:1","nodeType":"VariableDeclaration","scope":693,"src":"657:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":686,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":689,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"689:5:1","nodeType":"VariableDeclaration","scope":693,"src":"681:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":688,"name":"uint256","nodeType":"ElementaryTypeName","src":"681:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":691,"indexed":true,"mutability":"mutable","name":"seller","nameLocation":"712:6:1","nodeType":"VariableDeclaration","scope":693,"src":"696:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":690,"name":"address","nodeType":"ElementaryTypeName","src":"696:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"656:63:1"},"src":"637:83:1"},{"anonymous":false,"id":699,"name":"ListingRemoved","nameLocation":"731:14:1","nodeType":"EventDefinition","parameters":{"id":698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":695,"indexed":true,"mutability":"mutable","name":"cardId","nameLocation":"762:6:1","nodeType":"VariableDeclaration","scope":699,"src":"746:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":694,"name":"uint256","nodeType":"ElementaryTypeName","src":"746:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":697,"indexed":true,"mutability":"mutable","name":"seller","nameLocation":"786:6:1","nodeType":"VariableDeclaration","scope":699,"src":"770:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":696,"name":"address","nodeType":"ElementaryTypeName","src":"770:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"745:48:1"},"src":"725:69:1"},{"anonymous":false,"id":709,"name":"ListingBought","nameLocation":"805:13:1","nodeType":"EventDefinition","parameters":{"id":708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":701,"indexed":true,"mutability":"mutable","name":"cardId","nameLocation":"835:6:1","nodeType":"VariableDeclaration","scope":709,"src":"819:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":700,"name":"uint256","nodeType":"ElementaryTypeName","src":"819:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":703,"indexed":true,"mutability":"mutable","name":"buyer","nameLocation":"859:5:1","nodeType":"VariableDeclaration","scope":709,"src":"843:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":702,"name":"address","nodeType":"ElementaryTypeName","src":"843:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":705,"indexed":true,"mutability":"mutable","name":"seller","nameLocation":"882:6:1","nodeType":"VariableDeclaration","scope":709,"src":"866:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":704,"name":"address","nodeType":"ElementaryTypeName","src":"866:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":707,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"898:5:1","nodeType":"VariableDeclaration","scope":709,"src":"890:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":706,"name":"uint256","nodeType":"ElementaryTypeName","src":"890:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"818:86:1"},"src":"799:106:1"},{"body":{"id":730,"nodeType":"Block","src":"985:152:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":719,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"1028:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":716,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"1007:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":715,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"999:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2505_$","typeString":"type(contract IERC721)"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"999:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$2505","typeString":"contract IERC721"}},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":2438,"src":"999:28:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"999:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":721,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1040:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1040:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"999:51:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":728,"nodeType":"IfStatement","src":"995:125:1","trueBody":{"id":727,"nodeType":"Block","src":"1052:68:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":724,"name":"BusinessCardMarketplace__OnlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"1073:34:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1073:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":726,"nodeType":"RevertStatement","src":"1066:43:1"}]}},{"id":729,"nodeType":"PlaceholderStatement","src":"1129:1:1"}]},"id":731,"name":"onlyOwner","nameLocation":"937:9:1","nodeType":"ModifierDefinition","parameters":{"id":714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":711,"mutability":"mutable","name":"_nftAddress","nameLocation":"955:11:1","nodeType":"VariableDeclaration","scope":731,"src":"947:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":710,"name":"address","nodeType":"ElementaryTypeName","src":"947:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":713,"mutability":"mutable","name":"_cardId","nameLocation":"976:7:1","nodeType":"VariableDeclaration","scope":731,"src":"968:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":712,"name":"uint256","nodeType":"ElementaryTypeName","src":"968:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"946:38:1"},"src":"928:209:1","virtual":false,"visibility":"internal"},{"body":{"id":763,"nodeType":"Block","src":"1200:201:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":737,"name":"listings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"1214:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref))"}},"id":739,"indexExpression":{"id":738,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"1223:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1214:21:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$","typeString":"mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref)"}},"id":741,"indexExpression":{"id":740,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"1236:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1214:30:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_storage","typeString":"struct BusinessCardMarketplace.Listing storage ref"}},"id":742,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":677,"src":"1214:37:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1263:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1255:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":743,"name":"address","nodeType":"ElementaryTypeName","src":"1255:7:1","typeDescriptions":{}}},"id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1255:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1214:51:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":748,"name":"listings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"1269:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref))"}},"id":750,"indexExpression":{"id":749,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"1278:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1269:21:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$","typeString":"mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref)"}},"id":752,"indexExpression":{"id":751,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"1291:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1269:30:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_storage","typeString":"struct BusinessCardMarketplace.Listing storage ref"}},"id":753,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"price","nodeType":"MemberAccess","referencedDeclaration":675,"src":"1269:36:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1309:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1269:41:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1214:96:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":761,"nodeType":"IfStatement","src":"1210:174:1","trueBody":{"id":760,"nodeType":"Block","src":"1312:72:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":757,"name":"BusinessCardMarketplace__AlreadyListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"1333:38:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1333:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":759,"nodeType":"RevertStatement","src":"1326:47:1"}]}},{"id":762,"nodeType":"PlaceholderStatement","src":"1393:1:1"}]},"id":764,"name":"notListed","nameLocation":"1152:9:1","nodeType":"ModifierDefinition","parameters":{"id":736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":733,"mutability":"mutable","name":"_nftAddress","nameLocation":"1170:11:1","nodeType":"VariableDeclaration","scope":764,"src":"1162:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":732,"name":"address","nodeType":"ElementaryTypeName","src":"1162:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":735,"mutability":"mutable","name":"_cardId","nameLocation":"1191:7:1","nodeType":"VariableDeclaration","scope":764,"src":"1183:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":734,"name":"uint256","nodeType":"ElementaryTypeName","src":"1183:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1161:38:1"},"src":"1143:258:1","virtual":false,"visibility":"internal"},{"body":{"id":796,"nodeType":"Block","src":"1461:197:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":770,"name":"listings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"1475:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref))"}},"id":772,"indexExpression":{"id":771,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"1484:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1475:21:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$","typeString":"mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref)"}},"id":774,"indexExpression":{"id":773,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"1497:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1475:30:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_storage","typeString":"struct BusinessCardMarketplace.Listing storage ref"}},"id":775,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":677,"src":"1475:37:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1524:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1516:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":776,"name":"address","nodeType":"ElementaryTypeName","src":"1516:7:1","typeDescriptions":{}}},"id":779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1516:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1475:51:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":781,"name":"listings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"1530:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref))"}},"id":783,"indexExpression":{"id":782,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"1539:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1530:21:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$","typeString":"mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref)"}},"id":785,"indexExpression":{"id":784,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"1552:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1530:30:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_storage","typeString":"struct BusinessCardMarketplace.Listing storage ref"}},"id":786,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"price","nodeType":"MemberAccess","referencedDeclaration":675,"src":"1530:36:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1570:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1530:41:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1475:96:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":794,"nodeType":"IfStatement","src":"1471:170:1","trueBody":{"id":793,"nodeType":"Block","src":"1573:68:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":790,"name":"BusinessCardMarketplace__NotListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"1594:34:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1594:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":792,"nodeType":"RevertStatement","src":"1587:43:1"}]}},{"id":795,"nodeType":"PlaceholderStatement","src":"1650:1:1"}]},"id":797,"name":"Listed","nameLocation":"1416:6:1","nodeType":"ModifierDefinition","parameters":{"id":769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":766,"mutability":"mutable","name":"_nftAddress","nameLocation":"1431:11:1","nodeType":"VariableDeclaration","scope":797,"src":"1423:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":765,"name":"address","nodeType":"ElementaryTypeName","src":"1423:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":768,"mutability":"mutable","name":"_cardId","nameLocation":"1452:7:1","nodeType":"VariableDeclaration","scope":797,"src":"1444:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":767,"name":"uint256","nodeType":"ElementaryTypeName","src":"1444:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1422:38:1"},"src":"1407:251:1","virtual":false,"visibility":"internal"},{"body":{"id":875,"nodeType":"Block","src":"1844:487:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":814,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"1858:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30","id":815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1868:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1858:11:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":821,"nodeType":"IfStatement","src":"1854:88:1","trueBody":{"id":820,"nodeType":"Block","src":"1871:71:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":817,"name":"BusinessCardMarketplace__InvalidPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"1892:37:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1892:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":819,"nodeType":"RevertStatement","src":"1885:46:1"}]}},{"expression":{"arguments":[{"arguments":[{"id":828,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1988:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_BusinessCardMarketplace_$1045","typeString":"contract BusinessCardMarketplace"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BusinessCardMarketplace_$1045","typeString":"contract BusinessCardMarketplace"}],"id":827,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1980:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":826,"name":"address","nodeType":"ElementaryTypeName","src":"1980:7:1","typeDescriptions":{}}},"id":829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1980:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":830,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"1995:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":823,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"1959:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":822,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"1951:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2505_$","typeString":"type(contract IERC721)"}},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1951:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$2505","typeString":"contract IERC721"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2478,"src":"1951:28:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1951:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":832,"nodeType":"ExpressionStatement","src":"1951:52:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":837,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2050:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":834,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"2025:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":833,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"2017:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2505_$","typeString":"type(contract IERC721)"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2017:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$2505","typeString":"contract IERC721"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getApproved","nodeType":"MemberAccess","referencedDeclaration":2494,"src":"2017:32:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2017:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":841,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2070:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_BusinessCardMarketplace_$1045","typeString":"contract BusinessCardMarketplace"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BusinessCardMarketplace_$1045","typeString":"contract BusinessCardMarketplace"}],"id":840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2062:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":839,"name":"address","nodeType":"ElementaryTypeName","src":"2062:7:1","typeDescriptions":{}}},"id":842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2062:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2017:58:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":848,"nodeType":"IfStatement","src":"2013:134:1","trueBody":{"id":847,"nodeType":"Block","src":"2077:70:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":844,"name":"BusinessCardMarketplace__NotApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"2098:36:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2098:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":846,"nodeType":"RevertStatement","src":"2091:45:1"}]}},{"assignments":[851],"declarations":[{"constant":false,"id":851,"mutability":"mutable","name":"listing","nameLocation":"2172:7:1","nodeType":"VariableDeclaration","scope":875,"src":"2157:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_memory_ptr","typeString":"struct BusinessCardMarketplace.Listing"},"typeName":{"id":850,"nodeType":"UserDefinedTypeName","pathNode":{"id":849,"name":"Listing","nodeType":"IdentifierPath","referencedDeclaration":678,"src":"2157:7:1"},"referencedDeclaration":678,"src":"2157:7:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_storage_ptr","typeString":"struct BusinessCardMarketplace.Listing"}},"visibility":"internal"}],"id":858,"initialValue":{"arguments":[{"id":853,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2190:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":854,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"2199:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":855,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2207:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2207:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":852,"name":"Listing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":678,"src":"2182:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Listing_$678_storage_ptr_$","typeString":"type(struct BusinessCardMarketplace.Listing storage pointer)"}},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2182:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_memory_ptr","typeString":"struct BusinessCardMarketplace.Listing memory"}},"nodeType":"VariableDeclarationStatement","src":"2157:61:1"},{"expression":{"id":866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":859,"name":"listings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"2228:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref))"}},"id":863,"indexExpression":{"expression":{"id":860,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2237:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2237:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2228:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$","typeString":"mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref)"}},"id":864,"indexExpression":{"id":862,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2249:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2228:29:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_storage","typeString":"struct BusinessCardMarketplace.Listing storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":865,"name":"listing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"2260:7:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_memory_ptr","typeString":"struct BusinessCardMarketplace.Listing memory"}},"src":"2228:39:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_storage","typeString":"struct BusinessCardMarketplace.Listing storage ref"}},"id":867,"nodeType":"ExpressionStatement","src":"2228:39:1"},{"eventCall":{"arguments":[{"id":869,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2296:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":870,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"2305:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":871,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2313:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2313:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":868,"name":"ListingListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"2282:13:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,uint256,address)"}},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2282:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":874,"nodeType":"EmitStatement","src":"2277:47:1"}]},"functionSelector":"24780c56","id":876,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":806,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"1790:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":807,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"1803:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":808,"kind":"modifierInvocation","modifierName":{"id":805,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":731,"src":"1780:9:1"},"nodeType":"ModifierInvocation","src":"1780:31:1"},{"arguments":[{"id":810,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"1822:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":811,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"1835:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":812,"kind":"modifierInvocation","modifierName":{"id":809,"name":"notListed","nodeType":"IdentifierPath","referencedDeclaration":764,"src":"1812:9:1"},"nodeType":"ModifierInvocation","src":"1812:31:1"}],"name":"createListing","nameLocation":"1673:13:1","nodeType":"FunctionDefinition","parameters":{"id":804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":799,"mutability":"mutable","name":"_nftAddress","nameLocation":"1704:11:1","nodeType":"VariableDeclaration","scope":876,"src":"1696:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":798,"name":"address","nodeType":"ElementaryTypeName","src":"1696:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":801,"mutability":"mutable","name":"_price","nameLocation":"1733:6:1","nodeType":"VariableDeclaration","scope":876,"src":"1725:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":800,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":803,"mutability":"mutable","name":"_cardId","nameLocation":"1757:7:1","nodeType":"VariableDeclaration","scope":876,"src":"1749:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":802,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1686:84:1"},"returnParameters":{"id":813,"nodeType":"ParameterList","parameters":[],"src":"1844:0:1"},"scope":1045,"src":"1664:667:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":932,"nodeType":"Block","src":"2490:309:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2537:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2529:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":895,"name":"address","nodeType":"ElementaryTypeName","src":"2529:7:1","typeDescriptions":{}}},"id":898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2529:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":899,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"2541:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":892,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"2508:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":891,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"2500:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2505_$","typeString":"type(contract IERC721)"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2500:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$2505","typeString":"contract IERC721"}},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2478,"src":"2500:28:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2500:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":901,"nodeType":"ExpressionStatement","src":"2500:49:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":906,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"2596:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":903,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"2571:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":902,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"2563:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2505_$","typeString":"type(contract IERC721)"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2563:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$2505","typeString":"contract IERC721"}},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getApproved","nodeType":"MemberAccess","referencedDeclaration":2494,"src":"2563:32:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2563:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2616:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2608:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":908,"name":"address","nodeType":"ElementaryTypeName","src":"2608:7:1","typeDescriptions":{}}},"id":911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2608:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2563:55:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":917,"nodeType":"IfStatement","src":"2559:137:1","trueBody":{"id":916,"nodeType":"Block","src":"2620:76:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":913,"name":"BusinessCardMarketplace__ApproveNotCleared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"2641:42:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2641:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":915,"nodeType":"RevertStatement","src":"2634:51:1"}]}},{"expression":{"id":924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"2706:36:1","subExpression":{"baseExpression":{"baseExpression":{"id":918,"name":"listings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"2713:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref))"}},"id":921,"indexExpression":{"expression":{"id":919,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2722:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2722:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2713:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$","typeString":"mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref)"}},"id":923,"indexExpression":{"id":922,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"2734:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2713:29:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_storage","typeString":"struct BusinessCardMarketplace.Listing storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":925,"nodeType":"ExpressionStatement","src":"2706:36:1"},{"eventCall":{"arguments":[{"id":927,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"2772:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":928,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2781:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2781:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":926,"name":"ListingRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":699,"src":"2757:14:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2757:35:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":931,"nodeType":"EmitStatement","src":"2752:40:1"}]},"functionSelector":"59edbe71","id":933,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":883,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"2439:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":884,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"2452:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":885,"kind":"modifierInvocation","modifierName":{"id":882,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":731,"src":"2429:9:1"},"nodeType":"ModifierInvocation","src":"2429:31:1"},{"arguments":[{"id":887,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"2468:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":888,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"2481:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":889,"kind":"modifierInvocation","modifierName":{"id":886,"name":"Listed","nodeType":"IdentifierPath","referencedDeclaration":797,"src":"2461:6:1"},"nodeType":"ModifierInvocation","src":"2461:28:1"}],"name":"removeListing","nameLocation":"2346:13:1","nodeType":"FunctionDefinition","parameters":{"id":881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"mutability":"mutable","name":"_nftAddress","nameLocation":"2377:11:1","nodeType":"VariableDeclaration","scope":933,"src":"2369:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":877,"name":"address","nodeType":"ElementaryTypeName","src":"2369:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":880,"mutability":"mutable","name":"_cardId","nameLocation":"2406:7:1","nodeType":"VariableDeclaration","scope":933,"src":"2398:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":879,"name":"uint256","nodeType":"ElementaryTypeName","src":"2398:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2359:60:1"},"returnParameters":{"id":890,"nodeType":"ParameterList","parameters":[],"src":"2490:0:1"},"scope":1045,"src":"2337:462:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1001,"nodeType":"Block","src":"2906:447:1","statements":[{"assignments":[946],"declarations":[{"constant":false,"id":946,"mutability":"mutable","name":"listing","nameLocation":"2931:7:1","nodeType":"VariableDeclaration","scope":1001,"src":"2916:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_memory_ptr","typeString":"struct BusinessCardMarketplace.Listing"},"typeName":{"id":945,"nodeType":"UserDefinedTypeName","pathNode":{"id":944,"name":"Listing","nodeType":"IdentifierPath","referencedDeclaration":678,"src":"2916:7:1"},"referencedDeclaration":678,"src":"2916:7:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_storage_ptr","typeString":"struct BusinessCardMarketplace.Listing"}},"visibility":"internal"}],"id":952,"initialValue":{"baseExpression":{"baseExpression":{"id":947,"name":"listings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"2941:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref))"}},"id":949,"indexExpression":{"id":948,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"2950:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2941:21:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$","typeString":"mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref)"}},"id":951,"indexExpression":{"id":950,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"2963:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2941:30:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_storage","typeString":"struct BusinessCardMarketplace.Listing storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2916:55:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":953,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2985:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2985:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":955,"name":"listing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"2997:7:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_memory_ptr","typeString":"struct BusinessCardMarketplace.Listing memory"}},"id":956,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"price","nodeType":"MemberAccess","referencedDeclaration":675,"src":"2997:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2985:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":962,"nodeType":"IfStatement","src":"2981:102:1","trueBody":{"id":961,"nodeType":"Block","src":"3012:71:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":958,"name":"BusinessCardMarketplace__InvalidPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"3033:37:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3033:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":960,"nodeType":"RevertStatement","src":"3026:46:1"}]}},{"expression":{"arguments":[{"expression":{"id":969,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3125:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"3125:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":965,"name":"listing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"3100:7:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_memory_ptr","typeString":"struct BusinessCardMarketplace.Listing memory"}},"id":966,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":677,"src":"3100:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3092:8:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":963,"name":"address","nodeType":"ElementaryTypeName","src":"3092:8:1","stateMutability":"payable","typeDescriptions":{}}},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3092:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"3092:32:1","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3092:43:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":972,"nodeType":"ExpressionStatement","src":"3092:43:1"},{"expression":{"arguments":[{"expression":{"id":977,"name":"listing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"3183:7:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_memory_ptr","typeString":"struct BusinessCardMarketplace.Listing memory"}},"id":978,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":677,"src":"3183:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":979,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3199:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3199:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":981,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"3211:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":974,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"3153:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":973,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"3145:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2505_$","typeString":"type(contract IERC721)"}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3145:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$2505","typeString":"contract IERC721"}},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":2460,"src":"3145:37:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3145:74:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":983,"nodeType":"ExpressionStatement","src":"3145:74:1"},{"expression":{"id":989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"3229:37:1","subExpression":{"baseExpression":{"baseExpression":{"id":984,"name":"listings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"3236:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref))"}},"id":986,"indexExpression":{"id":985,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"3245:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3236:21:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$","typeString":"mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref)"}},"id":988,"indexExpression":{"id":987,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"3258:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3236:30:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_storage","typeString":"struct BusinessCardMarketplace.Listing storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":990,"nodeType":"ExpressionStatement","src":"3229:37:1"},{"eventCall":{"arguments":[{"id":992,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"3295:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":993,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3304:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3304:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":995,"name":"listing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"3316:7:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_memory_ptr","typeString":"struct BusinessCardMarketplace.Listing memory"}},"id":996,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":677,"src":"3316:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":997,"name":"listing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"3332:7:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_memory_ptr","typeString":"struct BusinessCardMarketplace.Listing memory"}},"id":998,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"price","nodeType":"MemberAccess","referencedDeclaration":675,"src":"3332:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":991,"name":"ListingBought","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"3281:13:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,address,address,uint256)"}},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3281:65:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1000,"nodeType":"EmitStatement","src":"3276:70:1"}]},"functionSelector":"7dd9f846","id":1002,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":940,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"2884:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":941,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"2897:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":942,"kind":"modifierInvocation","modifierName":{"id":939,"name":"Listed","nodeType":"IdentifierPath","referencedDeclaration":797,"src":"2877:6:1"},"nodeType":"ModifierInvocation","src":"2877:28:1"}],"name":"buyCard","nameLocation":"2814:7:1","nodeType":"FunctionDefinition","parameters":{"id":938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":935,"mutability":"mutable","name":"_nftAddress","nameLocation":"2830:11:1","nodeType":"VariableDeclaration","scope":1002,"src":"2822:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":934,"name":"address","nodeType":"ElementaryTypeName","src":"2822:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":937,"mutability":"mutable","name":"_cardId","nameLocation":"2851:7:1","nodeType":"VariableDeclaration","scope":1002,"src":"2843:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":936,"name":"uint256","nodeType":"ElementaryTypeName","src":"2843:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2821:38:1"},"returnParameters":{"id":943,"nodeType":"ParameterList","parameters":[],"src":"2906:0:1"},"scope":1045,"src":"2805:548:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":1043,"nodeType":"Block","src":"3536:216:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1019,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"3550:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30","id":1020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3560:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3550:11:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1026,"nodeType":"IfStatement","src":"3546:88:1","trueBody":{"id":1025,"nodeType":"Block","src":"3563:71:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1022,"name":"BusinessCardMarketplace__InvalidPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"3584:37:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3584:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1024,"nodeType":"RevertStatement","src":"3577:46:1"}]}},{"expression":{"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":1027,"name":"listings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"3643:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref))"}},"id":1030,"indexExpression":{"id":1028,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"3652:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3643:21:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Listing_$678_storage_$","typeString":"mapping(uint256 => struct BusinessCardMarketplace.Listing storage ref)"}},"id":1031,"indexExpression":{"id":1029,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"3665:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3643:30:1","typeDescriptions":{"typeIdentifier":"t_struct$_Listing_$678_storage","typeString":"struct BusinessCardMarketplace.Listing storage ref"}},"id":1032,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"price","nodeType":"MemberAccess","referencedDeclaration":675,"src":"3643:36:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1033,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"3682:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3643:45:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1035,"nodeType":"ExpressionStatement","src":"3643:45:1"},{"eventCall":{"arguments":[{"id":1037,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"3717:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1038,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"3726:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1039,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3734:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3734:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1036,"name":"ListingListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"3703:13:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,uint256,address)"}},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3703:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1042,"nodeType":"EmitStatement","src":"3698:47:1"}]},"functionSelector":"f772adf1","id":1044,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1011,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"3485:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1012,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"3498:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1013,"kind":"modifierInvocation","modifierName":{"id":1010,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":731,"src":"3475:9:1"},"nodeType":"ModifierInvocation","src":"3475:31:1"},{"arguments":[{"id":1015,"name":"_nftAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"3514:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1016,"name":"_cardId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"3527:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1017,"kind":"modifierInvocation","modifierName":{"id":1014,"name":"Listed","nodeType":"IdentifierPath","referencedDeclaration":797,"src":"3507:6:1"},"nodeType":"ModifierInvocation","src":"3507:28:1"}],"name":"updateListing","nameLocation":"3368:13:1","nodeType":"FunctionDefinition","parameters":{"id":1009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1004,"mutability":"mutable","name":"_nftAddress","nameLocation":"3399:11:1","nodeType":"VariableDeclaration","scope":1044,"src":"3391:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1003,"name":"address","nodeType":"ElementaryTypeName","src":"3391:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1006,"mutability":"mutable","name":"_cardId","nameLocation":"3428:7:1","nodeType":"VariableDeclaration","scope":1044,"src":"3420:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1005,"name":"uint256","nodeType":"ElementaryTypeName","src":"3420:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1008,"mutability":"mutable","name":"_price","nameLocation":"3453:6:1","nodeType":"VariableDeclaration","scope":1044,"src":"3445:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1007,"name":"uint256","nodeType":"ElementaryTypeName","src":"3445:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3381:84:1"},"returnParameters":{"id":1018,"nodeType":"ParameterList","parameters":[],"src":"3536:0:1"},"scope":1045,"src":"3359:393:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1046,"src":"374:3380:1","usedErrors":[661,663,665,667,669,671]}],"src":"32:3723:1"},"id":1},"contracts/ERC721EnumerableUpgradeable.sol":{"ast":{"absolutePath":"contracts/ERC721EnumerableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3263],"ContextUpgradeable":[3327],"ERC165Upgradeable":[3600],"ERC721EnumerableUpgradeable":[1419],"ERC721Upgradeable":[2389],"IERC165Upgradeable":[3624],"IERC721EnumerableUpgradeable":[2536],"IERC721MetadataUpgradeable":[2810],"IERC721ReceiverUpgradeable":[2554],"IERC721Upgradeable":[2670],"Initializable":[2979],"MathUpgradeable":[4490],"SignedMathUpgradeable":[4595],"StringsUpgradeable":[3556]},"id":1420,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1047,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:2"},{"absolutePath":"contracts/ERC721Upgradeable.sol","file":"./ERC721Upgradeable.sol","id":1048,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1420,"sourceUnit":2390,"src":"153:33:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/IERC721EnumerableUpgradeable.sol","file":"./IERC721EnumerableUpgradeable.sol","id":1049,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1420,"sourceUnit":2537,"src":"187:44:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/proxy/utils/Initializable.sol","file":"./proxy/utils/Initializable.sol","id":1050,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1420,"sourceUnit":2980,"src":"232:41:2","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1052,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":2979,"src":"524:13:2"},"id":1053,"nodeType":"InheritanceSpecifier","src":"524:13:2"},{"baseName":{"id":1054,"name":"ERC721Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2389,"src":"539:17:2"},"id":1055,"nodeType":"InheritanceSpecifier","src":"539:17:2"},{"baseName":{"id":1056,"name":"IERC721EnumerableUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2536,"src":"558:28:2"},"id":1057,"nodeType":"InheritanceSpecifier","src":"558:28:2"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1051,"nodeType":"StructuredDocumentation","src":"275:199:2","text":" @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n enumerability of all the token ids in the contract as well as all token ids owned by each\n account."},"fullyImplemented":true,"id":1419,"linearizedBaseContracts":[1419,2536,2389,2810,2670,3600,3624,3327,2979],"name":"ERC721EnumerableUpgradeable","nameLocation":"493:27:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":1062,"nodeType":"Block","src":"654:2:2","statements":[]},"id":1063,"implemented":true,"kind":"function","modifiers":[{"id":1060,"kind":"modifierInvocation","modifierName":{"id":1059,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"637:16:2"},"nodeType":"ModifierInvocation","src":"637:16:2"}],"name":"__ERC721Enumerable_init","nameLocation":"602:23:2","nodeType":"FunctionDefinition","parameters":{"id":1058,"nodeType":"ParameterList","parameters":[],"src":"625:2:2"},"returnParameters":{"id":1061,"nodeType":"ParameterList","parameters":[],"src":"654:0:2"},"scope":1419,"src":"593:63:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1068,"nodeType":"Block","src":"733:2:2","statements":[]},"id":1069,"implemented":true,"kind":"function","modifiers":[{"id":1066,"kind":"modifierInvocation","modifierName":{"id":1065,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"716:16:2"},"nodeType":"ModifierInvocation","src":"716:16:2"}],"name":"__ERC721Enumerable_init_unchained","nameLocation":"671:33:2","nodeType":"FunctionDefinition","parameters":{"id":1064,"nodeType":"ParameterList","parameters":[],"src":"704:2:2"},"returnParameters":{"id":1067,"nodeType":"ParameterList","parameters":[],"src":"733:0:2"},"scope":1419,"src":"662:73:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"id":1075,"mutability":"mutable","name":"_ownedTokens","nameLocation":"850:12:2","nodeType":"VariableDeclaration","scope":1419,"src":"794:68:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"typeName":{"id":1074,"keyType":{"id":1070,"name":"address","nodeType":"ElementaryTypeName","src":"802:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"794:47:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"valueType":{"id":1073,"keyType":{"id":1071,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"813:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":1072,"name":"uint256","nodeType":"ElementaryTypeName","src":"832:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":1079,"mutability":"mutable","name":"_ownedTokensIndex","nameLocation":"968:17:2","nodeType":"VariableDeclaration","scope":1419,"src":"932:53:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1078,"keyType":{"id":1076,"name":"uint256","nodeType":"ElementaryTypeName","src":"940:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"932:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":1077,"name":"uint256","nodeType":"ElementaryTypeName","src":"951:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1082,"mutability":"mutable","name":"_allTokens","nameLocation":"1064:10:2","nodeType":"VariableDeclaration","scope":1419,"src":"1046:28:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[]"},"typeName":{"baseType":{"id":1080,"name":"uint256","nodeType":"ElementaryTypeName","src":"1046:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1081,"nodeType":"ArrayTypeName","src":"1046:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"private"},{"constant":false,"id":1086,"mutability":"mutable","name":"_allTokensIndex","nameLocation":"1181:15:2","nodeType":"VariableDeclaration","scope":1419,"src":"1145:51:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1085,"keyType":{"id":1083,"name":"uint256","nodeType":"ElementaryTypeName","src":"1153:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1145:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":1084,"name":"uint256","nodeType":"ElementaryTypeName","src":"1164:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"baseFunctions":[1533,3623],"body":{"id":1109,"nodeType":"Block","src":"1408:125:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1097,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"1425:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1099,"name":"IERC721EnumerableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"1445:28:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721EnumerableUpgradeable_$2536_$","typeString":"type(contract IERC721EnumerableUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721EnumerableUpgradeable_$2536_$","typeString":"type(contract IERC721EnumerableUpgradeable)"}],"id":1098,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1440:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1440:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721EnumerableUpgradeable_$2536","typeString":"type(contract IERC721EnumerableUpgradeable)"}},"id":1101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1440:46:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1425:61:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1105,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"1514:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1103,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1490:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721EnumerableUpgradeable_$1419_$","typeString":"type(contract super ERC721EnumerableUpgradeable)"}},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1533,"src":"1490:23:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1490:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1425:101:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1096,"id":1108,"nodeType":"Return","src":"1418:108:2"}]},"documentation":{"id":1087,"nodeType":"StructuredDocumentation","src":"1203:56:2","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1110,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1273:17:2","nodeType":"FunctionDefinition","overrides":{"id":1093,"nodeType":"OverrideSpecifier","overrides":[{"id":1091,"name":"IERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":3624,"src":"1354:18:2"},{"id":1092,"name":"ERC721Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2389,"src":"1374:17:2"}],"src":"1345:47:2"},"parameters":{"id":1090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1089,"mutability":"mutable","name":"interfaceId","nameLocation":"1307:11:2","nodeType":"VariableDeclaration","scope":1110,"src":"1300:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1088,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1300:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1290:34:2"},"returnParameters":{"id":1096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1095,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1110,"src":"1402:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1094,"name":"bool","nodeType":"ElementaryTypeName","src":"1402:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1401:6:2"},"scope":1419,"src":"1264:269:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2527],"body":{"id":1137,"nodeType":"Block","src":"1718:158:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1122,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"1736:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[{"id":1125,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"1772:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1123,"name":"ERC721Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"1744:17:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Upgradeable_$2389_$","typeString":"type(contract ERC721Upgradeable)"}},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1557,"src":"1744:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1744:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1736:42:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243373231456e756d657261626c653a206f776e657220696e646578206f7574206f6620626f756e6473","id":1128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1780:45:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c","typeString":"literal_string \"ERC721Enumerable: owner index out of bounds\""},"value":"ERC721Enumerable: owner index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c","typeString":"literal_string \"ERC721Enumerable: owner index out of bounds\""}],"id":1121,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1728:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1728:98:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1130,"nodeType":"ExpressionStatement","src":"1728:98:2"},{"expression":{"baseExpression":{"baseExpression":{"id":1131,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"1843:12:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":1133,"indexExpression":{"id":1132,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"1856:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1843:19:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1135,"indexExpression":{"id":1134,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"1863:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1843:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1120,"id":1136,"nodeType":"Return","src":"1836:33:2"}]},"documentation":{"id":1111,"nodeType":"StructuredDocumentation","src":"1539:68:2","text":" @dev See {IERC721Enumerable-tokenOfOwnerByIndex}."},"functionSelector":"2f745c59","id":1138,"implemented":true,"kind":"function","modifiers":[],"name":"tokenOfOwnerByIndex","nameLocation":"1621:19:2","nodeType":"FunctionDefinition","overrides":{"id":1117,"nodeType":"OverrideSpecifier","overrides":[],"src":"1691:8:2"},"parameters":{"id":1116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1113,"mutability":"mutable","name":"owner","nameLocation":"1649:5:2","nodeType":"VariableDeclaration","scope":1138,"src":"1641:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1112,"name":"address","nodeType":"ElementaryTypeName","src":"1641:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1115,"mutability":"mutable","name":"index","nameLocation":"1664:5:2","nodeType":"VariableDeclaration","scope":1138,"src":"1656:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1114,"name":"uint256","nodeType":"ElementaryTypeName","src":"1656:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1640:30:2"},"returnParameters":{"id":1120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1138,"src":"1709:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1118,"name":"uint256","nodeType":"ElementaryTypeName","src":"1709:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1708:9:2"},"scope":1419,"src":"1612:264:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2517],"body":{"id":1148,"nodeType":"Block","src":"2017:41:2","statements":[{"expression":{"expression":{"id":1145,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"2034:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2034:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1144,"id":1147,"nodeType":"Return","src":"2027:24:2"}]},"documentation":{"id":1139,"nodeType":"StructuredDocumentation","src":"1882:60:2","text":" @dev See {IERC721Enumerable-totalSupply}."},"functionSelector":"18160ddd","id":1149,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"1956:11:2","nodeType":"FunctionDefinition","overrides":{"id":1141,"nodeType":"OverrideSpecifier","overrides":[],"src":"1990:8:2"},"parameters":{"id":1140,"nodeType":"ParameterList","parameters":[],"src":"1967:2:2"},"returnParameters":{"id":1144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1143,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1149,"src":"2008:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1142,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2007:9:2"},"scope":1419,"src":"1947:111:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2535],"body":{"id":1171,"nodeType":"Block","src":"2214:157:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1159,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"2232:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1160,"name":"ERC721EnumerableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"2240:27:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721EnumerableUpgradeable_$1419_$","typeString":"type(contract ERC721EnumerableUpgradeable)"}},"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":1149,"src":"2240:39:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2240:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2232:49:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243373231456e756d657261626c653a20676c6f62616c20696e646578206f7574206f6620626f756e6473","id":1164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2283:46:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc","typeString":"literal_string \"ERC721Enumerable: global index out of bounds\""},"value":"ERC721Enumerable: global index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc","typeString":"literal_string \"ERC721Enumerable: global index out of bounds\""}],"id":1158,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2224:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2224:106:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1166,"nodeType":"ExpressionStatement","src":"2224:106:2"},{"expression":{"baseExpression":{"id":1167,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"2347:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1169,"indexExpression":{"id":1168,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"2358:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2347:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1157,"id":1170,"nodeType":"Return","src":"2340:24:2"}]},"documentation":{"id":1150,"nodeType":"StructuredDocumentation","src":"2064:61:2","text":" @dev See {IERC721Enumerable-tokenByIndex}."},"functionSelector":"4f6ccce7","id":1172,"implemented":true,"kind":"function","modifiers":[],"name":"tokenByIndex","nameLocation":"2139:12:2","nodeType":"FunctionDefinition","overrides":{"id":1154,"nodeType":"OverrideSpecifier","overrides":[],"src":"2187:8:2"},"parameters":{"id":1153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1152,"mutability":"mutable","name":"index","nameLocation":"2160:5:2","nodeType":"VariableDeclaration","scope":1172,"src":"2152:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1151,"name":"uint256","nodeType":"ElementaryTypeName","src":"2152:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2151:15:2"},"returnParameters":{"id":1157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1156,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1172,"src":"2205:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1155,"name":"uint256","nodeType":"ElementaryTypeName","src":"2205:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2204:9:2"},"scope":1419,"src":"2130:241:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2370],"body":{"id":1251,"nodeType":"Block","src":"2601:729:2","statements":[{"expression":{"arguments":[{"id":1188,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"2638:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1189,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"2644:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1190,"name":"firstTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"2648:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1191,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"2662:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1185,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2611:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721EnumerableUpgradeable_$1419_$","typeString":"type(contract super ERC721EnumerableUpgradeable)"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":2370,"src":"2611:26:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2611:61:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1193,"nodeType":"ExpressionStatement","src":"2611:61:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1194,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"2687:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2699:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2687:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1202,"nodeType":"IfStatement","src":"2683:219:2","trueBody":{"id":1201,"nodeType":"Block","src":"2702:200:2","statements":[{"expression":{"arguments":[{"hexValue":"455243373231456e756d657261626c653a20636f6e7365637574697665207472616e7366657273206e6f7420737570706f72746564","id":1198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2835:55:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314","typeString":"literal_string \"ERC721Enumerable: consecutive transfers not supported\""},"value":"ERC721Enumerable: consecutive transfers not supported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314","typeString":"literal_string \"ERC721Enumerable: consecutive transfers not supported\""}],"id":1197,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"2828:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2828:63:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1200,"nodeType":"ExpressionStatement","src":"2828:63:2"}]}},{"assignments":[1204],"declarations":[{"constant":false,"id":1204,"mutability":"mutable","name":"tokenId","nameLocation":"2920:7:2","nodeType":"VariableDeclaration","scope":1251,"src":"2912:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1203,"name":"uint256","nodeType":"ElementaryTypeName","src":"2912:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1206,"initialValue":{"id":1205,"name":"firstTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"2930:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2912:30:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1207,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"2957:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2973:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2965:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1208,"name":"address","nodeType":"ElementaryTypeName","src":"2965:7:2","typeDescriptions":{}}},"id":1211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2965:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2957:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1218,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"3052:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1219,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"3060:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3052:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1227,"nodeType":"IfStatement","src":"3048:88:2","trueBody":{"id":1226,"nodeType":"Block","src":"3064:72:2","statements":[{"expression":{"arguments":[{"id":1222,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"3111:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1223,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"3117:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1221,"name":"_removeTokenFromOwnerEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1365,"src":"3078:32:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3078:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1225,"nodeType":"ExpressionStatement","src":"3078:47:2"}]}},"id":1228,"nodeType":"IfStatement","src":"2953:183:2","trueBody":{"id":1217,"nodeType":"Block","src":"2977:65:2","statements":[{"expression":{"arguments":[{"id":1214,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"3023:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1213,"name":"_addTokenToAllTokensEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"2991:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2991:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1216,"nodeType":"ExpressionStatement","src":"2991:40:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1229,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"3149:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3163:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3155:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1230,"name":"address","nodeType":"ElementaryTypeName","src":"3155:7:2","typeDescriptions":{}}},"id":1233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3155:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3149:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1240,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"3247:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1241,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"3253:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3247:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1249,"nodeType":"IfStatement","src":"3243:81:2","trueBody":{"id":1248,"nodeType":"Block","src":"3259:65:2","statements":[{"expression":{"arguments":[{"id":1244,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"3301:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1245,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"3305:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1243,"name":"_addTokenToOwnerEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"3273:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3273:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1247,"nodeType":"ExpressionStatement","src":"3273:40:2"}]}},"id":1250,"nodeType":"IfStatement","src":"3145:179:2","trueBody":{"id":1239,"nodeType":"Block","src":"3167:70:2","statements":[{"expression":{"arguments":[{"id":1236,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"3218:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1235,"name":"_removeTokenFromAllTokensEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"3181:36:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3181:45:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1238,"nodeType":"ExpressionStatement","src":"3181:45:2"}]}}]},"documentation":{"id":1173,"nodeType":"StructuredDocumentation","src":"2377:58:2","text":" @dev See {ERC721-_beforeTokenTransfer}."},"id":1252,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"2449:20:2","nodeType":"FunctionDefinition","overrides":{"id":1183,"nodeType":"OverrideSpecifier","overrides":[],"src":"2592:8:2"},"parameters":{"id":1182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1175,"mutability":"mutable","name":"from","nameLocation":"2487:4:2","nodeType":"VariableDeclaration","scope":1252,"src":"2479:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1174,"name":"address","nodeType":"ElementaryTypeName","src":"2479:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1177,"mutability":"mutable","name":"to","nameLocation":"2509:2:2","nodeType":"VariableDeclaration","scope":1252,"src":"2501:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1176,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1179,"mutability":"mutable","name":"firstTokenId","nameLocation":"2529:12:2","nodeType":"VariableDeclaration","scope":1252,"src":"2521:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1178,"name":"uint256","nodeType":"ElementaryTypeName","src":"2521:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1181,"mutability":"mutable","name":"batchSize","nameLocation":"2559:9:2","nodeType":"VariableDeclaration","scope":1252,"src":"2551:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1180,"name":"uint256","nodeType":"ElementaryTypeName","src":"2551:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2469:105:2"},"returnParameters":{"id":1184,"nodeType":"ParameterList","parameters":[],"src":"2601:0:2"},"scope":1419,"src":"2440:890:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1281,"nodeType":"Block","src":"3698:154:2","statements":[{"assignments":[1261],"declarations":[{"constant":false,"id":1261,"mutability":"mutable","name":"length","nameLocation":"3716:6:2","nodeType":"VariableDeclaration","scope":1281,"src":"3708:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1260,"name":"uint256","nodeType":"ElementaryTypeName","src":"3708:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1266,"initialValue":{"arguments":[{"id":1264,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"3753:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1262,"name":"ERC721Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"3725:17:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Upgradeable_$2389_$","typeString":"type(contract ERC721Upgradeable)"}},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1557,"src":"3725:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3725:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3708:48:2"},{"expression":{"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1267,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"3766:12:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":1270,"indexExpression":{"id":1268,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"3779:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3766:16:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1271,"indexExpression":{"id":1269,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"3783:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3766:24:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1272,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"3793:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3766:34:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1274,"nodeType":"ExpressionStatement","src":"3766:34:2"},{"expression":{"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1275,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"3810:17:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1277,"indexExpression":{"id":1276,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"3828:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3810:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1278,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"3839:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3810:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1280,"nodeType":"ExpressionStatement","src":"3810:35:2"}]},"documentation":{"id":1253,"nodeType":"StructuredDocumentation","src":"3336:283:2","text":" @dev Private function to add a token to this extension's ownership-tracking data structures.\n @param to address representing the new owner of the given token ID\n @param tokenId uint256 ID of the token to be added to the tokens list of the given address"},"id":1282,"implemented":true,"kind":"function","modifiers":[],"name":"_addTokenToOwnerEnumeration","nameLocation":"3633:27:2","nodeType":"FunctionDefinition","parameters":{"id":1258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1255,"mutability":"mutable","name":"to","nameLocation":"3669:2:2","nodeType":"VariableDeclaration","scope":1282,"src":"3661:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1254,"name":"address","nodeType":"ElementaryTypeName","src":"3661:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1257,"mutability":"mutable","name":"tokenId","nameLocation":"3681:7:2","nodeType":"VariableDeclaration","scope":1282,"src":"3673:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1256,"name":"uint256","nodeType":"ElementaryTypeName","src":"3673:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3660:29:2"},"returnParameters":{"id":1259,"nodeType":"ParameterList","parameters":[],"src":"3698:0:2"},"scope":1419,"src":"3624:228:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1301,"nodeType":"Block","src":"4113:95:2","statements":[{"expression":{"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1288,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"4123:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1290,"indexExpression":{"id":1289,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"4139:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4123:24:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1291,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"4150:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4150:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4123:44:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1294,"nodeType":"ExpressionStatement","src":"4123:44:2"},{"expression":{"arguments":[{"id":1298,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"4193:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1295,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"4177:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"4177:15:2","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4177:24:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1300,"nodeType":"ExpressionStatement","src":"4177:24:2"}]},"documentation":{"id":1283,"nodeType":"StructuredDocumentation","src":"3858:184:2","text":" @dev Private function to add a token to this extension's token tracking data structures.\n @param tokenId uint256 ID of the token to be added to the tokens list"},"id":1302,"implemented":true,"kind":"function","modifiers":[],"name":"_addTokenToAllTokensEnumeration","nameLocation":"4056:31:2","nodeType":"FunctionDefinition","parameters":{"id":1286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1285,"mutability":"mutable","name":"tokenId","nameLocation":"4096:7:2","nodeType":"VariableDeclaration","scope":1302,"src":"4088:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1284,"name":"uint256","nodeType":"ElementaryTypeName","src":"4088:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4087:17:2"},"returnParameters":{"id":1287,"nodeType":"ParameterList","parameters":[],"src":"4113:0:2"},"scope":1419,"src":"4047:161:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1364,"nodeType":"Block","src":"4906:900:2","statements":[{"assignments":[1311],"declarations":[{"constant":false,"id":1311,"mutability":"mutable","name":"lastTokenIndex","nameLocation":"5095:14:2","nodeType":"VariableDeclaration","scope":1364,"src":"5087:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1310,"name":"uint256","nodeType":"ElementaryTypeName","src":"5087:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1318,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1314,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"5140:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1312,"name":"ERC721Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"5112:17:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Upgradeable_$2389_$","typeString":"type(contract ERC721Upgradeable)"}},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1557,"src":"5112:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5112:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5148:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5112:37:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5087:62:2"},{"assignments":[1320],"declarations":[{"constant":false,"id":1320,"mutability":"mutable","name":"tokenIndex","nameLocation":"5167:10:2","nodeType":"VariableDeclaration","scope":1364,"src":"5159:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1319,"name":"uint256","nodeType":"ElementaryTypeName","src":"5159:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1324,"initialValue":{"baseExpression":{"id":1321,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"5180:17:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1323,"indexExpression":{"id":1322,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"5198:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5180:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5159:47:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1325,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"5310:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1326,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"5324:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5310:28:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1351,"nodeType":"IfStatement","src":"5306:323:2","trueBody":{"id":1350,"nodeType":"Block","src":"5340:289:2","statements":[{"assignments":[1329],"declarations":[{"constant":false,"id":1329,"mutability":"mutable","name":"lastTokenId","nameLocation":"5362:11:2","nodeType":"VariableDeclaration","scope":1350,"src":"5354:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1328,"name":"uint256","nodeType":"ElementaryTypeName","src":"5354:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1335,"initialValue":{"baseExpression":{"baseExpression":{"id":1330,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"5376:12:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":1332,"indexExpression":{"id":1331,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"5389:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5376:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1334,"indexExpression":{"id":1333,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"5395:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5376:34:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5354:56:2"},{"expression":{"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1336,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"5425:12:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":1339,"indexExpression":{"id":1337,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"5438:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5425:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1340,"indexExpression":{"id":1338,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"5444:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5425:30:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1341,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"5458:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5425:44:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1343,"nodeType":"ExpressionStatement","src":"5425:44:2"},{"expression":{"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1344,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"5541:17:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1346,"indexExpression":{"id":1345,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"5559:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5541:30:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1347,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"5574:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5541:43:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1349,"nodeType":"ExpressionStatement","src":"5541:43:2"}]}},{"expression":{"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"5715:33:2","subExpression":{"baseExpression":{"id":1352,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"5722:17:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1354,"indexExpression":{"id":1353,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"5740:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5722:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1356,"nodeType":"ExpressionStatement","src":"5715:33:2"},{"expression":{"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"5758:41:2","subExpression":{"baseExpression":{"baseExpression":{"id":1357,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"5765:12:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":1359,"indexExpression":{"id":1358,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"5778:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5765:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1361,"indexExpression":{"id":1360,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"5784:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5765:34:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1363,"nodeType":"ExpressionStatement","src":"5758:41:2"}]},"documentation":{"id":1303,"nodeType":"StructuredDocumentation","src":"4214:606:2","text":" @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n This has O(1) time complexity, but alters the order of the _ownedTokens array.\n @param from address representing the previous owner of the given token ID\n @param tokenId uint256 ID of the token to be removed from the tokens list of the given address"},"id":1365,"implemented":true,"kind":"function","modifiers":[],"name":"_removeTokenFromOwnerEnumeration","nameLocation":"4834:32:2","nodeType":"FunctionDefinition","parameters":{"id":1308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1305,"mutability":"mutable","name":"from","nameLocation":"4875:4:2","nodeType":"VariableDeclaration","scope":1365,"src":"4867:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1304,"name":"address","nodeType":"ElementaryTypeName","src":"4867:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1307,"mutability":"mutable","name":"tokenId","nameLocation":"4889:7:2","nodeType":"VariableDeclaration","scope":1365,"src":"4881:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1306,"name":"uint256","nodeType":"ElementaryTypeName","src":"4881:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4866:31:2"},"returnParameters":{"id":1309,"nodeType":"ParameterList","parameters":[],"src":"4906:0:2"},"scope":1419,"src":"4825:981:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1412,"nodeType":"Block","src":"6165:990:2","statements":[{"assignments":[1372],"declarations":[{"constant":false,"id":1372,"mutability":"mutable","name":"lastTokenIndex","nameLocation":"6351:14:2","nodeType":"VariableDeclaration","scope":1412,"src":"6343:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1371,"name":"uint256","nodeType":"ElementaryTypeName","src":"6343:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1377,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1373,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"6368:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6368:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6388:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6368:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6343:46:2"},{"assignments":[1379],"declarations":[{"constant":false,"id":1379,"mutability":"mutable","name":"tokenIndex","nameLocation":"6407:10:2","nodeType":"VariableDeclaration","scope":1412,"src":"6399:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1378,"name":"uint256","nodeType":"ElementaryTypeName","src":"6399:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1383,"initialValue":{"baseExpression":{"id":1380,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"6420:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1382,"indexExpression":{"id":1381,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"6436:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6420:24:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6399:45:2"},{"assignments":[1385],"declarations":[{"constant":false,"id":1385,"mutability":"mutable","name":"lastTokenId","nameLocation":"6774:11:2","nodeType":"VariableDeclaration","scope":1412,"src":"6766:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1384,"name":"uint256","nodeType":"ElementaryTypeName","src":"6766:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1389,"initialValue":{"baseExpression":{"id":1386,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"6788:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1388,"indexExpression":{"id":1387,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"6799:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6788:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6766:48:2"},{"expression":{"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1390,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"6825:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1392,"indexExpression":{"id":1391,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"6836:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6825:22:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1393,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"6850:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6825:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1395,"nodeType":"ExpressionStatement","src":"6825:36:2"},{"expression":{"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1396,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"6929:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1398,"indexExpression":{"id":1397,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"6945:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6929:28:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1399,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"6960:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6929:41:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1401,"nodeType":"ExpressionStatement","src":"6929:41:2"},{"expression":{"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"7091:31:2","subExpression":{"baseExpression":{"id":1402,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"7098:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1404,"indexExpression":{"id":1403,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"7114:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7098:24:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1406,"nodeType":"ExpressionStatement","src":"7091:31:2"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1407,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"7132:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"pop","nodeType":"MemberAccess","src":"7132:14:2","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer)"}},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7132:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1411,"nodeType":"ExpressionStatement","src":"7132:16:2"}]},"documentation":{"id":1366,"nodeType":"StructuredDocumentation","src":"5812:277:2","text":" @dev Private function to remove a token from this extension's token tracking data structures.\n This has O(1) time complexity, but alters the order of the _allTokens array.\n @param tokenId uint256 ID of the token to be removed from the tokens list"},"id":1413,"implemented":true,"kind":"function","modifiers":[],"name":"_removeTokenFromAllTokensEnumeration","nameLocation":"6103:36:2","nodeType":"FunctionDefinition","parameters":{"id":1369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1368,"mutability":"mutable","name":"tokenId","nameLocation":"6148:7:2","nodeType":"VariableDeclaration","scope":1413,"src":"6140:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1367,"name":"uint256","nodeType":"ElementaryTypeName","src":"6140:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6139:17:2"},"returnParameters":{"id":1370,"nodeType":"ParameterList","parameters":[],"src":"6165:0:2"},"scope":1419,"src":"6094:1061:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":1414,"nodeType":"StructuredDocumentation","src":"7161:254:2","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1418,"mutability":"mutable","name":"__gap","nameLocation":"7440:5:2","nodeType":"VariableDeclaration","scope":1419,"src":"7420:25:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$46_storage","typeString":"uint256[46]"},"typeName":{"baseType":{"id":1415,"name":"uint256","nodeType":"ElementaryTypeName","src":"7420:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1417,"length":{"hexValue":"3436","id":1416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7428:2:2","typeDescriptions":{"typeIdentifier":"t_rational_46_by_1","typeString":"int_const 46"},"value":"46"},"nodeType":"ArrayTypeName","src":"7420:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$46_storage_ptr","typeString":"uint256[46]"}},"visibility":"private"}],"scope":1420,"src":"475:6973:2","usedErrors":[]}],"src":"128:7321:2"},"id":2},"contracts/ERC721Upgradeable.sol":{"ast":{"absolutePath":"contracts/ERC721Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3263],"ContextUpgradeable":[3327],"ERC165Upgradeable":[3600],"ERC721Upgradeable":[2389],"IERC165Upgradeable":[3624],"IERC721MetadataUpgradeable":[2810],"IERC721ReceiverUpgradeable":[2554],"IERC721Upgradeable":[2670],"Initializable":[2979],"MathUpgradeable":[4490],"SignedMathUpgradeable":[4595],"StringsUpgradeable":[3556]},"id":2390,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1421,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:3"},{"absolutePath":"contracts/IERC721Upgradeable.sol","file":"./IERC721Upgradeable.sol","id":1422,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2390,"sourceUnit":2671,"src":"132:34:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/IERC721ReceiverUpgradeable.sol","file":"./IERC721ReceiverUpgradeable.sol","id":1423,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2390,"sourceUnit":2555,"src":"167:42:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/extensions/IERC721MetadataUpgradeable.sol","file":"./extensions/IERC721MetadataUpgradeable.sol","id":1424,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2390,"sourceUnit":2811,"src":"210:53:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/utils/AddressUpgradeable.sol","file":"./utils/AddressUpgradeable.sol","id":1425,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2390,"sourceUnit":3264,"src":"264:40:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/utils/ContextUpgradeable.sol","file":"./utils/ContextUpgradeable.sol","id":1426,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2390,"sourceUnit":3328,"src":"305:40:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/utils/StringsUpgradeable.sol","file":"./utils/StringsUpgradeable.sol","id":1427,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2390,"sourceUnit":3557,"src":"346:40:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/utils/introspection/ERC165Upgradeable.sol","file":"./utils/introspection/ERC165Upgradeable.sol","id":1428,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2390,"sourceUnit":3601,"src":"387:53:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/proxy/utils/Initializable.sol","file":"./proxy/utils/Initializable.sol","id":1429,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2390,"sourceUnit":2980,"src":"441:41:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1431,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":2979,"src":"765:13:3"},"id":1432,"nodeType":"InheritanceSpecifier","src":"765:13:3"},{"baseName":{"id":1433,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":3327,"src":"784:18:3"},"id":1434,"nodeType":"InheritanceSpecifier","src":"784:18:3"},{"baseName":{"id":1435,"name":"ERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":3600,"src":"808:17:3"},"id":1436,"nodeType":"InheritanceSpecifier","src":"808:17:3"},{"baseName":{"id":1437,"name":"IERC721Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2670,"src":"831:18:3"},"id":1438,"nodeType":"InheritanceSpecifier","src":"831:18:3"},{"baseName":{"id":1439,"name":"IERC721MetadataUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2810,"src":"855:26:3"},"id":1440,"nodeType":"InheritanceSpecifier","src":"855:26:3"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1430,"nodeType":"StructuredDocumentation","src":"484:246:3","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":2389,"linearizedBaseContracts":[2389,2810,2670,3600,3624,3327,2979],"name":"ERC721Upgradeable","nameLocation":"740:17:3","nodeType":"ContractDefinition","nodes":[{"id":1443,"libraryName":{"id":1441,"name":"AddressUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":3263,"src":"894:18:3"},"nodeType":"UsingForDirective","src":"888:37:3","typeName":{"id":1442,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"id":1446,"libraryName":{"id":1444,"name":"StringsUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":3556,"src":"936:18:3"},"nodeType":"UsingForDirective","src":"930:37:3","typeName":{"id":1445,"name":"uint256","nodeType":"ElementaryTypeName","src":"959:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":1448,"mutability":"mutable","name":"_name","nameLocation":"1006:5:3","nodeType":"VariableDeclaration","scope":2389,"src":"991:20:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1447,"name":"string","nodeType":"ElementaryTypeName","src":"991:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1450,"mutability":"mutable","name":"_symbol","nameLocation":"1053:7:3","nodeType":"VariableDeclaration","scope":2389,"src":"1038:22:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1449,"name":"string","nodeType":"ElementaryTypeName","src":"1038:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1454,"mutability":"mutable","name":"_owners","nameLocation":"1149:7:3","nodeType":"VariableDeclaration","scope":2389,"src":"1113:43:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1453,"keyType":{"id":1451,"name":"uint256","nodeType":"ElementaryTypeName","src":"1121:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1113:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":1452,"name":"address","nodeType":"ElementaryTypeName","src":"1132:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":1458,"mutability":"mutable","name":"_balances","nameLocation":"1243:9:3","nodeType":"VariableDeclaration","scope":2389,"src":"1207:45:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1457,"keyType":{"id":1455,"name":"address","nodeType":"ElementaryTypeName","src":"1215:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1207:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":1456,"name":"uint256","nodeType":"ElementaryTypeName","src":"1226:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1462,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1344:15:3","nodeType":"VariableDeclaration","scope":2389,"src":"1308:51:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1461,"keyType":{"id":1459,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1308:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":1460,"name":"address","nodeType":"ElementaryTypeName","src":"1327:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":1468,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1467:18:3","nodeType":"VariableDeclaration","scope":2389,"src":"1414:71:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":1467,"keyType":{"id":1463,"name":"address","nodeType":"ElementaryTypeName","src":"1422:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1414:44:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":1466,"keyType":{"id":1464,"name":"address","nodeType":"ElementaryTypeName","src":"1441:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1433:24:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":1465,"name":"bool","nodeType":"ElementaryTypeName","src":"1452:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":1483,"nodeType":"Block","src":"1698:56:3","statements":[{"expression":{"arguments":[{"id":1479,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"1732:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1480,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"1739:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1478,"name":"__ERC721_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"1708:23:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1708:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1482,"nodeType":"ExpressionStatement","src":"1708:39:3"}]},"documentation":{"id":1469,"nodeType":"StructuredDocumentation","src":"1492:108:3","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":1484,"implemented":true,"kind":"function","modifiers":[{"id":1476,"kind":"modifierInvocation","modifierName":{"id":1475,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"1681:16:3"},"nodeType":"ModifierInvocation","src":"1681:16:3"}],"name":"__ERC721_init","nameLocation":"1614:13:3","nodeType":"FunctionDefinition","parameters":{"id":1474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1471,"mutability":"mutable","name":"name_","nameLocation":"1642:5:3","nodeType":"VariableDeclaration","scope":1484,"src":"1628:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1470,"name":"string","nodeType":"ElementaryTypeName","src":"1628:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1473,"mutability":"mutable","name":"symbol_","nameLocation":"1663:7:3","nodeType":"VariableDeclaration","scope":1484,"src":"1649:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1472,"name":"string","nodeType":"ElementaryTypeName","src":"1649:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1627:44:3"},"returnParameters":{"id":1477,"nodeType":"ParameterList","parameters":[],"src":"1698:0:3"},"scope":2389,"src":"1605:149:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1501,"nodeType":"Block","src":"1863:57:3","statements":[{"expression":{"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1493,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"1873:5:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1494,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"1881:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1873:13:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1496,"nodeType":"ExpressionStatement","src":"1873:13:3"},{"expression":{"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1497,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"1896:7:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1498,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"1906:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1896:17:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1500,"nodeType":"ExpressionStatement","src":"1896:17:3"}]},"id":1502,"implemented":true,"kind":"function","modifiers":[{"id":1491,"kind":"modifierInvocation","modifierName":{"id":1490,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"1846:16:3"},"nodeType":"ModifierInvocation","src":"1846:16:3"}],"name":"__ERC721_init_unchained","nameLocation":"1769:23:3","nodeType":"FunctionDefinition","parameters":{"id":1489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1486,"mutability":"mutable","name":"name_","nameLocation":"1807:5:3","nodeType":"VariableDeclaration","scope":1502,"src":"1793:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1485,"name":"string","nodeType":"ElementaryTypeName","src":"1793:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1488,"mutability":"mutable","name":"symbol_","nameLocation":"1828:7:3","nodeType":"VariableDeclaration","scope":1502,"src":"1814:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1487,"name":"string","nodeType":"ElementaryTypeName","src":"1814:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1792:44:3"},"returnParameters":{"id":1492,"nodeType":"ParameterList","parameters":[],"src":"1863:0:3"},"scope":2389,"src":"1760:160:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3594,3623],"body":{"id":1532,"nodeType":"Block","src":"2131:214:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1513,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"2160:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1515,"name":"IERC721Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"2180:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Upgradeable_$2670_$","typeString":"type(contract IERC721Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Upgradeable_$2670_$","typeString":"type(contract IERC721Upgradeable)"}],"id":1514,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2175:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2175:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Upgradeable_$2670","typeString":"type(contract IERC721Upgradeable)"}},"id":1517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"2175:36:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2160:51:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1519,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"2227:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1521,"name":"IERC721MetadataUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2810,"src":"2247:26:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721MetadataUpgradeable_$2810_$","typeString":"type(contract IERC721MetadataUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721MetadataUpgradeable_$2810_$","typeString":"type(contract IERC721MetadataUpgradeable)"}],"id":1520,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2242:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2242:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721MetadataUpgradeable_$2810","typeString":"type(contract IERC721MetadataUpgradeable)"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"2242:44:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2227:59:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2160:126:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1528,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"2326:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1526,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2302:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721Upgradeable_$2389_$","typeString":"type(contract super ERC721Upgradeable)"}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3594,"src":"2302:23:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2302:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2160:178:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1512,"id":1531,"nodeType":"Return","src":"2141:197:3"}]},"documentation":{"id":1503,"nodeType":"StructuredDocumentation","src":"1926:56:3","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1533,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1996:17:3","nodeType":"FunctionDefinition","overrides":{"id":1509,"nodeType":"OverrideSpecifier","overrides":[{"id":1507,"name":"ERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":3600,"src":"2077:17:3"},{"id":1508,"name":"IERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":3624,"src":"2096:18:3"}],"src":"2068:47:3"},"parameters":{"id":1506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1505,"mutability":"mutable","name":"interfaceId","nameLocation":"2030:11:3","nodeType":"VariableDeclaration","scope":1533,"src":"2023:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1504,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2023:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2013:34:3"},"returnParameters":{"id":1512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1533,"src":"2125:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1510,"name":"bool","nodeType":"ElementaryTypeName","src":"2125:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2124:6:3"},"scope":2389,"src":"1987:358:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2595],"body":{"id":1556,"nodeType":"Block","src":"2485:123:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1543,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"2503:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2520:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2512:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1544,"name":"address","nodeType":"ElementaryTypeName","src":"2512:7:3","typeDescriptions":{}}},"id":1547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2512:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2503:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2524:43:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":1542,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2495:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2495:73:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1551,"nodeType":"ExpressionStatement","src":"2495:73:3"},{"expression":{"baseExpression":{"id":1552,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"2585:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1554,"indexExpression":{"id":1553,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"2595:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2585:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1541,"id":1555,"nodeType":"Return","src":"2578:23:3"}]},"documentation":{"id":1534,"nodeType":"StructuredDocumentation","src":"2351:48:3","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":1557,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2413:9:3","nodeType":"FunctionDefinition","overrides":{"id":1538,"nodeType":"OverrideSpecifier","overrides":[],"src":"2458:8:3"},"parameters":{"id":1537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1536,"mutability":"mutable","name":"owner","nameLocation":"2431:5:3","nodeType":"VariableDeclaration","scope":1557,"src":"2423:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1535,"name":"address","nodeType":"ElementaryTypeName","src":"2423:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2422:15:3"},"returnParameters":{"id":1541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1557,"src":"2476:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1539,"name":"uint256","nodeType":"ElementaryTypeName","src":"2476:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2475:9:3"},"scope":2389,"src":"2404:204:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2603],"body":{"id":1584,"nodeType":"Block","src":"2746:138:3","statements":[{"assignments":[1567],"declarations":[{"constant":false,"id":1567,"mutability":"mutable","name":"owner","nameLocation":"2764:5:3","nodeType":"VariableDeclaration","scope":1584,"src":"2756:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1566,"name":"address","nodeType":"ElementaryTypeName","src":"2756:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1571,"initialValue":{"arguments":[{"id":1569,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"2781:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1568,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"2772:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2772:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2756:33:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1573,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"2807:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2824:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1575,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2816:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1574,"name":"address","nodeType":"ElementaryTypeName","src":"2816:7:3","typeDescriptions":{}}},"id":1577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2816:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2807:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":1579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2828:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":1572,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2799:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2799:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1581,"nodeType":"ExpressionStatement","src":"2799:56:3"},{"expression":{"id":1582,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"2872:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1565,"id":1583,"nodeType":"Return","src":"2865:12:3"}]},"documentation":{"id":1558,"nodeType":"StructuredDocumentation","src":"2614:46:3","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":1585,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2674:7:3","nodeType":"FunctionDefinition","overrides":{"id":1562,"nodeType":"OverrideSpecifier","overrides":[],"src":"2719:8:3"},"parameters":{"id":1561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1560,"mutability":"mutable","name":"tokenId","nameLocation":"2690:7:3","nodeType":"VariableDeclaration","scope":1585,"src":"2682:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1559,"name":"uint256","nodeType":"ElementaryTypeName","src":"2682:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2681:17:3"},"returnParameters":{"id":1565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1564,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1585,"src":"2737:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1563,"name":"address","nodeType":"ElementaryTypeName","src":"2737:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2736:9:3"},"scope":2389,"src":"2665:219:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2795],"body":{"id":1594,"nodeType":"Block","src":"3015:29:3","statements":[{"expression":{"id":1592,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"3032:5:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1591,"id":1593,"nodeType":"Return","src":"3025:12:3"}]},"documentation":{"id":1586,"nodeType":"StructuredDocumentation","src":"2890:51:3","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":1595,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2955:4:3","nodeType":"FunctionDefinition","overrides":{"id":1588,"nodeType":"OverrideSpecifier","overrides":[],"src":"2982:8:3"},"parameters":{"id":1587,"nodeType":"ParameterList","parameters":[],"src":"2959:2:3"},"returnParameters":{"id":1591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1590,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1595,"src":"3000:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1589,"name":"string","nodeType":"ElementaryTypeName","src":"3000:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2999:15:3"},"scope":2389,"src":"2946:98:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2801],"body":{"id":1604,"nodeType":"Block","src":"3179:31:3","statements":[{"expression":{"id":1602,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"3196:7:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1601,"id":1603,"nodeType":"Return","src":"3189:14:3"}]},"documentation":{"id":1596,"nodeType":"StructuredDocumentation","src":"3050:53:3","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":1605,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"3117:6:3","nodeType":"FunctionDefinition","overrides":{"id":1598,"nodeType":"OverrideSpecifier","overrides":[],"src":"3146:8:3"},"parameters":{"id":1597,"nodeType":"ParameterList","parameters":[],"src":"3123:2:3"},"returnParameters":{"id":1601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1600,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1605,"src":"3164:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1599,"name":"string","nodeType":"ElementaryTypeName","src":"3164:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3163:15:3"},"scope":2389,"src":"3108:102:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2809],"body":{"id":1643,"nodeType":"Block","src":"3364:188:3","statements":[{"expression":{"arguments":[{"id":1615,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"3389:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1614,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"3374:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3374:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1617,"nodeType":"ExpressionStatement","src":"3374:23:3"},{"assignments":[1619],"declarations":[{"constant":false,"id":1619,"mutability":"mutable","name":"baseURI","nameLocation":"3422:7:3","nodeType":"VariableDeclaration","scope":1643,"src":"3408:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1618,"name":"string","nodeType":"ElementaryTypeName","src":"3408:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1622,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1620,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"3432:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3432:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"3408:34:3"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1625,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"3465:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1624,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3459:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1623,"name":"bytes","nodeType":"ElementaryTypeName","src":"3459:5:3","typeDescriptions":{}}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3459:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3459:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3483:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3459:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3543:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3459:86:3","trueExpression":{"arguments":[{"arguments":[{"id":1634,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"3511:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1635,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"3520:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3386,"src":"3520:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3520:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1632,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3494:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"3494:16:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3494:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3487:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1630,"name":"string","nodeType":"ElementaryTypeName","src":"3487:6:3","typeDescriptions":{}}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3487:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1613,"id":1642,"nodeType":"Return","src":"3452:93:3"}]},"documentation":{"id":1606,"nodeType":"StructuredDocumentation","src":"3216:55:3","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":1644,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"3285:8:3","nodeType":"FunctionDefinition","overrides":{"id":1610,"nodeType":"OverrideSpecifier","overrides":[],"src":"3331:8:3"},"parameters":{"id":1609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1608,"mutability":"mutable","name":"tokenId","nameLocation":"3302:7:3","nodeType":"VariableDeclaration","scope":1644,"src":"3294:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1607,"name":"uint256","nodeType":"ElementaryTypeName","src":"3294:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3293:17:3"},"returnParameters":{"id":1613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1612,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1644,"src":"3349:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1611,"name":"string","nodeType":"ElementaryTypeName","src":"3349:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3348:15:3"},"scope":2389,"src":"3276:276:3","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1652,"nodeType":"Block","src":"3860:26:3","statements":[{"expression":{"hexValue":"","id":1650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3877:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":1649,"id":1651,"nodeType":"Return","src":"3870:9:3"}]},"documentation":{"id":1645,"nodeType":"StructuredDocumentation","src":"3558:231:3","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":1653,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3803:8:3","nodeType":"FunctionDefinition","parameters":{"id":1646,"nodeType":"ParameterList","parameters":[],"src":"3811:2:3"},"returnParameters":{"id":1649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1653,"src":"3845:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1647,"name":"string","nodeType":"ElementaryTypeName","src":"3845:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3844:15:3"},"scope":2389,"src":"3794:92:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[2643],"body":{"id":1695,"nodeType":"Block","src":"4013:347:3","statements":[{"assignments":[1663],"declarations":[{"constant":false,"id":1663,"mutability":"mutable","name":"owner","nameLocation":"4031:5:3","nodeType":"VariableDeclaration","scope":1695,"src":"4023:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1662,"name":"address","nodeType":"ElementaryTypeName","src":"4023:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1668,"initialValue":{"arguments":[{"id":1666,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"4065:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1664,"name":"ERC721Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"4039:17:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Upgradeable_$2389_$","typeString":"type(contract ERC721Upgradeable)"}},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1585,"src":"4039:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4039:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4023:50:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1670,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"4091:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1671,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"4097:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4091:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4104:35:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":1669,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4083:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4083:57:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1675,"nodeType":"ExpressionStatement","src":"4083:57:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1677,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"4172:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4172:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1679,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"4188:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4172:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1682,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"4214:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1683,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"4221:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4221:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1681,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"4197:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4197:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4172:62:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":1687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4248:63:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":1676,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4151:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4151:170:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1689,"nodeType":"ExpressionStatement","src":"4151:170:3"},{"expression":{"arguments":[{"id":1691,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"4341:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1692,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"4345:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1690,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2216,"src":"4332:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4332:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1694,"nodeType":"ExpressionStatement","src":"4332:21:3"}]},"documentation":{"id":1654,"nodeType":"StructuredDocumentation","src":"3892:46:3","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":1696,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3952:7:3","nodeType":"FunctionDefinition","overrides":{"id":1660,"nodeType":"OverrideSpecifier","overrides":[],"src":"4004:8:3"},"parameters":{"id":1659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1656,"mutability":"mutable","name":"to","nameLocation":"3968:2:3","nodeType":"VariableDeclaration","scope":1696,"src":"3960:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1655,"name":"address","nodeType":"ElementaryTypeName","src":"3960:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1658,"mutability":"mutable","name":"tokenId","nameLocation":"3980:7:3","nodeType":"VariableDeclaration","scope":1696,"src":"3972:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1657,"name":"uint256","nodeType":"ElementaryTypeName","src":"3972:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3959:29:3"},"returnParameters":{"id":1661,"nodeType":"ParameterList","parameters":[],"src":"4013:0:3"},"scope":2389,"src":"3943:417:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2659],"body":{"id":1713,"nodeType":"Block","src":"4506:82:3","statements":[{"expression":{"arguments":[{"id":1706,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"4531:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1705,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"4516:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4516:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1708,"nodeType":"ExpressionStatement","src":"4516:23:3"},{"expression":{"baseExpression":{"id":1709,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"4557:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1711,"indexExpression":{"id":1710,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"4573:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4557:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1704,"id":1712,"nodeType":"Return","src":"4550:31:3"}]},"documentation":{"id":1697,"nodeType":"StructuredDocumentation","src":"4366:50:3","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":1714,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4430:11:3","nodeType":"FunctionDefinition","overrides":{"id":1701,"nodeType":"OverrideSpecifier","overrides":[],"src":"4479:8:3"},"parameters":{"id":1700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1699,"mutability":"mutable","name":"tokenId","nameLocation":"4450:7:3","nodeType":"VariableDeclaration","scope":1714,"src":"4442:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1698,"name":"uint256","nodeType":"ElementaryTypeName","src":"4442:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4441:17:3"},"returnParameters":{"id":1704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1703,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1714,"src":"4497:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1702,"name":"address","nodeType":"ElementaryTypeName","src":"4497:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4496:9:3"},"scope":2389,"src":"4421:167:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2651],"body":{"id":1730,"nodeType":"Block","src":"4739:69:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1724,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"4768:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4768:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1726,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"4782:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1727,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"4792:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1723,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"4749:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4749:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1729,"nodeType":"ExpressionStatement","src":"4749:52:3"}]},"documentation":{"id":1715,"nodeType":"StructuredDocumentation","src":"4594:56:3","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":1731,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4664:17:3","nodeType":"FunctionDefinition","overrides":{"id":1721,"nodeType":"OverrideSpecifier","overrides":[],"src":"4730:8:3"},"parameters":{"id":1720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1717,"mutability":"mutable","name":"operator","nameLocation":"4690:8:3","nodeType":"VariableDeclaration","scope":1731,"src":"4682:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1716,"name":"address","nodeType":"ElementaryTypeName","src":"4682:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1719,"mutability":"mutable","name":"approved","nameLocation":"4705:8:3","nodeType":"VariableDeclaration","scope":1731,"src":"4700:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1718,"name":"bool","nodeType":"ElementaryTypeName","src":"4700:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4681:33:3"},"returnParameters":{"id":1722,"nodeType":"ParameterList","parameters":[],"src":"4739:0:3"},"scope":2389,"src":"4655:153:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2669],"body":{"id":1748,"nodeType":"Block","src":"4977:59:3","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1742,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"4994:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1744,"indexExpression":{"id":1743,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1734,"src":"5013:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4994:25:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1746,"indexExpression":{"id":1745,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"5020:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4994:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1741,"id":1747,"nodeType":"Return","src":"4987:42:3"}]},"documentation":{"id":1732,"nodeType":"StructuredDocumentation","src":"4814:55:3","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":1749,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4883:16:3","nodeType":"FunctionDefinition","overrides":{"id":1738,"nodeType":"OverrideSpecifier","overrides":[],"src":"4953:8:3"},"parameters":{"id":1737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1734,"mutability":"mutable","name":"owner","nameLocation":"4908:5:3","nodeType":"VariableDeclaration","scope":1749,"src":"4900:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1733,"name":"address","nodeType":"ElementaryTypeName","src":"4900:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1736,"mutability":"mutable","name":"operator","nameLocation":"4923:8:3","nodeType":"VariableDeclaration","scope":1749,"src":"4915:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1735,"name":"address","nodeType":"ElementaryTypeName","src":"4915:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4899:33:3"},"returnParameters":{"id":1741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1749,"src":"4971:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1739,"name":"bool","nodeType":"ElementaryTypeName","src":"4971:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4970:6:3"},"scope":2389,"src":"4874:162:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2635],"body":{"id":1775,"nodeType":"Block","src":"5187:207:3","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1762,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"5276:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5276:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1764,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"5290:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1761,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"5257:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5257:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":1766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5300:47:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":1760,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5249:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5249:99:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1768,"nodeType":"ExpressionStatement","src":"5249:99:3"},{"expression":{"arguments":[{"id":1770,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"5369:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1771,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"5375:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1772,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"5379:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1769,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2192,"src":"5359:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5359:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1774,"nodeType":"ExpressionStatement","src":"5359:28:3"}]},"documentation":{"id":1750,"nodeType":"StructuredDocumentation","src":"5042:51:3","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":1776,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5107:12:3","nodeType":"FunctionDefinition","overrides":{"id":1758,"nodeType":"OverrideSpecifier","overrides":[],"src":"5178:8:3"},"parameters":{"id":1757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1752,"mutability":"mutable","name":"from","nameLocation":"5128:4:3","nodeType":"VariableDeclaration","scope":1776,"src":"5120:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1751,"name":"address","nodeType":"ElementaryTypeName","src":"5120:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1754,"mutability":"mutable","name":"to","nameLocation":"5142:2:3","nodeType":"VariableDeclaration","scope":1776,"src":"5134:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1753,"name":"address","nodeType":"ElementaryTypeName","src":"5134:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1756,"mutability":"mutable","name":"tokenId","nameLocation":"5154:7:3","nodeType":"VariableDeclaration","scope":1776,"src":"5146:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1755,"name":"uint256","nodeType":"ElementaryTypeName","src":"5146:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5119:43:3"},"returnParameters":{"id":1759,"nodeType":"ParameterList","parameters":[],"src":"5187:0:3"},"scope":2389,"src":"5098:296:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2625],"body":{"id":1794,"nodeType":"Block","src":"5553:56:3","statements":[{"expression":{"arguments":[{"id":1788,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1779,"src":"5580:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1789,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1781,"src":"5586:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1790,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"5590:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5599:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1787,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[1795,1825],"referencedDeclaration":1825,"src":"5563:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5563:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1793,"nodeType":"ExpressionStatement","src":"5563:39:3"}]},"documentation":{"id":1777,"nodeType":"StructuredDocumentation","src":"5400:55:3","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":1795,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5469:16:3","nodeType":"FunctionDefinition","overrides":{"id":1785,"nodeType":"OverrideSpecifier","overrides":[],"src":"5544:8:3"},"parameters":{"id":1784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1779,"mutability":"mutable","name":"from","nameLocation":"5494:4:3","nodeType":"VariableDeclaration","scope":1795,"src":"5486:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1778,"name":"address","nodeType":"ElementaryTypeName","src":"5486:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1781,"mutability":"mutable","name":"to","nameLocation":"5508:2:3","nodeType":"VariableDeclaration","scope":1795,"src":"5500:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1780,"name":"address","nodeType":"ElementaryTypeName","src":"5500:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1783,"mutability":"mutable","name":"tokenId","nameLocation":"5520:7:3","nodeType":"VariableDeclaration","scope":1795,"src":"5512:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1782,"name":"uint256","nodeType":"ElementaryTypeName","src":"5512:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5485:43:3"},"returnParameters":{"id":1786,"nodeType":"ParameterList","parameters":[],"src":"5553:0:3"},"scope":2389,"src":"5460:149:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2615],"body":{"id":1824,"nodeType":"Block","src":"5787:164:3","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1810,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"5824:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5824:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1812,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"5838:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1809,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"5805:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5805:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":1814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5848:47:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":1808,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5797:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5797:99:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1816,"nodeType":"ExpressionStatement","src":"5797:99:3"},{"expression":{"arguments":[{"id":1818,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"5920:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1819,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"5926:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1820,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"5930:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1821,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"5939:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1817,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"5906:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5906:38:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1823,"nodeType":"ExpressionStatement","src":"5906:38:3"}]},"documentation":{"id":1796,"nodeType":"StructuredDocumentation","src":"5615:55:3","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":1825,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5684:16:3","nodeType":"FunctionDefinition","overrides":{"id":1806,"nodeType":"OverrideSpecifier","overrides":[],"src":"5778:8:3"},"parameters":{"id":1805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1798,"mutability":"mutable","name":"from","nameLocation":"5709:4:3","nodeType":"VariableDeclaration","scope":1825,"src":"5701:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1797,"name":"address","nodeType":"ElementaryTypeName","src":"5701:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1800,"mutability":"mutable","name":"to","nameLocation":"5723:2:3","nodeType":"VariableDeclaration","scope":1825,"src":"5715:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1799,"name":"address","nodeType":"ElementaryTypeName","src":"5715:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1802,"mutability":"mutable","name":"tokenId","nameLocation":"5735:7:3","nodeType":"VariableDeclaration","scope":1825,"src":"5727:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1801,"name":"uint256","nodeType":"ElementaryTypeName","src":"5727:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1804,"mutability":"mutable","name":"data","nameLocation":"5757:4:3","nodeType":"VariableDeclaration","scope":1825,"src":"5744:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1803,"name":"bytes","nodeType":"ElementaryTypeName","src":"5744:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5700:62:3"},"returnParameters":{"id":1807,"nodeType":"ParameterList","parameters":[],"src":"5787:0:3"},"scope":2389,"src":"5675:276:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1853,"nodeType":"Block","src":"6914:165:3","statements":[{"expression":{"arguments":[{"id":1838,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"6934:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1839,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"6940:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1840,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1832,"src":"6944:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1837,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2192,"src":"6924:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6924:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1842,"nodeType":"ExpressionStatement","src":"6924:28:3"},{"expression":{"arguments":[{"arguments":[{"id":1845,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"6993:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1846,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"6999:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1847,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1832,"src":"7003:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1848,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"7012:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1844,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"6970:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6970:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7019:52:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1843,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6962:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6962:110:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1852,"nodeType":"ExpressionStatement","src":"6962:110:3"}]},"documentation":{"id":1826,"nodeType":"StructuredDocumentation","src":"5957:850:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1854,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6821:13:3","nodeType":"FunctionDefinition","parameters":{"id":1835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"from","nameLocation":"6843:4:3","nodeType":"VariableDeclaration","scope":1854,"src":"6835:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1827,"name":"address","nodeType":"ElementaryTypeName","src":"6835:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1830,"mutability":"mutable","name":"to","nameLocation":"6857:2:3","nodeType":"VariableDeclaration","scope":1854,"src":"6849:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1829,"name":"address","nodeType":"ElementaryTypeName","src":"6849:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1832,"mutability":"mutable","name":"tokenId","nameLocation":"6869:7:3","nodeType":"VariableDeclaration","scope":1854,"src":"6861:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1831,"name":"uint256","nodeType":"ElementaryTypeName","src":"6861:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1834,"mutability":"mutable","name":"data","nameLocation":"6891:4:3","nodeType":"VariableDeclaration","scope":1854,"src":"6878:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1833,"name":"bytes","nodeType":"ElementaryTypeName","src":"6878:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6834:62:3"},"returnParameters":{"id":1836,"nodeType":"ParameterList","parameters":[],"src":"6914:0:3"},"scope":2389,"src":"6812:267:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1866,"nodeType":"Block","src":"7263:40:3","statements":[{"expression":{"baseExpression":{"id":1862,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"7280:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1864,"indexExpression":{"id":1863,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1857,"src":"7288:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7280:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1861,"id":1865,"nodeType":"Return","src":"7273:23:3"}]},"documentation":{"id":1855,"nodeType":"StructuredDocumentation","src":"7085:98:3","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":1867,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"7197:8:3","nodeType":"FunctionDefinition","parameters":{"id":1858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1857,"mutability":"mutable","name":"tokenId","nameLocation":"7214:7:3","nodeType":"VariableDeclaration","scope":1867,"src":"7206:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1856,"name":"uint256","nodeType":"ElementaryTypeName","src":"7206:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7205:17:3"},"returnParameters":{"id":1861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1867,"src":"7254:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1859,"name":"address","nodeType":"ElementaryTypeName","src":"7254:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7253:9:3"},"scope":2389,"src":"7188:115:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1884,"nodeType":"Block","src":"7677:55:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1876,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"7703:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1875,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"7694:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7694:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7723:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7715:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1878,"name":"address","nodeType":"ElementaryTypeName","src":"7715:7:3","typeDescriptions":{}}},"id":1881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7715:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7694:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1874,"id":1883,"nodeType":"Return","src":"7687:38:3"}]},"documentation":{"id":1868,"nodeType":"StructuredDocumentation","src":"7309:292:3","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":1885,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7615:7:3","nodeType":"FunctionDefinition","parameters":{"id":1871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1870,"mutability":"mutable","name":"tokenId","nameLocation":"7631:7:3","nodeType":"VariableDeclaration","scope":1885,"src":"7623:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1869,"name":"uint256","nodeType":"ElementaryTypeName","src":"7623:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7622:17:3"},"returnParameters":{"id":1874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1885,"src":"7671:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1872,"name":"bool","nodeType":"ElementaryTypeName","src":"7671:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7670:6:3"},"scope":2389,"src":"7606:126:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1918,"nodeType":"Block","src":"7989:173:3","statements":[{"assignments":[1896],"declarations":[{"constant":false,"id":1896,"mutability":"mutable","name":"owner","nameLocation":"8007:5:3","nodeType":"VariableDeclaration","scope":1918,"src":"7999:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1895,"name":"address","nodeType":"ElementaryTypeName","src":"7999:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1901,"initialValue":{"arguments":[{"id":1899,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"8041:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1897,"name":"ERC721Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"8015:17:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Upgradeable_$2389_$","typeString":"type(contract ERC721Upgradeable)"}},"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1585,"src":"8015:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8015:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7999:50:3"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1902,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"8067:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1903,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"8078:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8067:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1906,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"8104:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1907,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"8111:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1905,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"8087:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8087:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8067:52:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1911,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"8135:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1910,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"8123:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8123:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1913,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"8147:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8123:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8067:87:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1916,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8066:89:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1894,"id":1917,"nodeType":"Return","src":"8059:96:3"}]},"documentation":{"id":1886,"nodeType":"StructuredDocumentation","src":"7738:147:3","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":1919,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7899:18:3","nodeType":"FunctionDefinition","parameters":{"id":1891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1888,"mutability":"mutable","name":"spender","nameLocation":"7926:7:3","nodeType":"VariableDeclaration","scope":1919,"src":"7918:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1887,"name":"address","nodeType":"ElementaryTypeName","src":"7918:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1890,"mutability":"mutable","name":"tokenId","nameLocation":"7943:7:3","nodeType":"VariableDeclaration","scope":1919,"src":"7935:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1889,"name":"uint256","nodeType":"ElementaryTypeName","src":"7935:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7917:34:3"},"returnParameters":{"id":1894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1919,"src":"7983:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1892,"name":"bool","nodeType":"ElementaryTypeName","src":"7983:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7982:6:3"},"scope":2389,"src":"7890:272:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1933,"nodeType":"Block","src":"8557:43:3","statements":[{"expression":{"arguments":[{"id":1928,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"8577:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1929,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"8581:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8590:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1927,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1934,1963],"referencedDeclaration":1963,"src":"8567:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8567:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1932,"nodeType":"ExpressionStatement","src":"8567:26:3"}]},"documentation":{"id":1920,"nodeType":"StructuredDocumentation","src":"8168:319:3","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1934,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8501:9:3","nodeType":"FunctionDefinition","parameters":{"id":1925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1922,"mutability":"mutable","name":"to","nameLocation":"8519:2:3","nodeType":"VariableDeclaration","scope":1934,"src":"8511:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1921,"name":"address","nodeType":"ElementaryTypeName","src":"8511:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1924,"mutability":"mutable","name":"tokenId","nameLocation":"8531:7:3","nodeType":"VariableDeclaration","scope":1934,"src":"8523:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1923,"name":"uint256","nodeType":"ElementaryTypeName","src":"8523:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8510:29:3"},"returnParameters":{"id":1926,"nodeType":"ParameterList","parameters":[],"src":"8557:0:3"},"scope":2389,"src":"8492:108:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1962,"nodeType":"Block","src":"8905:161:3","statements":[{"expression":{"arguments":[{"id":1945,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1937,"src":"8921:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1946,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"8925:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1944,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"8915:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8915:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1948,"nodeType":"ExpressionStatement","src":"8915:18:3"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":1953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8982:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8974:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1951,"name":"address","nodeType":"ElementaryTypeName","src":"8974:7:3","typeDescriptions":{}}},"id":1954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8974:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1955,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1937,"src":"8986:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1956,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"8990:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1957,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"8999:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1950,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"8951:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8951:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9006:52:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1949,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8943:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8943:116:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1961,"nodeType":"ExpressionStatement","src":"8943:116:3"}]},"documentation":{"id":1935,"nodeType":"StructuredDocumentation","src":"8606:210:3","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":1963,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8830:9:3","nodeType":"FunctionDefinition","parameters":{"id":1942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1937,"mutability":"mutable","name":"to","nameLocation":"8848:2:3","nodeType":"VariableDeclaration","scope":1963,"src":"8840:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1936,"name":"address","nodeType":"ElementaryTypeName","src":"8840:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1939,"mutability":"mutable","name":"tokenId","nameLocation":"8860:7:3","nodeType":"VariableDeclaration","scope":1963,"src":"8852:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1938,"name":"uint256","nodeType":"ElementaryTypeName","src":"8852:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1941,"mutability":"mutable","name":"data","nameLocation":"8882:4:3","nodeType":"VariableDeclaration","scope":1963,"src":"8869:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1940,"name":"bytes","nodeType":"ElementaryTypeName","src":"8869:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8839:48:3"},"returnParameters":{"id":1943,"nodeType":"ParameterList","parameters":[],"src":"8905:0:3"},"scope":2389,"src":"8821:245:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2039,"nodeType":"Block","src":"9449:859:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1972,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"9467:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9481:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9473:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1973,"name":"address","nodeType":"ElementaryTypeName","src":"9473:7:3","typeDescriptions":{}}},"id":1976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9473:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9467:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":1978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9485:34:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":1971,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9459:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9459:61:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1980,"nodeType":"ExpressionStatement","src":"9459:61:3"},{"expression":{"arguments":[{"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9538:17:3","subExpression":{"arguments":[{"id":1983,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"9547:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1982,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"9539:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9539:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":1986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9557:30:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":1981,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9530:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9530:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1988,"nodeType":"ExpressionStatement","src":"9530:58:3"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9628:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1991,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9620:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1990,"name":"address","nodeType":"ElementaryTypeName","src":"9620:7:3","typeDescriptions":{}}},"id":1993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9620:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1994,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"9632:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1995,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"9636:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9645:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1989,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"9599:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9599:48:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1998,"nodeType":"ExpressionStatement","src":"9599:48:3"},{"expression":{"arguments":[{"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9742:17:3","subExpression":{"arguments":[{"id":2001,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"9751:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2000,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"9743:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9743:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":2004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9761:30:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":1999,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9734:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9734:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2006,"nodeType":"ExpressionStatement","src":"9734:58:3"},{"id":2013,"nodeType":"UncheckedBlock","src":"9803:360:3","statements":[{"expression":{"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2007,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"10134:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2009,"indexExpression":{"id":2008,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"10144:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10134:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10151:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10134:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2012,"nodeType":"ExpressionStatement","src":"10134:18:3"}]},{"expression":{"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2014,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"10173:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2016,"indexExpression":{"id":2015,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"10181:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10173:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2017,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"10192:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10173:21:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2019,"nodeType":"ExpressionStatement","src":"10173:21:3"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10227:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10219:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2021,"name":"address","nodeType":"ElementaryTypeName","src":"10219:7:3","typeDescriptions":{}}},"id":2024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10219:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2025,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"10231:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2026,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"10235:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2020,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"10210:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10210:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2028,"nodeType":"EmitStatement","src":"10205:38:3"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2031,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10274:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2030,"name":"address","nodeType":"ElementaryTypeName","src":"10274:7:3","typeDescriptions":{}}},"id":2033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10274:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2034,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"10286:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2035,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"10290:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10299:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2029,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2383,"src":"10254:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10254:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2038,"nodeType":"ExpressionStatement","src":"10254:47:3"}]},"documentation":{"id":1964,"nodeType":"StructuredDocumentation","src":"9072:311:3","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":2040,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9397:5:3","nodeType":"FunctionDefinition","parameters":{"id":1969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1966,"mutability":"mutable","name":"to","nameLocation":"9411:2:3","nodeType":"VariableDeclaration","scope":2040,"src":"9403:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1965,"name":"address","nodeType":"ElementaryTypeName","src":"9403:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1968,"mutability":"mutable","name":"tokenId","nameLocation":"9423:7:3","nodeType":"VariableDeclaration","scope":2040,"src":"9415:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1967,"name":"uint256","nodeType":"ElementaryTypeName","src":"9415:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9402:29:3"},"returnParameters":{"id":1970,"nodeType":"ParameterList","parameters":[],"src":"9449:0:3"},"scope":2389,"src":"9388:920:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2106,"nodeType":"Block","src":"10683:735:3","statements":[{"assignments":[2047],"declarations":[{"constant":false,"id":2047,"mutability":"mutable","name":"owner","nameLocation":"10701:5:3","nodeType":"VariableDeclaration","scope":2106,"src":"10693:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2046,"name":"address","nodeType":"ElementaryTypeName","src":"10693:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2052,"initialValue":{"arguments":[{"id":2050,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"10735:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2048,"name":"ERC721Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"10709:17:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Upgradeable_$2389_$","typeString":"type(contract ERC721Upgradeable)"}},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1585,"src":"10709:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10709:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10693:50:3"},{"expression":{"arguments":[{"id":2054,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"10775:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10790:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2056,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10782:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2055,"name":"address","nodeType":"ElementaryTypeName","src":"10782:7:3","typeDescriptions":{}}},"id":2058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10782:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2059,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"10794:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10803:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2053,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"10754:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10754:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2062,"nodeType":"ExpressionStatement","src":"10754:51:3"},{"expression":{"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2063,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"10907:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2066,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"10941:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2064,"name":"ERC721Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"10915:17:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Upgradeable_$2389_$","typeString":"type(contract ERC721Upgradeable)"}},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1585,"src":"10915:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10915:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10907:42:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2069,"nodeType":"ExpressionStatement","src":"10907:42:3"},{"expression":{"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10987:31:3","subExpression":{"baseExpression":{"id":2070,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"10994:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2072,"indexExpression":{"id":2071,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"11010:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10994:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2074,"nodeType":"ExpressionStatement","src":"10987:31:3"},{"id":2081,"nodeType":"UncheckedBlock","src":"11029:237:3","statements":[{"expression":{"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2075,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"11234:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2077,"indexExpression":{"id":2076,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"11244:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11234:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11254:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11234:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2080,"nodeType":"ExpressionStatement","src":"11234:21:3"}]},{"expression":{"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11275:23:3","subExpression":{"baseExpression":{"id":2082,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"11282:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2084,"indexExpression":{"id":2083,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"11290:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11282:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2086,"nodeType":"ExpressionStatement","src":"11275:23:3"},{"eventCall":{"arguments":[{"id":2088,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"11323:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11330:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2089,"name":"address","nodeType":"ElementaryTypeName","src":"11330:7:3","typeDescriptions":{}}},"id":2092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11330:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2093,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"11342:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2087,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"11314:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11314:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2095,"nodeType":"EmitStatement","src":"11309:41:3"},{"expression":{"arguments":[{"id":2097,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"11381:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11396:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2099,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11388:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2098,"name":"address","nodeType":"ElementaryTypeName","src":"11388:7:3","typeDescriptions":{}}},"id":2101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11388:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2102,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"11400:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11409:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2096,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2383,"src":"11361:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11361:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2105,"nodeType":"ExpressionStatement","src":"11361:50:3"}]},"documentation":{"id":2041,"nodeType":"StructuredDocumentation","src":"10314:315:3","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":2107,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10643:5:3","nodeType":"FunctionDefinition","parameters":{"id":2044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2043,"mutability":"mutable","name":"tokenId","nameLocation":"10657:7:3","nodeType":"VariableDeclaration","scope":2107,"src":"10649:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2042,"name":"uint256","nodeType":"ElementaryTypeName","src":"10649:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10648:17:3"},"returnParameters":{"id":2045,"nodeType":"ParameterList","parameters":[],"src":"10683:0:3"},"scope":2389,"src":"10634:784:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2191,"nodeType":"Block","src":"11821:1146:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2120,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"11865:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2118,"name":"ERC721Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"11839:17:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Upgradeable_$2389_$","typeString":"type(contract ERC721Upgradeable)"}},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1585,"src":"11839:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11839:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2122,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"11877:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11839:42:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":2124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11883:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":2117,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11831:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11831:92:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2126,"nodeType":"ExpressionStatement","src":"11831:92:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2128,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"11941:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11955:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2130,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11947:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2129,"name":"address","nodeType":"ElementaryTypeName","src":"11947:7:3","typeDescriptions":{}}},"id":2132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11947:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11941:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":2134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11959:38:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":2127,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11933:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11933:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2136,"nodeType":"ExpressionStatement","src":"11933:65:3"},{"expression":{"arguments":[{"id":2138,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"12030:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2139,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"12036:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2140,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"12040:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12049:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2137,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"12009:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12009:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2143,"nodeType":"ExpressionStatement","src":"12009:42:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2147,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"12177:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2145,"name":"ERC721Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"12151:17:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Upgradeable_$2389_$","typeString":"type(contract ERC721Upgradeable)"}},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1585,"src":"12151:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12151:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2149,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"12189:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12151:42:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":2151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12195:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":2144,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12143:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12143:92:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2153,"nodeType":"ExpressionStatement","src":"12143:92:3"},{"expression":{"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"12297:31:3","subExpression":{"baseExpression":{"id":2154,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"12304:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2156,"indexExpression":{"id":2155,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"12320:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12304:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2158,"nodeType":"ExpressionStatement","src":"12297:31:3"},{"id":2171,"nodeType":"UncheckedBlock","src":"12339:496:3","statements":[{"expression":{"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2159,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"12772:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2161,"indexExpression":{"id":2160,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"12782:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12772:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12791:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12772:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2164,"nodeType":"ExpressionStatement","src":"12772:20:3"},{"expression":{"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2165,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"12806:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2167,"indexExpression":{"id":2166,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"12816:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12806:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12823:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12806:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2170,"nodeType":"ExpressionStatement","src":"12806:18:3"}]},{"expression":{"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2172,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"12844:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2174,"indexExpression":{"id":2173,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"12852:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12844:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2175,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"12863:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12844:21:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2177,"nodeType":"ExpressionStatement","src":"12844:21:3"},{"eventCall":{"arguments":[{"id":2179,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"12890:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2180,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"12896:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2181,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"12900:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2178,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"12881:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12881:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2183,"nodeType":"EmitStatement","src":"12876:32:3"},{"expression":{"arguments":[{"id":2185,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"12939:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2186,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"12945:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2187,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"12949:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12958:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2184,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2383,"src":"12919:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12919:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2190,"nodeType":"ExpressionStatement","src":"12919:41:3"}]},"documentation":{"id":2108,"nodeType":"StructuredDocumentation","src":"11424:313:3","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":2192,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11751:9:3","nodeType":"FunctionDefinition","parameters":{"id":2115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2110,"mutability":"mutable","name":"from","nameLocation":"11769:4:3","nodeType":"VariableDeclaration","scope":2192,"src":"11761:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2109,"name":"address","nodeType":"ElementaryTypeName","src":"11761:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2112,"mutability":"mutable","name":"to","nameLocation":"11783:2:3","nodeType":"VariableDeclaration","scope":2192,"src":"11775:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2111,"name":"address","nodeType":"ElementaryTypeName","src":"11775:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2114,"mutability":"mutable","name":"tokenId","nameLocation":"11795:7:3","nodeType":"VariableDeclaration","scope":2192,"src":"11787:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2113,"name":"uint256","nodeType":"ElementaryTypeName","src":"11787:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11760:43:3"},"returnParameters":{"id":2116,"nodeType":"ParameterList","parameters":[],"src":"11821:0:3"},"scope":2389,"src":"11742:1225:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2215,"nodeType":"Block","src":"13143:118:3","statements":[{"expression":{"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2200,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"13153:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2202,"indexExpression":{"id":2201,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"13169:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13153:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2203,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"13180:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13153:29:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2205,"nodeType":"ExpressionStatement","src":"13153:29:3"},{"eventCall":{"arguments":[{"arguments":[{"id":2209,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"13232:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2207,"name":"ERC721Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"13206:17:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Upgradeable_$2389_$","typeString":"type(contract ERC721Upgradeable)"}},"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1585,"src":"13206:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13206:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2211,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"13242:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2212,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"13246:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2206,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"13197:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13197:57:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2214,"nodeType":"EmitStatement","src":"13192:62:3"}]},"documentation":{"id":2193,"nodeType":"StructuredDocumentation","src":"12973:101:3","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":2216,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"13088:8:3","nodeType":"FunctionDefinition","parameters":{"id":2198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2195,"mutability":"mutable","name":"to","nameLocation":"13105:2:3","nodeType":"VariableDeclaration","scope":2216,"src":"13097:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2194,"name":"address","nodeType":"ElementaryTypeName","src":"13097:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2197,"mutability":"mutable","name":"tokenId","nameLocation":"13117:7:3","nodeType":"VariableDeclaration","scope":2216,"src":"13109:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2196,"name":"uint256","nodeType":"ElementaryTypeName","src":"13109:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13096:29:3"},"returnParameters":{"id":2199,"nodeType":"ParameterList","parameters":[],"src":"13143:0:3"},"scope":2389,"src":"13079:182:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2247,"nodeType":"Block","src":"13490:184:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2227,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"13508:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2228,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2221,"src":"13517:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13508:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13527:27:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":2226,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13500:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13500:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2232,"nodeType":"ExpressionStatement","src":"13500:55:3"},{"expression":{"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2233,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"13565:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2236,"indexExpression":{"id":2234,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"13584:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13565:25:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2237,"indexExpression":{"id":2235,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2221,"src":"13591:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13565:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2238,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"13603:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13565:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2240,"nodeType":"ExpressionStatement","src":"13565:46:3"},{"eventCall":{"arguments":[{"id":2242,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"13641:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2243,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2221,"src":"13648:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2244,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"13658:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2241,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"13626:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13626:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2246,"nodeType":"EmitStatement","src":"13621:46:3"}]},"documentation":{"id":2217,"nodeType":"StructuredDocumentation","src":"13267:125:3","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":2248,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13406:18:3","nodeType":"FunctionDefinition","parameters":{"id":2224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2219,"mutability":"mutable","name":"owner","nameLocation":"13433:5:3","nodeType":"VariableDeclaration","scope":2248,"src":"13425:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2218,"name":"address","nodeType":"ElementaryTypeName","src":"13425:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2221,"mutability":"mutable","name":"operator","nameLocation":"13448:8:3","nodeType":"VariableDeclaration","scope":2248,"src":"13440:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2220,"name":"address","nodeType":"ElementaryTypeName","src":"13440:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2223,"mutability":"mutable","name":"approved","nameLocation":"13463:8:3","nodeType":"VariableDeclaration","scope":2248,"src":"13458:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2222,"name":"bool","nodeType":"ElementaryTypeName","src":"13458:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13424:48:3"},"returnParameters":{"id":2225,"nodeType":"ParameterList","parameters":[],"src":"13490:0:3"},"scope":2389,"src":"13397:277:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2261,"nodeType":"Block","src":"13821:70:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":2256,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2251,"src":"13847:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2255,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"13839:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13839:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":2258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13857:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":2254,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13831:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13831:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2260,"nodeType":"ExpressionStatement","src":"13831:53:3"}]},"documentation":{"id":2249,"nodeType":"StructuredDocumentation","src":"13680:73:3","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":2262,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13767:14:3","nodeType":"FunctionDefinition","parameters":{"id":2252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2251,"mutability":"mutable","name":"tokenId","nameLocation":"13790:7:3","nodeType":"VariableDeclaration","scope":2262,"src":"13782:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2250,"name":"uint256","nodeType":"ElementaryTypeName","src":"13782:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13781:17:3"},"returnParameters":{"id":2253,"nodeType":"ParameterList","parameters":[],"src":"13821:0:3"},"scope":2389,"src":"13758:133:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2323,"nodeType":"Block","src":"14560:698:3","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2276,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"14574:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2997,"src":"14574:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14574:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2321,"nodeType":"Block","src":"15216:36:3","statements":[{"expression":{"hexValue":"74727565","id":2319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15237:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2275,"id":2320,"nodeType":"Return","src":"15230:11:3"}]},"id":2322,"nodeType":"IfStatement","src":"14570:682:3","trueBody":{"id":2318,"nodeType":"Block","src":"14591:619:3","statements":[{"clauses":[{"block":{"id":2298,"nodeType":"Block","src":"14716:102:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2292,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2290,"src":"14741:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":2293,"name":"IERC721ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"14751:26:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721ReceiverUpgradeable_$2554_$","typeString":"type(contract IERC721ReceiverUpgradeable)"}},"id":2294,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2553,"src":"14751:43:3","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721ReceiverUpgradeable.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":2295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"14751:52:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14741:62:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2275,"id":2297,"nodeType":"Return","src":"14734:69:3"}]},"errorName":"","id":2299,"nodeType":"TryCatchClause","parameters":{"id":2291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2290,"mutability":"mutable","name":"retval","nameLocation":"14708:6:3","nodeType":"VariableDeclaration","scope":2299,"src":"14701:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2289,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14701:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14700:15:3"},"src":"14692:126:3"},{"block":{"id":2315,"nodeType":"Block","src":"14847:353:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2303,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"14869:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"14869:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14886:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14869:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2313,"nodeType":"Block","src":"14996:190:3","statements":[{"AST":{"nodeType":"YulBlock","src":"15082:86:3","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15119:2:3","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"15123:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15115:3:3"},"nodeType":"YulFunctionCall","src":"15115:15:3"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"15138:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15132:5:3"},"nodeType":"YulFunctionCall","src":"15132:13:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15108:6:3"},"nodeType":"YulFunctionCall","src":"15108:38:3"},"nodeType":"YulExpressionStatement","src":"15108:38:3"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2301,"isOffset":false,"isSlot":false,"src":"15123:6:3","valueSize":1},{"declaration":2301,"isOffset":false,"isSlot":false,"src":"15138:6:3","valueSize":1}],"id":2312,"nodeType":"InlineAssembly","src":"15073:95:3"}]},"id":2314,"nodeType":"IfStatement","src":"14865:321:3","trueBody":{"id":2311,"nodeType":"Block","src":"14889:101:3","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":2308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14918:52:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":2307,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14911:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14911:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2310,"nodeType":"ExpressionStatement","src":"14911:60:3"}]}}]},"errorName":"","id":2316,"nodeType":"TryCatchClause","parameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2301,"mutability":"mutable","name":"reason","nameLocation":"14839:6:3","nodeType":"VariableDeclaration","scope":2316,"src":"14826:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2300,"name":"bytes","nodeType":"ElementaryTypeName","src":"14826:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14825:21:3"},"src":"14819:381:3"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2283,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"14657:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14657:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2285,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2265,"src":"14671:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2286,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"14677:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2287,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"14686:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":2280,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"14636:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2279,"name":"IERC721ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"14609:26:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721ReceiverUpgradeable_$2554_$","typeString":"type(contract IERC721ReceiverUpgradeable)"}},"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14609:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721ReceiverUpgradeable_$2554","typeString":"contract IERC721ReceiverUpgradeable"}},"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2553,"src":"14609:47:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14609:82:3","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":2317,"nodeType":"TryStatement","src":"14605:595:3"}]}}]},"documentation":{"id":2263,"nodeType":"StructuredDocumentation","src":"13897:541:3","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":2324,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"14452:22:3","nodeType":"FunctionDefinition","parameters":{"id":2272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2265,"mutability":"mutable","name":"from","nameLocation":"14483:4:3","nodeType":"VariableDeclaration","scope":2324,"src":"14475:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2264,"name":"address","nodeType":"ElementaryTypeName","src":"14475:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2267,"mutability":"mutable","name":"to","nameLocation":"14497:2:3","nodeType":"VariableDeclaration","scope":2324,"src":"14489:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2266,"name":"address","nodeType":"ElementaryTypeName","src":"14489:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2269,"mutability":"mutable","name":"tokenId","nameLocation":"14509:7:3","nodeType":"VariableDeclaration","scope":2324,"src":"14501:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2268,"name":"uint256","nodeType":"ElementaryTypeName","src":"14501:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2271,"mutability":"mutable","name":"data","nameLocation":"14531:4:3","nodeType":"VariableDeclaration","scope":2324,"src":"14518:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2270,"name":"bytes","nodeType":"ElementaryTypeName","src":"14518:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14474:62:3"},"returnParameters":{"id":2275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2324,"src":"14554:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2273,"name":"bool","nodeType":"ElementaryTypeName","src":"14554:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14553:6:3"},"scope":2389,"src":"14443:815:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2369,"nodeType":"Block","src":"16094:238:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2336,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"16108:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16120:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"16108:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2368,"nodeType":"IfStatement","src":"16104:222:3","trueBody":{"id":2367,"nodeType":"Block","src":"16123:203:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2339,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"16141:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16157:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2341,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16149:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2340,"name":"address","nodeType":"ElementaryTypeName","src":"16149:7:3","typeDescriptions":{}}},"id":2343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16149:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16141:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2352,"nodeType":"IfStatement","src":"16137:85:3","trueBody":{"id":2351,"nodeType":"Block","src":"16161:61:3","statements":[{"expression":{"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2345,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"16179:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2347,"indexExpression":{"id":2346,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"16189:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16179:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2348,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"16198:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16179:28:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2350,"nodeType":"ExpressionStatement","src":"16179:28:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2353,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"16239:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16253:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16245:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2354,"name":"address","nodeType":"ElementaryTypeName","src":"16245:7:3","typeDescriptions":{}}},"id":2357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16245:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16239:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2366,"nodeType":"IfStatement","src":"16235:81:3","trueBody":{"id":2365,"nodeType":"Block","src":"16257:59:3","statements":[{"expression":{"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2359,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"16275:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2361,"indexExpression":{"id":2360,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"16285:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16275:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2362,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"16292:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16275:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2364,"nodeType":"ExpressionStatement","src":"16275:26:3"}]}}]}}]},"documentation":{"id":2325,"nodeType":"StructuredDocumentation","src":"15264:705:3","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":2370,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15983:20:3","nodeType":"FunctionDefinition","parameters":{"id":2334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2327,"mutability":"mutable","name":"from","nameLocation":"16012:4:3","nodeType":"VariableDeclaration","scope":2370,"src":"16004:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2326,"name":"address","nodeType":"ElementaryTypeName","src":"16004:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2329,"mutability":"mutable","name":"to","nameLocation":"16026:2:3","nodeType":"VariableDeclaration","scope":2370,"src":"16018:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2328,"name":"address","nodeType":"ElementaryTypeName","src":"16018:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2370,"src":"16030:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2330,"name":"uint256","nodeType":"ElementaryTypeName","src":"16030:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2333,"mutability":"mutable","name":"batchSize","nameLocation":"16066:9:3","nodeType":"VariableDeclaration","scope":2370,"src":"16058:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2332,"name":"uint256","nodeType":"ElementaryTypeName","src":"16058:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16003:73:3"},"returnParameters":{"id":2335,"nodeType":"ParameterList","parameters":[],"src":"16094:0:3"},"scope":2389,"src":"15974:358:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2382,"nodeType":"Block","src":"17151:2:3","statements":[]},"documentation":{"id":2371,"nodeType":"StructuredDocumentation","src":"16338:695:3","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":2383,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"17047:19:3","nodeType":"FunctionDefinition","parameters":{"id":2380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2373,"mutability":"mutable","name":"from","nameLocation":"17075:4:3","nodeType":"VariableDeclaration","scope":2383,"src":"17067:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2372,"name":"address","nodeType":"ElementaryTypeName","src":"17067:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2375,"mutability":"mutable","name":"to","nameLocation":"17089:2:3","nodeType":"VariableDeclaration","scope":2383,"src":"17081:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2374,"name":"address","nodeType":"ElementaryTypeName","src":"17081:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2377,"mutability":"mutable","name":"firstTokenId","nameLocation":"17101:12:3","nodeType":"VariableDeclaration","scope":2383,"src":"17093:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2376,"name":"uint256","nodeType":"ElementaryTypeName","src":"17093:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2379,"mutability":"mutable","name":"batchSize","nameLocation":"17123:9:3","nodeType":"VariableDeclaration","scope":2383,"src":"17115:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2378,"name":"uint256","nodeType":"ElementaryTypeName","src":"17115:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17066:67:3"},"returnParameters":{"id":2381,"nodeType":"ParameterList","parameters":[],"src":"17151:0:3"},"scope":2389,"src":"17038:115:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2384,"nodeType":"StructuredDocumentation","src":"17159:254:3","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2388,"mutability":"mutable","name":"__gap","nameLocation":"17438:5:3","nodeType":"VariableDeclaration","scope":2389,"src":"17418:25:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$44_storage","typeString":"uint256[44]"},"typeName":{"baseType":{"id":2385,"name":"uint256","nodeType":"ElementaryTypeName","src":"17418:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2387,"length":{"hexValue":"3434","id":2386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17426:2:3","typeDescriptions":{"typeIdentifier":"t_rational_44_by_1","typeString":"int_const 44"},"value":"44"},"nodeType":"ArrayTypeName","src":"17418:11:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$44_storage_ptr","typeString":"uint256[44]"}},"visibility":"private"}],"scope":2390,"src":"731:16715:3","usedErrors":[]}],"src":"107:17340:3"},"id":3},"contracts/IERC721.sol":{"ast":{"absolutePath":"contracts/IERC721.sol","exportedSymbols":{"IERC165":[3612],"IERC721":[2505]},"id":2506,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2391,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:4"},{"absolutePath":"contracts/utils/introspection/IERC165.sol","file":"./utils/introspection/IERC165.sol","id":2392,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2506,"sourceUnit":3613,"src":"133:43:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2394,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":3612,"src":"267:7:4"},"id":2395,"nodeType":"InheritanceSpecifier","src":"267:7:4"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2393,"nodeType":"StructuredDocumentation","src":"178:67:4","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":2505,"linearizedBaseContracts":[2505,3612],"name":"IERC721","nameLocation":"256:7:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2396,"nodeType":"StructuredDocumentation","src":"281:88:4","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"id":2404,"name":"Transfer","nameLocation":"380:8:4","nodeType":"EventDefinition","parameters":{"id":2403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2398,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"414:4:4","nodeType":"VariableDeclaration","scope":2404,"src":"398:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2397,"name":"address","nodeType":"ElementaryTypeName","src":"398:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2400,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"444:2:4","nodeType":"VariableDeclaration","scope":2404,"src":"428:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2399,"name":"address","nodeType":"ElementaryTypeName","src":"428:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2402,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"472:7:4","nodeType":"VariableDeclaration","scope":2404,"src":"456:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2401,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"388:97:4"},"src":"374:112:4"},{"anonymous":false,"documentation":{"id":2405,"nodeType":"StructuredDocumentation","src":"492:94:4","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"id":2413,"name":"Approval","nameLocation":"597:8:4","nodeType":"EventDefinition","parameters":{"id":2412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2407,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"631:5:4","nodeType":"VariableDeclaration","scope":2413,"src":"615:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2406,"name":"address","nodeType":"ElementaryTypeName","src":"615:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2409,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"662:8:4","nodeType":"VariableDeclaration","scope":2413,"src":"646:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2408,"name":"address","nodeType":"ElementaryTypeName","src":"646:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2411,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"696:7:4","nodeType":"VariableDeclaration","scope":2413,"src":"680:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2410,"name":"uint256","nodeType":"ElementaryTypeName","src":"680:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"605:104:4"},"src":"591:119:4"},{"anonymous":false,"documentation":{"id":2414,"nodeType":"StructuredDocumentation","src":"716:117:4","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"id":2422,"name":"ApprovalForAll","nameLocation":"844:14:4","nodeType":"EventDefinition","parameters":{"id":2421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2416,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"884:5:4","nodeType":"VariableDeclaration","scope":2422,"src":"868:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2415,"name":"address","nodeType":"ElementaryTypeName","src":"868:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2418,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"915:8:4","nodeType":"VariableDeclaration","scope":2422,"src":"899:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2417,"name":"address","nodeType":"ElementaryTypeName","src":"899:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2420,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"938:8:4","nodeType":"VariableDeclaration","scope":2422,"src":"933:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2419,"name":"bool","nodeType":"ElementaryTypeName","src":"933:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"858:94:4"},"src":"838:115:4"},{"documentation":{"id":2423,"nodeType":"StructuredDocumentation","src":"959:76:4","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":2430,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1049:9:4","nodeType":"FunctionDefinition","parameters":{"id":2426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2425,"mutability":"mutable","name":"owner","nameLocation":"1067:5:4","nodeType":"VariableDeclaration","scope":2430,"src":"1059:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2424,"name":"address","nodeType":"ElementaryTypeName","src":"1059:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1058:15:4"},"returnParameters":{"id":2429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2428,"mutability":"mutable","name":"balance","nameLocation":"1105:7:4","nodeType":"VariableDeclaration","scope":2430,"src":"1097:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2427,"name":"uint256","nodeType":"ElementaryTypeName","src":"1097:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1096:17:4"},"scope":2505,"src":"1040:74:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2431,"nodeType":"StructuredDocumentation","src":"1120:131:4","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":2438,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1265:7:4","nodeType":"FunctionDefinition","parameters":{"id":2434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2433,"mutability":"mutable","name":"tokenId","nameLocation":"1281:7:4","nodeType":"VariableDeclaration","scope":2438,"src":"1273:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2432,"name":"uint256","nodeType":"ElementaryTypeName","src":"1273:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1272:17:4"},"returnParameters":{"id":2437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2436,"mutability":"mutable","name":"owner","nameLocation":"1321:5:4","nodeType":"VariableDeclaration","scope":2438,"src":"1313:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2435,"name":"address","nodeType":"ElementaryTypeName","src":"1313:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1312:15:4"},"scope":2505,"src":"1256:72:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2439,"nodeType":"StructuredDocumentation","src":"1334:556:4","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":2450,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1904:16:4","nodeType":"FunctionDefinition","parameters":{"id":2448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2441,"mutability":"mutable","name":"from","nameLocation":"1938:4:4","nodeType":"VariableDeclaration","scope":2450,"src":"1930:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2440,"name":"address","nodeType":"ElementaryTypeName","src":"1930:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2443,"mutability":"mutable","name":"to","nameLocation":"1960:2:4","nodeType":"VariableDeclaration","scope":2450,"src":"1952:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2442,"name":"address","nodeType":"ElementaryTypeName","src":"1952:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2445,"mutability":"mutable","name":"tokenId","nameLocation":"1980:7:4","nodeType":"VariableDeclaration","scope":2450,"src":"1972:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2444,"name":"uint256","nodeType":"ElementaryTypeName","src":"1972:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2447,"mutability":"mutable","name":"data","nameLocation":"2012:4:4","nodeType":"VariableDeclaration","scope":2450,"src":"1997:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2446,"name":"bytes","nodeType":"ElementaryTypeName","src":"1997:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1920:102:4"},"returnParameters":{"id":2449,"nodeType":"ParameterList","parameters":[],"src":"2031:0:4"},"scope":2505,"src":"1895:137:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2451,"nodeType":"StructuredDocumentation","src":"2038:687:4","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":2460,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2739:16:4","nodeType":"FunctionDefinition","parameters":{"id":2458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2453,"mutability":"mutable","name":"from","nameLocation":"2773:4:4","nodeType":"VariableDeclaration","scope":2460,"src":"2765:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2452,"name":"address","nodeType":"ElementaryTypeName","src":"2765:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2455,"mutability":"mutable","name":"to","nameLocation":"2795:2:4","nodeType":"VariableDeclaration","scope":2460,"src":"2787:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2454,"name":"address","nodeType":"ElementaryTypeName","src":"2787:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2457,"mutability":"mutable","name":"tokenId","nameLocation":"2815:7:4","nodeType":"VariableDeclaration","scope":2460,"src":"2807:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2456,"name":"uint256","nodeType":"ElementaryTypeName","src":"2807:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2755:73:4"},"returnParameters":{"id":2459,"nodeType":"ParameterList","parameters":[],"src":"2837:0:4"},"scope":2505,"src":"2730:108:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2461,"nodeType":"StructuredDocumentation","src":"2844:732:4","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2470,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3590:12:4","nodeType":"FunctionDefinition","parameters":{"id":2468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2463,"mutability":"mutable","name":"from","nameLocation":"3611:4:4","nodeType":"VariableDeclaration","scope":2470,"src":"3603:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2462,"name":"address","nodeType":"ElementaryTypeName","src":"3603:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2465,"mutability":"mutable","name":"to","nameLocation":"3625:2:4","nodeType":"VariableDeclaration","scope":2470,"src":"3617:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2464,"name":"address","nodeType":"ElementaryTypeName","src":"3617:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2467,"mutability":"mutable","name":"tokenId","nameLocation":"3637:7:4","nodeType":"VariableDeclaration","scope":2470,"src":"3629:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2466,"name":"uint256","nodeType":"ElementaryTypeName","src":"3629:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3602:43:4"},"returnParameters":{"id":2469,"nodeType":"ParameterList","parameters":[],"src":"3654:0:4"},"scope":2505,"src":"3581:74:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2471,"nodeType":"StructuredDocumentation","src":"3661:452:4","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2478,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4127:7:4","nodeType":"FunctionDefinition","parameters":{"id":2476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2473,"mutability":"mutable","name":"to","nameLocation":"4143:2:4","nodeType":"VariableDeclaration","scope":2478,"src":"4135:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2472,"name":"address","nodeType":"ElementaryTypeName","src":"4135:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2475,"mutability":"mutable","name":"tokenId","nameLocation":"4155:7:4","nodeType":"VariableDeclaration","scope":2478,"src":"4147:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2474,"name":"uint256","nodeType":"ElementaryTypeName","src":"4147:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4134:29:4"},"returnParameters":{"id":2477,"nodeType":"ParameterList","parameters":[],"src":"4172:0:4"},"scope":2505,"src":"4118:55:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2479,"nodeType":"StructuredDocumentation","src":"4179:309:4","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":2486,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4502:17:4","nodeType":"FunctionDefinition","parameters":{"id":2484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2481,"mutability":"mutable","name":"operator","nameLocation":"4528:8:4","nodeType":"VariableDeclaration","scope":2486,"src":"4520:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2480,"name":"address","nodeType":"ElementaryTypeName","src":"4520:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2483,"mutability":"mutable","name":"approved","nameLocation":"4543:8:4","nodeType":"VariableDeclaration","scope":2486,"src":"4538:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2482,"name":"bool","nodeType":"ElementaryTypeName","src":"4538:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4519:33:4"},"returnParameters":{"id":2485,"nodeType":"ParameterList","parameters":[],"src":"4561:0:4"},"scope":2505,"src":"4493:69:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2487,"nodeType":"StructuredDocumentation","src":"4568:139:4","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":2494,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4721:11:4","nodeType":"FunctionDefinition","parameters":{"id":2490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2489,"mutability":"mutable","name":"tokenId","nameLocation":"4750:7:4","nodeType":"VariableDeclaration","scope":2494,"src":"4742:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2488,"name":"uint256","nodeType":"ElementaryTypeName","src":"4742:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4732:31:4"},"returnParameters":{"id":2493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2492,"mutability":"mutable","name":"operator","nameLocation":"4795:8:4","nodeType":"VariableDeclaration","scope":2494,"src":"4787:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2491,"name":"address","nodeType":"ElementaryTypeName","src":"4787:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4786:18:4"},"scope":2505,"src":"4712:93:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2495,"nodeType":"StructuredDocumentation","src":"4811:138:4","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":2504,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4963:16:4","nodeType":"FunctionDefinition","parameters":{"id":2500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2497,"mutability":"mutable","name":"owner","nameLocation":"4997:5:4","nodeType":"VariableDeclaration","scope":2504,"src":"4989:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2496,"name":"address","nodeType":"ElementaryTypeName","src":"4989:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2499,"mutability":"mutable","name":"operator","nameLocation":"5020:8:4","nodeType":"VariableDeclaration","scope":2504,"src":"5012:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2498,"name":"address","nodeType":"ElementaryTypeName","src":"5012:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4979:55:4"},"returnParameters":{"id":2503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2502,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2504,"src":"5058:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2501,"name":"bool","nodeType":"ElementaryTypeName","src":"5058:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5057:6:4"},"scope":2505,"src":"4954:110:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2506,"src":"246:4820:4","usedErrors":[]}],"src":"108:4959:4"},"id":4},"contracts/IERC721EnumerableUpgradeable.sol":{"ast":{"absolutePath":"contracts/IERC721EnumerableUpgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[3624],"IERC721EnumerableUpgradeable":[2536],"IERC721Upgradeable":[2670]},"id":2537,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2507,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"129:23:5"},{"absolutePath":"contracts/IERC721Upgradeable.sol","file":"./IERC721Upgradeable.sol","id":2508,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2537,"sourceUnit":2671,"src":"154:34:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2510,"name":"IERC721Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2670,"src":"369:18:5"},"id":2511,"nodeType":"InheritanceSpecifier","src":"369:18:5"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2509,"nodeType":"StructuredDocumentation","src":"190:136:5","text":" @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":2536,"linearizedBaseContracts":[2536,2670,3624],"name":"IERC721EnumerableUpgradeable","nameLocation":"337:28:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2512,"nodeType":"StructuredDocumentation","src":"394:82:5","text":" @dev Returns the total amount of tokens stored by the contract."},"functionSelector":"18160ddd","id":2517,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"490:11:5","nodeType":"FunctionDefinition","parameters":{"id":2513,"nodeType":"ParameterList","parameters":[],"src":"501:2:5"},"returnParameters":{"id":2516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2515,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2517,"src":"527:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2514,"name":"uint256","nodeType":"ElementaryTypeName","src":"527:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"526:9:5"},"scope":2536,"src":"481:55:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2518,"nodeType":"StructuredDocumentation","src":"542:171:5","text":" @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"functionSelector":"2f745c59","id":2527,"implemented":false,"kind":"function","modifiers":[],"name":"tokenOfOwnerByIndex","nameLocation":"727:19:5","nodeType":"FunctionDefinition","parameters":{"id":2523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2520,"mutability":"mutable","name":"owner","nameLocation":"755:5:5","nodeType":"VariableDeclaration","scope":2527,"src":"747:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2519,"name":"address","nodeType":"ElementaryTypeName","src":"747:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2522,"mutability":"mutable","name":"index","nameLocation":"770:5:5","nodeType":"VariableDeclaration","scope":2527,"src":"762:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2521,"name":"uint256","nodeType":"ElementaryTypeName","src":"762:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"746:30:5"},"returnParameters":{"id":2526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2525,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2527,"src":"800:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2524,"name":"uint256","nodeType":"ElementaryTypeName","src":"800:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"799:9:5"},"scope":2536,"src":"718:91:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2528,"nodeType":"StructuredDocumentation","src":"815:164:5","text":" @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."},"functionSelector":"4f6ccce7","id":2535,"implemented":false,"kind":"function","modifiers":[],"name":"tokenByIndex","nameLocation":"993:12:5","nodeType":"FunctionDefinition","parameters":{"id":2531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2530,"mutability":"mutable","name":"index","nameLocation":"1014:5:5","nodeType":"VariableDeclaration","scope":2535,"src":"1006:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2529,"name":"uint256","nodeType":"ElementaryTypeName","src":"1006:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1005:15:5"},"returnParameters":{"id":2534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2535,"src":"1044:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2532,"name":"uint256","nodeType":"ElementaryTypeName","src":"1044:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1043:9:5"},"scope":2536,"src":"984:69:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2537,"src":"327:728:5","usedErrors":[]}],"src":"129:927:5"},"id":5},"contracts/IERC721ReceiverUpgradeable.sol":{"ast":{"absolutePath":"contracts/IERC721ReceiverUpgradeable.sol","exportedSymbols":{"IERC721ReceiverUpgradeable":[2554]},"id":2555,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2538,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:6"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2539,"nodeType":"StructuredDocumentation","src":"141:152:6","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":2554,"linearizedBaseContracts":[2554],"name":"IERC721ReceiverUpgradeable","nameLocation":"304:26:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2540,"nodeType":"StructuredDocumentation","src":"337:493:6","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":2553,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"844:16:6","nodeType":"FunctionDefinition","parameters":{"id":2549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2542,"mutability":"mutable","name":"operator","nameLocation":"878:8:6","nodeType":"VariableDeclaration","scope":2553,"src":"870:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2541,"name":"address","nodeType":"ElementaryTypeName","src":"870:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2544,"mutability":"mutable","name":"from","nameLocation":"904:4:6","nodeType":"VariableDeclaration","scope":2553,"src":"896:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2543,"name":"address","nodeType":"ElementaryTypeName","src":"896:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2546,"mutability":"mutable","name":"tokenId","nameLocation":"926:7:6","nodeType":"VariableDeclaration","scope":2553,"src":"918:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2545,"name":"uint256","nodeType":"ElementaryTypeName","src":"918:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2548,"mutability":"mutable","name":"data","nameLocation":"958:4:6","nodeType":"VariableDeclaration","scope":2553,"src":"943:19:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2547,"name":"bytes","nodeType":"ElementaryTypeName","src":"943:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"860:108:6"},"returnParameters":{"id":2552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2551,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2553,"src":"987:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2550,"name":"bytes4","nodeType":"ElementaryTypeName","src":"987:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"986:8:6"},"scope":2554,"src":"835:160:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2555,"src":"294:703:6","usedErrors":[]}],"src":"116:882:6"},"id":6},"contracts/IERC721Upgradeable.sol":{"ast":{"absolutePath":"contracts/IERC721Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[3624],"IERC721Upgradeable":[2670]},"id":2671,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2556,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:7"},{"absolutePath":"contracts/utils/introspection/IERC165Upgradeable.sol","file":"./utils/introspection/IERC165Upgradeable.sol","id":2557,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2671,"sourceUnit":3625,"src":"133:54:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2559,"name":"IERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":3624,"src":"289:18:7"},"id":2560,"nodeType":"InheritanceSpecifier","src":"289:18:7"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2558,"nodeType":"StructuredDocumentation","src":"189:67:7","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":2670,"linearizedBaseContracts":[2670,3624],"name":"IERC721Upgradeable","nameLocation":"267:18:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2561,"nodeType":"StructuredDocumentation","src":"314:88:7","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"id":2569,"name":"Transfer","nameLocation":"413:8:7","nodeType":"EventDefinition","parameters":{"id":2568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2563,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"438:4:7","nodeType":"VariableDeclaration","scope":2569,"src":"422:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2562,"name":"address","nodeType":"ElementaryTypeName","src":"422:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2565,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"460:2:7","nodeType":"VariableDeclaration","scope":2569,"src":"444:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2564,"name":"address","nodeType":"ElementaryTypeName","src":"444:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2567,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"480:7:7","nodeType":"VariableDeclaration","scope":2569,"src":"464:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2566,"name":"uint256","nodeType":"ElementaryTypeName","src":"464:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"421:67:7"},"src":"407:82:7"},{"anonymous":false,"documentation":{"id":2570,"nodeType":"StructuredDocumentation","src":"495:94:7","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"id":2578,"name":"Approval","nameLocation":"600:8:7","nodeType":"EventDefinition","parameters":{"id":2577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2572,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"625:5:7","nodeType":"VariableDeclaration","scope":2578,"src":"609:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2571,"name":"address","nodeType":"ElementaryTypeName","src":"609:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2574,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"648:8:7","nodeType":"VariableDeclaration","scope":2578,"src":"632:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2573,"name":"address","nodeType":"ElementaryTypeName","src":"632:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2576,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"674:7:7","nodeType":"VariableDeclaration","scope":2578,"src":"658:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2575,"name":"uint256","nodeType":"ElementaryTypeName","src":"658:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"608:74:7"},"src":"594:89:7"},{"anonymous":false,"documentation":{"id":2579,"nodeType":"StructuredDocumentation","src":"689:117:7","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"id":2587,"name":"ApprovalForAll","nameLocation":"817:14:7","nodeType":"EventDefinition","parameters":{"id":2586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2581,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"848:5:7","nodeType":"VariableDeclaration","scope":2587,"src":"832:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2580,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2583,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"871:8:7","nodeType":"VariableDeclaration","scope":2587,"src":"855:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2582,"name":"address","nodeType":"ElementaryTypeName","src":"855:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2585,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"886:8:7","nodeType":"VariableDeclaration","scope":2587,"src":"881:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2584,"name":"bool","nodeType":"ElementaryTypeName","src":"881:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"831:64:7"},"src":"811:85:7"},{"documentation":{"id":2588,"nodeType":"StructuredDocumentation","src":"902:76:7","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":2595,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"992:9:7","nodeType":"FunctionDefinition","parameters":{"id":2591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2590,"mutability":"mutable","name":"owner","nameLocation":"1010:5:7","nodeType":"VariableDeclaration","scope":2595,"src":"1002:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2589,"name":"address","nodeType":"ElementaryTypeName","src":"1002:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1001:15:7"},"returnParameters":{"id":2594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2593,"mutability":"mutable","name":"balance","nameLocation":"1048:7:7","nodeType":"VariableDeclaration","scope":2595,"src":"1040:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2592,"name":"uint256","nodeType":"ElementaryTypeName","src":"1040:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1039:17:7"},"scope":2670,"src":"983:74:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2596,"nodeType":"StructuredDocumentation","src":"1063:131:7","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":2603,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1208:7:7","nodeType":"FunctionDefinition","parameters":{"id":2599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2598,"mutability":"mutable","name":"tokenId","nameLocation":"1224:7:7","nodeType":"VariableDeclaration","scope":2603,"src":"1216:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2597,"name":"uint256","nodeType":"ElementaryTypeName","src":"1216:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1215:17:7"},"returnParameters":{"id":2602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2601,"mutability":"mutable","name":"owner","nameLocation":"1264:5:7","nodeType":"VariableDeclaration","scope":2603,"src":"1256:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2600,"name":"address","nodeType":"ElementaryTypeName","src":"1256:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1255:15:7"},"scope":2670,"src":"1199:72:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2604,"nodeType":"StructuredDocumentation","src":"1277:556:7","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":2615,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1847:16:7","nodeType":"FunctionDefinition","parameters":{"id":2613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2606,"mutability":"mutable","name":"from","nameLocation":"1872:4:7","nodeType":"VariableDeclaration","scope":2615,"src":"1864:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2605,"name":"address","nodeType":"ElementaryTypeName","src":"1864:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2608,"mutability":"mutable","name":"to","nameLocation":"1886:2:7","nodeType":"VariableDeclaration","scope":2615,"src":"1878:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2607,"name":"address","nodeType":"ElementaryTypeName","src":"1878:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2610,"mutability":"mutable","name":"tokenId","nameLocation":"1898:7:7","nodeType":"VariableDeclaration","scope":2615,"src":"1890:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2609,"name":"uint256","nodeType":"ElementaryTypeName","src":"1890:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2612,"mutability":"mutable","name":"data","nameLocation":"1922:4:7","nodeType":"VariableDeclaration","scope":2615,"src":"1907:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2611,"name":"bytes","nodeType":"ElementaryTypeName","src":"1907:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1863:64:7"},"returnParameters":{"id":2614,"nodeType":"ParameterList","parameters":[],"src":"1936:0:7"},"scope":2670,"src":"1838:99:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2616,"nodeType":"StructuredDocumentation","src":"1943:687:7","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":2625,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2644:16:7","nodeType":"FunctionDefinition","parameters":{"id":2623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2618,"mutability":"mutable","name":"from","nameLocation":"2669:4:7","nodeType":"VariableDeclaration","scope":2625,"src":"2661:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2617,"name":"address","nodeType":"ElementaryTypeName","src":"2661:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2620,"mutability":"mutable","name":"to","nameLocation":"2683:2:7","nodeType":"VariableDeclaration","scope":2625,"src":"2675:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2619,"name":"address","nodeType":"ElementaryTypeName","src":"2675:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2622,"mutability":"mutable","name":"tokenId","nameLocation":"2695:7:7","nodeType":"VariableDeclaration","scope":2625,"src":"2687:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2621,"name":"uint256","nodeType":"ElementaryTypeName","src":"2687:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2660:43:7"},"returnParameters":{"id":2624,"nodeType":"ParameterList","parameters":[],"src":"2712:0:7"},"scope":2670,"src":"2635:78:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2626,"nodeType":"StructuredDocumentation","src":"2719:732:7","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2635,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3465:12:7","nodeType":"FunctionDefinition","parameters":{"id":2633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2628,"mutability":"mutable","name":"from","nameLocation":"3486:4:7","nodeType":"VariableDeclaration","scope":2635,"src":"3478:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2627,"name":"address","nodeType":"ElementaryTypeName","src":"3478:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2630,"mutability":"mutable","name":"to","nameLocation":"3500:2:7","nodeType":"VariableDeclaration","scope":2635,"src":"3492:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2629,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2632,"mutability":"mutable","name":"tokenId","nameLocation":"3512:7:7","nodeType":"VariableDeclaration","scope":2635,"src":"3504:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2631,"name":"uint256","nodeType":"ElementaryTypeName","src":"3504:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3477:43:7"},"returnParameters":{"id":2634,"nodeType":"ParameterList","parameters":[],"src":"3529:0:7"},"scope":2670,"src":"3456:74:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2636,"nodeType":"StructuredDocumentation","src":"3536:452:7","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2643,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4002:7:7","nodeType":"FunctionDefinition","parameters":{"id":2641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2638,"mutability":"mutable","name":"to","nameLocation":"4018:2:7","nodeType":"VariableDeclaration","scope":2643,"src":"4010:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2637,"name":"address","nodeType":"ElementaryTypeName","src":"4010:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2640,"mutability":"mutable","name":"tokenId","nameLocation":"4030:7:7","nodeType":"VariableDeclaration","scope":2643,"src":"4022:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2639,"name":"uint256","nodeType":"ElementaryTypeName","src":"4022:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4009:29:7"},"returnParameters":{"id":2642,"nodeType":"ParameterList","parameters":[],"src":"4047:0:7"},"scope":2670,"src":"3993:55:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2644,"nodeType":"StructuredDocumentation","src":"4054:309:7","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":2651,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4377:17:7","nodeType":"FunctionDefinition","parameters":{"id":2649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2646,"mutability":"mutable","name":"operator","nameLocation":"4403:8:7","nodeType":"VariableDeclaration","scope":2651,"src":"4395:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2645,"name":"address","nodeType":"ElementaryTypeName","src":"4395:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2648,"mutability":"mutable","name":"approved","nameLocation":"4418:8:7","nodeType":"VariableDeclaration","scope":2651,"src":"4413:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2647,"name":"bool","nodeType":"ElementaryTypeName","src":"4413:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4394:33:7"},"returnParameters":{"id":2650,"nodeType":"ParameterList","parameters":[],"src":"4436:0:7"},"scope":2670,"src":"4368:69:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2652,"nodeType":"StructuredDocumentation","src":"4443:139:7","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":2659,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4596:11:7","nodeType":"FunctionDefinition","parameters":{"id":2655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2654,"mutability":"mutable","name":"tokenId","nameLocation":"4616:7:7","nodeType":"VariableDeclaration","scope":2659,"src":"4608:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2653,"name":"uint256","nodeType":"ElementaryTypeName","src":"4608:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4607:17:7"},"returnParameters":{"id":2658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2657,"mutability":"mutable","name":"operator","nameLocation":"4656:8:7","nodeType":"VariableDeclaration","scope":2659,"src":"4648:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2656,"name":"address","nodeType":"ElementaryTypeName","src":"4648:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4647:18:7"},"scope":2670,"src":"4587:79:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2660,"nodeType":"StructuredDocumentation","src":"4672:138:7","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":2669,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4824:16:7","nodeType":"FunctionDefinition","parameters":{"id":2665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2662,"mutability":"mutable","name":"owner","nameLocation":"4849:5:7","nodeType":"VariableDeclaration","scope":2669,"src":"4841:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2661,"name":"address","nodeType":"ElementaryTypeName","src":"4841:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2664,"mutability":"mutable","name":"operator","nameLocation":"4864:8:7","nodeType":"VariableDeclaration","scope":2669,"src":"4856:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2663,"name":"address","nodeType":"ElementaryTypeName","src":"4856:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4840:33:7"},"returnParameters":{"id":2668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2667,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2669,"src":"4897:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2666,"name":"bool","nodeType":"ElementaryTypeName","src":"4897:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4896:6:7"},"scope":2670,"src":"4815:88:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2671,"src":"257:4648:7","usedErrors":[]}],"src":"108:4798:7"},"id":7},"contracts/access/Ownable.sol":{"ast":{"absolutePath":"contracts/access/Ownable.sol","exportedSymbols":{"Context":[3285],"Ownable":[2783]},"id":2784,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2672,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:8"},{"absolutePath":"contracts/utils/Context.sol","file":"../utils/Context.sol","id":2673,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2784,"sourceUnit":3286,"src":"127:30:8","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2675,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":3285,"src":"683:7:8"},"id":2676,"nodeType":"InheritanceSpecifier","src":"683:7:8"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2674,"nodeType":"StructuredDocumentation","src":"159:494:8","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":2783,"linearizedBaseContracts":[2783,3285],"name":"Ownable","nameLocation":"672:7:8","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2678,"mutability":"mutable","name":"_owner","nameLocation":"713:6:8","nodeType":"VariableDeclaration","scope":2783,"src":"697:22:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2677,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":2684,"name":"OwnershipTransferred","nameLocation":"732:20:8","nodeType":"EventDefinition","parameters":{"id":2683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2680,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"778:13:8","nodeType":"VariableDeclaration","scope":2684,"src":"762:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2679,"name":"address","nodeType":"ElementaryTypeName","src":"762:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2682,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"817:8:8","nodeType":"VariableDeclaration","scope":2684,"src":"801:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2681,"name":"address","nodeType":"ElementaryTypeName","src":"801:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:79:8"},"src":"726:106:8"},{"body":{"id":2693,"nodeType":"Block","src":"948:49:8","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2689,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"977:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"977:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2688,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"958:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"958:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2692,"nodeType":"ExpressionStatement","src":"958:32:8"}]},"documentation":{"id":2685,"nodeType":"StructuredDocumentation","src":"838:91:8","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":2694,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2686,"nodeType":"ParameterList","parameters":[],"src":"945:2:8"},"returnParameters":{"id":2687,"nodeType":"ParameterList","parameters":[],"src":"948:0:8"},"scope":2783,"src":"934:63:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2701,"nodeType":"Block","src":"1106:41:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2697,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2725,"src":"1116:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1116:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2699,"nodeType":"ExpressionStatement","src":"1116:13:8"},{"id":2700,"nodeType":"PlaceholderStatement","src":"1139:1:8"}]},"documentation":{"id":2695,"nodeType":"StructuredDocumentation","src":"1003:77:8","text":" @dev Throws if called by any account other than the owner."},"id":2702,"name":"onlyOwner","nameLocation":"1094:9:8","nodeType":"ModifierDefinition","parameters":{"id":2696,"nodeType":"ParameterList","parameters":[],"src":"1103:2:8"},"src":"1085:62:8","virtual":false,"visibility":"internal"},{"body":{"id":2710,"nodeType":"Block","src":"1278:30:8","statements":[{"expression":{"id":2708,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"1295:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2707,"id":2709,"nodeType":"Return","src":"1288:13:8"}]},"documentation":{"id":2703,"nodeType":"StructuredDocumentation","src":"1153:65:8","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":2711,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1232:5:8","nodeType":"FunctionDefinition","parameters":{"id":2704,"nodeType":"ParameterList","parameters":[],"src":"1237:2:8"},"returnParameters":{"id":2707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2711,"src":"1269:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2705,"name":"address","nodeType":"ElementaryTypeName","src":"1269:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1268:9:8"},"scope":2783,"src":"1223:85:8","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2724,"nodeType":"Block","src":"1426:85:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2716,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"1444:5:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1444:7:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2718,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"1455:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1455:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1444:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":2721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1469:34:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":2715,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1436:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1436:68:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2723,"nodeType":"ExpressionStatement","src":"1436:68:8"}]},"documentation":{"id":2712,"nodeType":"StructuredDocumentation","src":"1314:62:8","text":" @dev Throws if the sender is not the owner."},"id":2725,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1390:11:8","nodeType":"FunctionDefinition","parameters":{"id":2713,"nodeType":"ParameterList","parameters":[],"src":"1401:2:8"},"returnParameters":{"id":2714,"nodeType":"ParameterList","parameters":[],"src":"1426:0:8"},"scope":2783,"src":"1381:130:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2738,"nodeType":"Block","src":"1900:47:8","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1937:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2732,"name":"address","nodeType":"ElementaryTypeName","src":"1929:7:8","typeDescriptions":{}}},"id":2735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1929:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2731,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"1910:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1910:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2737,"nodeType":"ExpressionStatement","src":"1910:30:8"}]},"documentation":{"id":2726,"nodeType":"StructuredDocumentation","src":"1517:324:8","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":2739,"implemented":true,"kind":"function","modifiers":[{"id":2729,"kind":"modifierInvocation","modifierName":{"id":2728,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":2702,"src":"1890:9:8"},"nodeType":"ModifierInvocation","src":"1890:9:8"}],"name":"renounceOwnership","nameLocation":"1855:17:8","nodeType":"FunctionDefinition","parameters":{"id":2727,"nodeType":"ParameterList","parameters":[],"src":"1872:2:8"},"returnParameters":{"id":2730,"nodeType":"ParameterList","parameters":[],"src":"1900:0:8"},"scope":2783,"src":"1846:101:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2761,"nodeType":"Block","src":"2166:162:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2748,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"2197:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2217:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2750,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2209:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2749,"name":"address","nodeType":"ElementaryTypeName","src":"2209:7:8","typeDescriptions":{}}},"id":2752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2209:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2197:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":2754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2233:40:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":2747,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2176:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2176:107:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2756,"nodeType":"ExpressionStatement","src":"2176:107:8"},{"expression":{"arguments":[{"id":2758,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"2312:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2757,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"2293:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2293:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2760,"nodeType":"ExpressionStatement","src":"2293:28:8"}]},"documentation":{"id":2740,"nodeType":"StructuredDocumentation","src":"1953:138:8","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":2762,"implemented":true,"kind":"function","modifiers":[{"id":2745,"kind":"modifierInvocation","modifierName":{"id":2744,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":2702,"src":"2156:9:8"},"nodeType":"ModifierInvocation","src":"2156:9:8"}],"name":"transferOwnership","nameLocation":"2105:17:8","nodeType":"FunctionDefinition","parameters":{"id":2743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2742,"mutability":"mutable","name":"newOwner","nameLocation":"2131:8:8","nodeType":"VariableDeclaration","scope":2762,"src":"2123:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2741,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:18:8"},"returnParameters":{"id":2746,"nodeType":"ParameterList","parameters":[],"src":"2166:0:8"},"scope":2783,"src":"2096:232:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2781,"nodeType":"Block","src":"2545:124:8","statements":[{"assignments":[2769],"declarations":[{"constant":false,"id":2769,"mutability":"mutable","name":"oldOwner","nameLocation":"2563:8:8","nodeType":"VariableDeclaration","scope":2781,"src":"2555:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2768,"name":"address","nodeType":"ElementaryTypeName","src":"2555:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2771,"initialValue":{"id":2770,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"2574:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2555:25:8"},{"expression":{"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2772,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"2590:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2773,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"2599:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2590:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2775,"nodeType":"ExpressionStatement","src":"2590:17:8"},{"eventCall":{"arguments":[{"id":2777,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"2643:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2778,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"2653:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2776,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"2622:20:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2622:40:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2780,"nodeType":"EmitStatement","src":"2617:45:8"}]},"documentation":{"id":2763,"nodeType":"StructuredDocumentation","src":"2334:143:8","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":2782,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2491:18:8","nodeType":"FunctionDefinition","parameters":{"id":2766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2765,"mutability":"mutable","name":"newOwner","nameLocation":"2518:8:8","nodeType":"VariableDeclaration","scope":2782,"src":"2510:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2764,"name":"address","nodeType":"ElementaryTypeName","src":"2510:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2509:18:8"},"returnParameters":{"id":2767,"nodeType":"ParameterList","parameters":[],"src":"2545:0:8"},"scope":2783,"src":"2482:187:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2784,"src":"654:2017:8","usedErrors":[]}],"src":"102:2570:8"},"id":8},"contracts/extensions/IERC721MetadataUpgradeable.sol":{"ast":{"absolutePath":"contracts/extensions/IERC721MetadataUpgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[3624],"IERC721MetadataUpgradeable":[2810],"IERC721Upgradeable":[2670]},"id":2811,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2785,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:9"},{"absolutePath":"contracts/IERC721Upgradeable.sol","file":"../IERC721Upgradeable.sol","id":2786,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2811,"sourceUnit":2671,"src":"137:35:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2788,"name":"IERC721Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2670,"src":"348:18:9"},"id":2789,"nodeType":"InheritanceSpecifier","src":"348:18:9"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2787,"nodeType":"StructuredDocumentation","src":"174:133:9","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":2810,"linearizedBaseContracts":[2810,2670,3624],"name":"IERC721MetadataUpgradeable","nameLocation":"318:26:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2790,"nodeType":"StructuredDocumentation","src":"373:58:9","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":2795,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"445:4:9","nodeType":"FunctionDefinition","parameters":{"id":2791,"nodeType":"ParameterList","parameters":[],"src":"449:2:9"},"returnParameters":{"id":2794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2793,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2795,"src":"475:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2792,"name":"string","nodeType":"ElementaryTypeName","src":"475:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"474:15:9"},"scope":2810,"src":"436:54:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2796,"nodeType":"StructuredDocumentation","src":"496:60:9","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":2801,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"570:6:9","nodeType":"FunctionDefinition","parameters":{"id":2797,"nodeType":"ParameterList","parameters":[],"src":"576:2:9"},"returnParameters":{"id":2800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2799,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2801,"src":"602:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2798,"name":"string","nodeType":"ElementaryTypeName","src":"602:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"601:15:9"},"scope":2810,"src":"561:56:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2802,"nodeType":"StructuredDocumentation","src":"623:90:9","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":2809,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"727:8:9","nodeType":"FunctionDefinition","parameters":{"id":2805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2804,"mutability":"mutable","name":"tokenId","nameLocation":"744:7:9","nodeType":"VariableDeclaration","scope":2809,"src":"736:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2803,"name":"uint256","nodeType":"ElementaryTypeName","src":"736:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"735:17:9"},"returnParameters":{"id":2808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2809,"src":"776:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2806,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"775:15:9"},"scope":2810,"src":"718:73:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2811,"src":"308:485:9","usedErrors":[]}],"src":"112:682:9"},"id":9},"contracts/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"contracts/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[3263],"Initializable":[2979]},"id":2980,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2812,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:10"},{"absolutePath":"contracts/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":2813,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2980,"sourceUnit":3264,"src":"138:44:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2814,"nodeType":"StructuredDocumentation","src":"184:2209:10","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":2979,"linearizedBaseContracts":[2979],"name":"Initializable","nameLocation":"2412:13:10","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":2815,"nodeType":"StructuredDocumentation","src":"2432:109:10","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":2817,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:10","nodeType":"VariableDeclaration","scope":2979,"src":"2546:26:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2816,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":2818,"nodeType":"StructuredDocumentation","src":"2579:91:10","text":" @dev Indicates that the contract is in the process of being initialized."},"id":2820,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:10","nodeType":"VariableDeclaration","scope":2979,"src":"2675:26:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2819,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":2821,"nodeType":"StructuredDocumentation","src":"2708:90:10","text":" @dev Triggered when the contract has been initialized or reinitialized."},"id":2825,"name":"Initialized","nameLocation":"2809:11:10","nodeType":"EventDefinition","parameters":{"id":2824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2823,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:10","nodeType":"VariableDeclaration","scope":2825,"src":"2821:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2822,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:10"},"src":"2803:33:10"},{"body":{"id":2880,"nodeType":"Block","src":"3269:483:10","statements":[{"assignments":[2829],"declarations":[{"constant":false,"id":2829,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:10","nodeType":"VariableDeclaration","scope":2880,"src":"3279:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2828,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2832,"initialValue":{"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:10","subExpression":{"id":2830,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"3302:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2834,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"3347:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2835,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"3365:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":2836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2839,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:10","subExpression":{"arguments":[{"arguments":[{"id":2844,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$2979","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$2979","typeString":"contract Initializable"}],"id":2843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2842,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:10","typeDescriptions":{}}},"id":2845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3418:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2840,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3263,"src":"3388:18:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3263_$","typeString":"type(library AddressUpgradeable)"}},"id":2841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2997,"src":"3388:29:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3388:44:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2848,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"3436:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2852,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":2854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":2833,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3325:201:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2856,"nodeType":"ExpressionStatement","src":"3325:201:10"},{"expression":{"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2857,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"3536:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":2858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2860,"nodeType":"ExpressionStatement","src":"3536:16:10"},{"condition":{"id":2861,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"3566:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2867,"nodeType":"IfStatement","src":"3562:65:10","trueBody":{"id":2866,"nodeType":"Block","src":"3582:45:10","statements":[{"expression":{"id":2864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2862,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"3596:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2865,"nodeType":"ExpressionStatement","src":"3596:20:10"}]}},{"id":2868,"nodeType":"PlaceholderStatement","src":"3636:1:10"},{"condition":{"id":2869,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"3651:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2879,"nodeType":"IfStatement","src":"3647:99:10","trueBody":{"id":2878,"nodeType":"Block","src":"3667:79:10","statements":[{"expression":{"id":2872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2870,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"3681:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2873,"nodeType":"ExpressionStatement","src":"3681:21:10"},{"eventCall":{"arguments":[{"hexValue":"31","id":2875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2874,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"3721:11:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3721:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2877,"nodeType":"EmitStatement","src":"3716:19:10"}]}}]},"documentation":{"id":2826,"nodeType":"StructuredDocumentation","src":"2842:399:10","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":2881,"name":"initializer","nameLocation":"3255:11:10","nodeType":"ModifierDefinition","parameters":{"id":2827,"nodeType":"ParameterList","parameters":[],"src":"3266:2:10"},"src":"3246:506:10","virtual":false,"visibility":"internal"},{"body":{"id":2913,"nodeType":"Block","src":"4863:255:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:10","subExpression":{"id":2887,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"4882:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2889,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"4899:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2890,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"4914:7:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":2893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":2886,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4873:99:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2895,"nodeType":"ExpressionStatement","src":"4873:99:10"},{"expression":{"id":2898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2896,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"4982:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2897,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"4997:7:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2899,"nodeType":"ExpressionStatement","src":"4982:22:10"},{"expression":{"id":2902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2900,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"5014:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2903,"nodeType":"ExpressionStatement","src":"5014:20:10"},{"id":2904,"nodeType":"PlaceholderStatement","src":"5044:1:10"},{"expression":{"id":2907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2905,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"5055:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2908,"nodeType":"ExpressionStatement","src":"5055:21:10"},{"eventCall":{"arguments":[{"id":2910,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"5103:7:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2909,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"5091:11:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5091:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2912,"nodeType":"EmitStatement","src":"5086:25:10"}]},"documentation":{"id":2882,"nodeType":"StructuredDocumentation","src":"3758:1062:10","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":2914,"name":"reinitializer","nameLocation":"4834:13:10","nodeType":"ModifierDefinition","parameters":{"id":2885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2884,"mutability":"mutable","name":"version","nameLocation":"4854:7:10","nodeType":"VariableDeclaration","scope":2914,"src":"4848:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2883,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:10"},"src":"4825:293:10","virtual":false,"visibility":"internal"},{"body":{"id":2923,"nodeType":"Block","src":"5356:97:10","statements":[{"expression":{"arguments":[{"id":2918,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"5374:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":2919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":2917,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5366:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2921,"nodeType":"ExpressionStatement","src":"5366:69:10"},{"id":2922,"nodeType":"PlaceholderStatement","src":"5445:1:10"}]},"documentation":{"id":2915,"nodeType":"StructuredDocumentation","src":"5124:199:10","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":2924,"name":"onlyInitializing","nameLocation":"5337:16:10","nodeType":"ModifierDefinition","parameters":{"id":2916,"nodeType":"ParameterList","parameters":[],"src":"5353:2:10"},"src":"5328:125:10","virtual":false,"visibility":"internal"},{"body":{"id":2959,"nodeType":"Block","src":"5988:231:10","statements":[{"expression":{"arguments":[{"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:10","subExpression":{"id":2929,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"6007:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":2931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":2928,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5998:66:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2933,"nodeType":"ExpressionStatement","src":"5998:66:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2934,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"6078:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":2937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2936,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:10","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":2935,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6094:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":2939,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6094:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2958,"nodeType":"IfStatement","src":"6074:139:10","trueBody":{"id":2957,"nodeType":"Block","src":"6111:102:10","statements":[{"expression":{"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2941,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"6125:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":2944,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2943,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:10","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":2942,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6140:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":2946,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6140:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2948,"nodeType":"ExpressionStatement","src":"6125:30:10"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":2952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2951,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:10","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":2950,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6186:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":2954,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6186:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2949,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"6174:11:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6174:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2956,"nodeType":"EmitStatement","src":"6169:33:10"}]}}]},"documentation":{"id":2925,"nodeType":"StructuredDocumentation","src":"5459:475:10","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":2960,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:10","nodeType":"FunctionDefinition","parameters":{"id":2926,"nodeType":"ParameterList","parameters":[],"src":"5968:2:10"},"returnParameters":{"id":2927,"nodeType":"ParameterList","parameters":[],"src":"5988:0:10"},"scope":2979,"src":"5939:280:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2968,"nodeType":"Block","src":"6393:36:10","statements":[{"expression":{"id":2966,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"6410:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":2965,"id":2967,"nodeType":"Return","src":"6403:19:10"}]},"documentation":{"id":2961,"nodeType":"StructuredDocumentation","src":"6225:99:10","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":2969,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:10","nodeType":"FunctionDefinition","parameters":{"id":2962,"nodeType":"ParameterList","parameters":[],"src":"6360:2:10"},"returnParameters":{"id":2965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2964,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2969,"src":"6386:5:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2963,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:10"},"scope":2979,"src":"6329:100:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2977,"nodeType":"Block","src":"6601:37:10","statements":[{"expression":{"id":2975,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"6618:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2974,"id":2976,"nodeType":"Return","src":"6611:20:10"}]},"documentation":{"id":2970,"nodeType":"StructuredDocumentation","src":"6435:105:10","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":2978,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:10","nodeType":"FunctionDefinition","parameters":{"id":2971,"nodeType":"ParameterList","parameters":[],"src":"6569:2:10"},"returnParameters":{"id":2974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2973,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2978,"src":"6595:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2972,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:10"},"scope":2979,"src":"6545:93:10","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":2980,"src":"2394:4246:10","usedErrors":[]}],"src":"113:6528:10"},"id":10},"contracts/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"contracts/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3263]},"id":3264,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2981,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:11"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2982,"nodeType":"StructuredDocumentation","src":"126:67:11","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":3263,"linearizedBaseContracts":[3263],"name":"AddressUpgradeable","nameLocation":"202:18:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2996,"nodeType":"Block","src":"1489:254:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2990,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2985,"src":"1713:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1713:12:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1713:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2989,"id":2995,"nodeType":"Return","src":"1706:30:11"}]},"documentation":{"id":2983,"nodeType":"StructuredDocumentation","src":"227:1191:11","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2997,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:11","nodeType":"FunctionDefinition","parameters":{"id":2986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2985,"mutability":"mutable","name":"account","nameLocation":"1451:7:11","nodeType":"VariableDeclaration","scope":2997,"src":"1443:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2984,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:11"},"returnParameters":{"id":2989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2988,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2997,"src":"1483:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2987,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:11"},"scope":3263,"src":"1423:320:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3030,"nodeType":"Block","src":"2730:241:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3008,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2756:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$3263","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$3263","typeString":"library AddressUpgradeable"}],"id":3007,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2748:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3006,"name":"address","nodeType":"ElementaryTypeName","src":"2748:7:11","typeDescriptions":{}}},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2748:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2748:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3011,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3002,"src":"2773:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2748:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":3013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2781:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":3005,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2740:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2740:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3015,"nodeType":"ExpressionStatement","src":"2740:73:11"},{"assignments":[3017,null],"declarations":[{"constant":false,"id":3017,"mutability":"mutable","name":"success","nameLocation":"2830:7:11","nodeType":"VariableDeclaration","scope":3030,"src":"2825:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3016,"name":"bool","nodeType":"ElementaryTypeName","src":"2825:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3024,"initialValue":{"arguments":[{"hexValue":"","id":3022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2873:2:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3018,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3000,"src":"2843:9:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2843:14:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3020,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3002,"src":"2865:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2843:29:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2843:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2824:52:11"},{"expression":{"arguments":[{"id":3026,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3017,"src":"2894:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":3027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2903:60:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":3025,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2886:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2886:78:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3029,"nodeType":"ExpressionStatement","src":"2886:78:11"}]},"documentation":{"id":2998,"nodeType":"StructuredDocumentation","src":"1749:905:11","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":3031,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2668:9:11","nodeType":"FunctionDefinition","parameters":{"id":3003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3000,"mutability":"mutable","name":"recipient","nameLocation":"2694:9:11","nodeType":"VariableDeclaration","scope":3031,"src":"2678:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2999,"name":"address","nodeType":"ElementaryTypeName","src":"2678:15:11","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3002,"mutability":"mutable","name":"amount","nameLocation":"2713:6:11","nodeType":"VariableDeclaration","scope":3031,"src":"2705:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3001,"name":"uint256","nodeType":"ElementaryTypeName","src":"2705:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2677:43:11"},"returnParameters":{"id":3004,"nodeType":"ParameterList","parameters":[],"src":"2730:0:11"},"scope":3263,"src":"2659:312:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3048,"nodeType":"Block","src":"3802:96:11","statements":[{"expression":{"arguments":[{"id":3042,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"3841:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3043,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3036,"src":"3849:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3855:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":3045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3858:32:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":3041,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3089,3133],"referencedDeclaration":3133,"src":"3819:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3819:72:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3040,"id":3047,"nodeType":"Return","src":"3812:79:11"}]},"documentation":{"id":3032,"nodeType":"StructuredDocumentation","src":"2977:731:11","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":3049,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3722:12:11","nodeType":"FunctionDefinition","parameters":{"id":3037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3034,"mutability":"mutable","name":"target","nameLocation":"3743:6:11","nodeType":"VariableDeclaration","scope":3049,"src":"3735:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3033,"name":"address","nodeType":"ElementaryTypeName","src":"3735:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3036,"mutability":"mutable","name":"data","nameLocation":"3764:4:11","nodeType":"VariableDeclaration","scope":3049,"src":"3751:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3035,"name":"bytes","nodeType":"ElementaryTypeName","src":"3751:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3734:35:11"},"returnParameters":{"id":3040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3039,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3049,"src":"3788:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3038,"name":"bytes","nodeType":"ElementaryTypeName","src":"3788:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3787:14:11"},"scope":3263,"src":"3713:185:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3068,"nodeType":"Block","src":"4237:76:11","statements":[{"expression":{"arguments":[{"id":3062,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"4276:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3063,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3054,"src":"4284:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4290:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3065,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"4293:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3061,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3089,3133],"referencedDeclaration":3133,"src":"4254:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4254:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3060,"id":3067,"nodeType":"Return","src":"4247:59:11"}]},"documentation":{"id":3050,"nodeType":"StructuredDocumentation","src":"3904:211:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3069,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4129:12:11","nodeType":"FunctionDefinition","parameters":{"id":3057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3052,"mutability":"mutable","name":"target","nameLocation":"4150:6:11","nodeType":"VariableDeclaration","scope":3069,"src":"4142:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3051,"name":"address","nodeType":"ElementaryTypeName","src":"4142:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3054,"mutability":"mutable","name":"data","nameLocation":"4171:4:11","nodeType":"VariableDeclaration","scope":3069,"src":"4158:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3053,"name":"bytes","nodeType":"ElementaryTypeName","src":"4158:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3056,"mutability":"mutable","name":"errorMessage","nameLocation":"4191:12:11","nodeType":"VariableDeclaration","scope":3069,"src":"4177:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3055,"name":"string","nodeType":"ElementaryTypeName","src":"4177:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4141:63:11"},"returnParameters":{"id":3060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3069,"src":"4223:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3058,"name":"bytes","nodeType":"ElementaryTypeName","src":"4223:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4222:14:11"},"scope":3263,"src":"4120:193:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3088,"nodeType":"Block","src":"4788:111:11","statements":[{"expression":{"arguments":[{"id":3082,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"4827:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3083,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"4835:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3084,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"4841:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":3085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4848:43:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":3081,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3089,3133],"referencedDeclaration":3133,"src":"4805:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4805:87:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3080,"id":3087,"nodeType":"Return","src":"4798:94:11"}]},"documentation":{"id":3070,"nodeType":"StructuredDocumentation","src":"4319:351:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":3089,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4684:21:11","nodeType":"FunctionDefinition","parameters":{"id":3077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3072,"mutability":"mutable","name":"target","nameLocation":"4714:6:11","nodeType":"VariableDeclaration","scope":3089,"src":"4706:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3071,"name":"address","nodeType":"ElementaryTypeName","src":"4706:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3074,"mutability":"mutable","name":"data","nameLocation":"4735:4:11","nodeType":"VariableDeclaration","scope":3089,"src":"4722:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3073,"name":"bytes","nodeType":"ElementaryTypeName","src":"4722:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3076,"mutability":"mutable","name":"value","nameLocation":"4749:5:11","nodeType":"VariableDeclaration","scope":3089,"src":"4741:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3075,"name":"uint256","nodeType":"ElementaryTypeName","src":"4741:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4705:50:11"},"returnParameters":{"id":3080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3089,"src":"4774:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3078,"name":"bytes","nodeType":"ElementaryTypeName","src":"4774:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4773:14:11"},"scope":3263,"src":"4675:224:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3132,"nodeType":"Block","src":"5326:267:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3106,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5352:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$3263","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$3263","typeString":"library AddressUpgradeable"}],"id":3105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5344:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3104,"name":"address","nodeType":"ElementaryTypeName","src":"5344:7:11","typeDescriptions":{}}},"id":3107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5344:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5344:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3109,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3096,"src":"5369:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5344:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":3111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5376:40:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":3103,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5336:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5336:81:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3113,"nodeType":"ExpressionStatement","src":"5336:81:11"},{"assignments":[3115,3117],"declarations":[{"constant":false,"id":3115,"mutability":"mutable","name":"success","nameLocation":"5433:7:11","nodeType":"VariableDeclaration","scope":3132,"src":"5428:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3114,"name":"bool","nodeType":"ElementaryTypeName","src":"5428:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3117,"mutability":"mutable","name":"returndata","nameLocation":"5455:10:11","nodeType":"VariableDeclaration","scope":3132,"src":"5442:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3116,"name":"bytes","nodeType":"ElementaryTypeName","src":"5442:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3124,"initialValue":{"arguments":[{"id":3122,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3094,"src":"5495:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3118,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"5469:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5469:11:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3096,"src":"5488:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5469:25:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5469:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5427:73:11"},{"expression":{"arguments":[{"id":3126,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"5544:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3127,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"5552:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3128,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3117,"src":"5561:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3129,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3098,"src":"5573:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3125,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"5517:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5517:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3102,"id":3131,"nodeType":"Return","src":"5510:76:11"}]},"documentation":{"id":3090,"nodeType":"StructuredDocumentation","src":"4905:237:11","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3133,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5156:21:11","nodeType":"FunctionDefinition","parameters":{"id":3099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3092,"mutability":"mutable","name":"target","nameLocation":"5195:6:11","nodeType":"VariableDeclaration","scope":3133,"src":"5187:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3091,"name":"address","nodeType":"ElementaryTypeName","src":"5187:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3094,"mutability":"mutable","name":"data","nameLocation":"5224:4:11","nodeType":"VariableDeclaration","scope":3133,"src":"5211:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3093,"name":"bytes","nodeType":"ElementaryTypeName","src":"5211:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3096,"mutability":"mutable","name":"value","nameLocation":"5246:5:11","nodeType":"VariableDeclaration","scope":3133,"src":"5238:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3095,"name":"uint256","nodeType":"ElementaryTypeName","src":"5238:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3098,"mutability":"mutable","name":"errorMessage","nameLocation":"5275:12:11","nodeType":"VariableDeclaration","scope":3133,"src":"5261:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3097,"name":"string","nodeType":"ElementaryTypeName","src":"5261:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5177:116:11"},"returnParameters":{"id":3102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3101,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3133,"src":"5312:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3100,"name":"bytes","nodeType":"ElementaryTypeName","src":"5312:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5311:14:11"},"scope":3263,"src":"5147:446:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3149,"nodeType":"Block","src":"5870:97:11","statements":[{"expression":{"arguments":[{"id":3144,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"5906:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3145,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"5914:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":3146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5920:39:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":3143,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[3150,3179],"referencedDeclaration":3179,"src":"5887:18:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":3147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5887:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3142,"id":3148,"nodeType":"Return","src":"5880:80:11"}]},"documentation":{"id":3134,"nodeType":"StructuredDocumentation","src":"5599:166:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3150,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5779:18:11","nodeType":"FunctionDefinition","parameters":{"id":3139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3136,"mutability":"mutable","name":"target","nameLocation":"5806:6:11","nodeType":"VariableDeclaration","scope":3150,"src":"5798:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3135,"name":"address","nodeType":"ElementaryTypeName","src":"5798:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3138,"mutability":"mutable","name":"data","nameLocation":"5827:4:11","nodeType":"VariableDeclaration","scope":3150,"src":"5814:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3137,"name":"bytes","nodeType":"ElementaryTypeName","src":"5814:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5797:35:11"},"returnParameters":{"id":3142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3150,"src":"5856:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3140,"name":"bytes","nodeType":"ElementaryTypeName","src":"5856:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5855:14:11"},"scope":3263,"src":"5770:197:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3178,"nodeType":"Block","src":"6309:168:11","statements":[{"assignments":[3163,3165],"declarations":[{"constant":false,"id":3163,"mutability":"mutable","name":"success","nameLocation":"6325:7:11","nodeType":"VariableDeclaration","scope":3178,"src":"6320:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3162,"name":"bool","nodeType":"ElementaryTypeName","src":"6320:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3165,"mutability":"mutable","name":"returndata","nameLocation":"6347:10:11","nodeType":"VariableDeclaration","scope":3178,"src":"6334:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3164,"name":"bytes","nodeType":"ElementaryTypeName","src":"6334:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3170,"initialValue":{"arguments":[{"id":3168,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"6379:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3166,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"6361:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6361:17:11","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6361:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6319:65:11"},{"expression":{"arguments":[{"id":3172,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"6428:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3173,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3163,"src":"6436:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3174,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3165,"src":"6445:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3175,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"6457:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3171,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"6401:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6401:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3161,"id":3177,"nodeType":"Return","src":"6394:76:11"}]},"documentation":{"id":3151,"nodeType":"StructuredDocumentation","src":"5973:173:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3179,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6160:18:11","nodeType":"FunctionDefinition","parameters":{"id":3158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3153,"mutability":"mutable","name":"target","nameLocation":"6196:6:11","nodeType":"VariableDeclaration","scope":3179,"src":"6188:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3152,"name":"address","nodeType":"ElementaryTypeName","src":"6188:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3155,"mutability":"mutable","name":"data","nameLocation":"6225:4:11","nodeType":"VariableDeclaration","scope":3179,"src":"6212:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3154,"name":"bytes","nodeType":"ElementaryTypeName","src":"6212:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3157,"mutability":"mutable","name":"errorMessage","nameLocation":"6253:12:11","nodeType":"VariableDeclaration","scope":3179,"src":"6239:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3156,"name":"string","nodeType":"ElementaryTypeName","src":"6239:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6178:93:11"},"returnParameters":{"id":3161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3160,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3179,"src":"6295:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3159,"name":"bytes","nodeType":"ElementaryTypeName","src":"6295:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6294:14:11"},"scope":3263,"src":"6151:326:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3217,"nodeType":"Block","src":"6959:434:11","statements":[{"condition":{"id":3193,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3184,"src":"6973:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3215,"nodeType":"Block","src":"7329:58:11","statements":[{"expression":{"arguments":[{"id":3211,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"7351:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3212,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"7363:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3210,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"7343:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7343:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3214,"nodeType":"ExpressionStatement","src":"7343:33:11"}]},"id":3216,"nodeType":"IfStatement","src":"6969:418:11","trueBody":{"id":3209,"nodeType":"Block","src":"6982:341:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3194,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"7000:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7000:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7021:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7000:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3206,"nodeType":"IfStatement","src":"6996:286:11","trueBody":{"id":3205,"nodeType":"Block","src":"7024:258:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":3200,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3182,"src":"7226:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3199,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"7215:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7215:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":3202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7235:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":3198,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7207:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7207:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3204,"nodeType":"ExpressionStatement","src":"7207:60:11"}]}},{"expression":{"id":3207,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"7302:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3192,"id":3208,"nodeType":"Return","src":"7295:17:11"}]}}]},"documentation":{"id":3180,"nodeType":"StructuredDocumentation","src":"6483:277:11","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":3218,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"6774:26:11","nodeType":"FunctionDefinition","parameters":{"id":3189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3182,"mutability":"mutable","name":"target","nameLocation":"6818:6:11","nodeType":"VariableDeclaration","scope":3218,"src":"6810:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3181,"name":"address","nodeType":"ElementaryTypeName","src":"6810:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3184,"mutability":"mutable","name":"success","nameLocation":"6839:7:11","nodeType":"VariableDeclaration","scope":3218,"src":"6834:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3183,"name":"bool","nodeType":"ElementaryTypeName","src":"6834:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3186,"mutability":"mutable","name":"returndata","nameLocation":"6869:10:11","nodeType":"VariableDeclaration","scope":3218,"src":"6856:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3185,"name":"bytes","nodeType":"ElementaryTypeName","src":"6856:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3188,"mutability":"mutable","name":"errorMessage","nameLocation":"6903:12:11","nodeType":"VariableDeclaration","scope":3218,"src":"6889:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3187,"name":"string","nodeType":"ElementaryTypeName","src":"6889:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6800:121:11"},"returnParameters":{"id":3192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3191,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3218,"src":"6945:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3190,"name":"bytes","nodeType":"ElementaryTypeName","src":"6945:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6944:14:11"},"scope":3263,"src":"6765:628:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3241,"nodeType":"Block","src":"7774:135:11","statements":[{"condition":{"id":3230,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"7788:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3239,"nodeType":"Block","src":"7845:58:11","statements":[{"expression":{"arguments":[{"id":3235,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3223,"src":"7867:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3236,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3225,"src":"7879:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3234,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"7859:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7859:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3238,"nodeType":"ExpressionStatement","src":"7859:33:11"}]},"id":3240,"nodeType":"IfStatement","src":"7784:119:11","trueBody":{"id":3233,"nodeType":"Block","src":"7797:42:11","statements":[{"expression":{"id":3231,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3223,"src":"7818:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3229,"id":3232,"nodeType":"Return","src":"7811:17:11"}]}}]},"documentation":{"id":3219,"nodeType":"StructuredDocumentation","src":"7399:210:11","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":3242,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7623:16:11","nodeType":"FunctionDefinition","parameters":{"id":3226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3221,"mutability":"mutable","name":"success","nameLocation":"7654:7:11","nodeType":"VariableDeclaration","scope":3242,"src":"7649:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3220,"name":"bool","nodeType":"ElementaryTypeName","src":"7649:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3223,"mutability":"mutable","name":"returndata","nameLocation":"7684:10:11","nodeType":"VariableDeclaration","scope":3242,"src":"7671:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3222,"name":"bytes","nodeType":"ElementaryTypeName","src":"7671:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3225,"mutability":"mutable","name":"errorMessage","nameLocation":"7718:12:11","nodeType":"VariableDeclaration","scope":3242,"src":"7704:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3224,"name":"string","nodeType":"ElementaryTypeName","src":"7704:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7639:97:11"},"returnParameters":{"id":3229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3228,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3242,"src":"7760:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3227,"name":"bytes","nodeType":"ElementaryTypeName","src":"7760:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7759:14:11"},"scope":3263,"src":"7614:295:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3261,"nodeType":"Block","src":"7998:457:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3249,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"8074:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8074:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8094:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8074:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3259,"nodeType":"Block","src":"8404:45:11","statements":[{"expression":{"arguments":[{"id":3256,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"8425:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3255,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8418:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8418:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3258,"nodeType":"ExpressionStatement","src":"8418:20:11"}]},"id":3260,"nodeType":"IfStatement","src":"8070:379:11","trueBody":{"id":3254,"nodeType":"Block","src":"8097:301:11","statements":[{"AST":{"nodeType":"YulBlock","src":"8255:133:11","statements":[{"nodeType":"YulVariableDeclaration","src":"8273:40:11","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8302:10:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8296:5:11"},"nodeType":"YulFunctionCall","src":"8296:17:11"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8277:15:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8341:2:11","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8345:10:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8337:3:11"},"nodeType":"YulFunctionCall","src":"8337:19:11"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8358:15:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8330:6:11"},"nodeType":"YulFunctionCall","src":"8330:44:11"},"nodeType":"YulExpressionStatement","src":"8330:44:11"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3244,"isOffset":false,"isSlot":false,"src":"8302:10:11","valueSize":1},{"declaration":3244,"isOffset":false,"isSlot":false,"src":"8345:10:11","valueSize":1}],"id":3253,"nodeType":"InlineAssembly","src":"8246:142:11"}]}}]},"id":3262,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"7924:7:11","nodeType":"FunctionDefinition","parameters":{"id":3247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3244,"mutability":"mutable","name":"returndata","nameLocation":"7945:10:11","nodeType":"VariableDeclaration","scope":3262,"src":"7932:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3243,"name":"bytes","nodeType":"ElementaryTypeName","src":"7932:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3246,"mutability":"mutable","name":"errorMessage","nameLocation":"7971:12:11","nodeType":"VariableDeclaration","scope":3262,"src":"7957:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3245,"name":"string","nodeType":"ElementaryTypeName","src":"7957:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7931:53:11"},"returnParameters":{"id":3248,"nodeType":"ParameterList","parameters":[],"src":"7998:0:11"},"scope":3263,"src":"7915:540:11","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3264,"src":"194:8263:11","usedErrors":[]}],"src":"101:8357:11"},"id":11},"contracts/utils/Context.sol":{"ast":{"absolutePath":"contracts/utils/Context.sol","exportedSymbols":{"Context":[3285]},"id":3286,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3265,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:12"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":3266,"nodeType":"StructuredDocumentation","src":"111:496:12","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3285,"linearizedBaseContracts":[3285],"name":"Context","nameLocation":"626:7:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":3274,"nodeType":"Block","src":"702:34:12","statements":[{"expression":{"expression":{"id":3271,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"719:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3270,"id":3273,"nodeType":"Return","src":"712:17:12"}]},"id":3275,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:12","nodeType":"FunctionDefinition","parameters":{"id":3267,"nodeType":"ParameterList","parameters":[],"src":"659:2:12"},"returnParameters":{"id":3270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3269,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3275,"src":"693:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3268,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:12"},"scope":3285,"src":"640:96:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3283,"nodeType":"Block","src":"809:32:12","statements":[{"expression":{"expression":{"id":3280,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"826:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3279,"id":3282,"nodeType":"Return","src":"819:15:12"}]},"id":3284,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:12","nodeType":"FunctionDefinition","parameters":{"id":3276,"nodeType":"ParameterList","parameters":[],"src":"759:2:12"},"returnParameters":{"id":3279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3278,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3284,"src":"793:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3277,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:12"},"scope":3285,"src":"742:99:12","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3286,"src":"608:235:12","usedErrors":[]}],"src":"86:758:12"},"id":12},"contracts/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"contracts/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3263],"ContextUpgradeable":[3327],"Initializable":[2979]},"id":3328,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3287,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:13"},{"absolutePath":"contracts/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3288,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3328,"sourceUnit":2980,"src":"110:42:13","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3290,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":2979,"src":"691:13:13"},"id":3291,"nodeType":"InheritanceSpecifier","src":"691:13:13"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":3289,"nodeType":"StructuredDocumentation","src":"154:496:13","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3327,"linearizedBaseContracts":[3327,2979],"name":"ContextUpgradeable","nameLocation":"669:18:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":3296,"nodeType":"Block","src":"763:2:13","statements":[]},"id":3297,"implemented":true,"kind":"function","modifiers":[{"id":3294,"kind":"modifierInvocation","modifierName":{"id":3293,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"746:16:13"},"nodeType":"ModifierInvocation","src":"746:16:13"}],"name":"__Context_init","nameLocation":"720:14:13","nodeType":"FunctionDefinition","parameters":{"id":3292,"nodeType":"ParameterList","parameters":[],"src":"734:2:13"},"returnParameters":{"id":3295,"nodeType":"ParameterList","parameters":[],"src":"763:0:13"},"scope":3327,"src":"711:54:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3302,"nodeType":"Block","src":"833:2:13","statements":[]},"id":3303,"implemented":true,"kind":"function","modifiers":[{"id":3300,"kind":"modifierInvocation","modifierName":{"id":3299,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"816:16:13"},"nodeType":"ModifierInvocation","src":"816:16:13"}],"name":"__Context_init_unchained","nameLocation":"780:24:13","nodeType":"FunctionDefinition","parameters":{"id":3298,"nodeType":"ParameterList","parameters":[],"src":"804:2:13"},"returnParameters":{"id":3301,"nodeType":"ParameterList","parameters":[],"src":"833:0:13"},"scope":3327,"src":"771:64:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3311,"nodeType":"Block","src":"903:34:13","statements":[{"expression":{"expression":{"id":3308,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"920:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"920:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3307,"id":3310,"nodeType":"Return","src":"913:17:13"}]},"id":3312,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"850:10:13","nodeType":"FunctionDefinition","parameters":{"id":3304,"nodeType":"ParameterList","parameters":[],"src":"860:2:13"},"returnParameters":{"id":3307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3306,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3312,"src":"894:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3305,"name":"address","nodeType":"ElementaryTypeName","src":"894:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"893:9:13"},"scope":3327,"src":"841:96:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3320,"nodeType":"Block","src":"1010:32:13","statements":[{"expression":{"expression":{"id":3317,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1027:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"1027:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3316,"id":3319,"nodeType":"Return","src":"1020:15:13"}]},"id":3321,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"952:8:13","nodeType":"FunctionDefinition","parameters":{"id":3313,"nodeType":"ParameterList","parameters":[],"src":"960:2:13"},"returnParameters":{"id":3316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3315,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3321,"src":"994:14:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3314,"name":"bytes","nodeType":"ElementaryTypeName","src":"994:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"993:16:13"},"scope":3327,"src":"943:99:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":3322,"nodeType":"StructuredDocumentation","src":"1048:254:13","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3326,"mutability":"mutable","name":"__gap","nameLocation":"1327:5:13","nodeType":"VariableDeclaration","scope":3327,"src":"1307:25:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3323,"name":"uint256","nodeType":"ElementaryTypeName","src":"1307:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3325,"length":{"hexValue":"3530","id":3324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1315:2:13","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1307:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3328,"src":"651:684:13","usedErrors":[]}],"src":"86:1250:13"},"id":13},"contracts/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"contracts/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[4490],"SignedMathUpgradeable":[4595],"StringsUpgradeable":[3556]},"id":3557,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3329,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:14"},{"absolutePath":"contracts/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":3330,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3557,"sourceUnit":4491,"src":"126:36:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/utils/math/SignedMathUpgradeable.sol","file":"./math/SignedMathUpgradeable.sol","id":3331,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3557,"sourceUnit":4596,"src":"163:42:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":3332,"nodeType":"StructuredDocumentation","src":"207:34:14","text":" @dev String operations."},"fullyImplemented":true,"id":3556,"linearizedBaseContracts":[3556],"name":"StringsUpgradeable","nameLocation":"250:18:14","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3335,"mutability":"constant","name":"_SYMBOLS","nameLocation":"300:8:14","nodeType":"VariableDeclaration","scope":3556,"src":"275:54:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":3333,"name":"bytes16","nodeType":"ElementaryTypeName","src":"275:7:14","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":3334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":3338,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"358:15:14","nodeType":"VariableDeclaration","scope":3556,"src":"335:43:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3336,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":3337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"376:2:14","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":3385,"nodeType":"Block","src":"551:636:14","statements":[{"id":3384,"nodeType":"UncheckedBlock","src":"561:620:14","statements":[{"assignments":[3347],"declarations":[{"constant":false,"id":3347,"mutability":"mutable","name":"length","nameLocation":"593:6:14","nodeType":"VariableDeclaration","scope":3384,"src":"585:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3346,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3354,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3350,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3341,"src":"624:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3348,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"602:15:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$4490_$","typeString":"type(library MathUpgradeable)"}},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":4327,"src":"602:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"602:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"602:32:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"585:49:14"},{"assignments":[3356],"declarations":[{"constant":false,"id":3356,"mutability":"mutable","name":"buffer","nameLocation":"662:6:14","nodeType":"VariableDeclaration","scope":3384,"src":"648:20:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3355,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3361,"initialValue":{"arguments":[{"id":3359,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"682:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3358,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"671:10:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":3357,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"671:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"648:41:14"},{"assignments":[3363],"declarations":[{"constant":false,"id":3363,"mutability":"mutable","name":"ptr","nameLocation":"711:3:14","nodeType":"VariableDeclaration","scope":3384,"src":"703:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3362,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3364,"nodeType":"VariableDeclarationStatement","src":"703:11:14"},{"AST":{"nodeType":"YulBlock","src":"784:67:14","statements":[{"nodeType":"YulAssignment","src":"802:35:14","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"813:6:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"825:2:14","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"829:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"821:3:14"},"nodeType":"YulFunctionCall","src":"821:15:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"809:3:14"},"nodeType":"YulFunctionCall","src":"809:28:14"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"802:3:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3356,"isOffset":false,"isSlot":false,"src":"813:6:14","valueSize":1},{"declaration":3347,"isOffset":false,"isSlot":false,"src":"829:6:14","valueSize":1},{"declaration":3363,"isOffset":false,"isSlot":false,"src":"802:3:14","valueSize":1}],"id":3365,"nodeType":"InlineAssembly","src":"775:76:14"},{"body":{"id":3380,"nodeType":"Block","src":"877:267:14","statements":[{"expression":{"id":3368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"895:5:14","subExpression":{"id":3367,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"895:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3369,"nodeType":"ExpressionStatement","src":"895:5:14"},{"AST":{"nodeType":"YulBlock","src":"978:84:14","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1008:3:14"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1022:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"1029:2:14","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1018:3:14"},"nodeType":"YulFunctionCall","src":"1018:14:14"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"1034:8:14"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1013:4:14"},"nodeType":"YulFunctionCall","src":"1013:30:14"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1000:7:14"},"nodeType":"YulFunctionCall","src":"1000:44:14"},"nodeType":"YulExpressionStatement","src":"1000:44:14"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3335,"isOffset":false,"isSlot":false,"src":"1034:8:14","valueSize":1},{"declaration":3363,"isOffset":false,"isSlot":false,"src":"1008:3:14","valueSize":1},{"declaration":3341,"isOffset":false,"isSlot":false,"src":"1022:5:14","valueSize":1}],"id":3370,"nodeType":"InlineAssembly","src":"969:93:14"},{"expression":{"id":3373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3371,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3341,"src":"1079:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1079:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3374,"nodeType":"ExpressionStatement","src":"1079:11:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3375,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3341,"src":"1112:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1112:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3379,"nodeType":"IfStatement","src":"1108:21:14","trueBody":{"id":3378,"nodeType":"Break","src":"1124:5:14"}}]},"condition":{"hexValue":"74727565","id":3366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"871:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3381,"nodeType":"WhileStatement","src":"864:280:14"},{"expression":{"id":3382,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"1164:6:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3345,"id":3383,"nodeType":"Return","src":"1157:13:14"}]}]},"documentation":{"id":3339,"nodeType":"StructuredDocumentation","src":"385:90:14","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":3386,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"489:8:14","nodeType":"FunctionDefinition","parameters":{"id":3342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3341,"mutability":"mutable","name":"value","nameLocation":"506:5:14","nodeType":"VariableDeclaration","scope":3386,"src":"498:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3340,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:15:14"},"returnParameters":{"id":3345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3344,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3386,"src":"536:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3343,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"535:15:14"},"scope":3556,"src":"480:707:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3413,"nodeType":"Block","src":"1357:114:14","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3398,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3389,"src":"1398:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":3399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1406:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1398:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":3402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1416:2:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":3403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1398:20:14","trueExpression":{"hexValue":"2d","id":3401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1410:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":3407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3389,"src":"1455:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":3405,"name":"SignedMathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"1429:21:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMathUpgradeable_$4595_$","typeString":"type(library SignedMathUpgradeable)"}},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":4594,"src":"1429:25:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":3408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1429:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3404,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[3386,3414],"referencedDeclaration":3386,"src":"1420:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1420:42:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3396,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1381:3:14","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1381:16:14","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1381:82:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1374:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3394,"name":"string","nodeType":"ElementaryTypeName","src":"1374:6:14","typeDescriptions":{}}},"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1374:90:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3393,"id":3412,"nodeType":"Return","src":"1367:97:14"}]},"documentation":{"id":3387,"nodeType":"StructuredDocumentation","src":"1193:89:14","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":3414,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1296:8:14","nodeType":"FunctionDefinition","parameters":{"id":3390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3389,"mutability":"mutable","name":"value","nameLocation":"1312:5:14","nodeType":"VariableDeclaration","scope":3414,"src":"1305:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3388,"name":"int256","nodeType":"ElementaryTypeName","src":"1305:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1304:14:14"},"returnParameters":{"id":3393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3414,"src":"1342:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3391,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1341:15:14"},"scope":3556,"src":"1287:184:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3433,"nodeType":"Block","src":"1650:111:14","statements":[{"id":3432,"nodeType":"UncheckedBlock","src":"1660:95:14","statements":[{"expression":{"arguments":[{"id":3423,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3417,"src":"1703:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3426,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3417,"src":"1733:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3424,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"1710:15:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$4490_$","typeString":"type(library MathUpgradeable)"}},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":4450,"src":"1710:22:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1710:29:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1710:33:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3422,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3434,3510,3530],"referencedDeclaration":3510,"src":"1691:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1691:53:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3421,"id":3431,"nodeType":"Return","src":"1684:60:14"}]}]},"documentation":{"id":3415,"nodeType":"StructuredDocumentation","src":"1477:94:14","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":3434,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1585:11:14","nodeType":"FunctionDefinition","parameters":{"id":3418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3417,"mutability":"mutable","name":"value","nameLocation":"1605:5:14","nodeType":"VariableDeclaration","scope":3434,"src":"1597:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3416,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:15:14"},"returnParameters":{"id":3421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3420,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3434,"src":"1635:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3419,"name":"string","nodeType":"ElementaryTypeName","src":"1635:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1634:15:14"},"scope":3556,"src":"1576:185:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3509,"nodeType":"Block","src":"1974:347:14","statements":[{"assignments":[3445],"declarations":[{"constant":false,"id":3445,"mutability":"mutable","name":"buffer","nameLocation":"1997:6:14","nodeType":"VariableDeclaration","scope":3509,"src":"1984:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3444,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3454,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3449,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3439,"src":"2020:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2029:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2016:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2006:9:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3446,"name":"bytes","nodeType":"ElementaryTypeName","src":"2010:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2006:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1984:47:14"},{"expression":{"id":3459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3455,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3445,"src":"2041:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3457,"indexExpression":{"hexValue":"30","id":3456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2041:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2053:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2041:15:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3460,"nodeType":"ExpressionStatement","src":"2041:15:14"},{"expression":{"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3461,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3445,"src":"2066:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3463,"indexExpression":{"hexValue":"31","id":3462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2073:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2066:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":3464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2066:15:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3466,"nodeType":"ExpressionStatement","src":"2066:15:14"},{"body":{"id":3495,"nodeType":"Block","src":"2136:83:14","statements":[{"expression":{"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3481,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3445,"src":"2150:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3483,"indexExpression":{"id":3482,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"2157:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2150:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3484,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"2162:8:14","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3488,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3437,"src":"2171:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:3:14","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2171:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2162:21:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2150:33:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3490,"nodeType":"ExpressionStatement","src":"2150:33:14"},{"expression":{"id":3493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3491,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3437,"src":"2197:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2207:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2197:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3494,"nodeType":"ExpressionStatement","src":"2197:11:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3475,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"2124:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3496,"initializationExpression":{"assignments":[3468],"declarations":[{"constant":false,"id":3468,"mutability":"mutable","name":"i","nameLocation":"2104:1:14","nodeType":"VariableDeclaration","scope":3496,"src":"2096:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3467,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3474,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2108:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3470,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3439,"src":"2112:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2108:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2108:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2096:26:14"},"loopExpression":{"expression":{"id":3479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2131:3:14","subExpression":{"id":3478,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"2133:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3480,"nodeType":"ExpressionStatement","src":"2131:3:14"},"nodeType":"ForStatement","src":"2091:128:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3498,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3437,"src":"2236:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":3501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2248:34:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":3497,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2228:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2228:55:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3503,"nodeType":"ExpressionStatement","src":"2228:55:14"},{"expression":{"arguments":[{"id":3506,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3445,"src":"2307:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3504,"name":"string","nodeType":"ElementaryTypeName","src":"2300:6:14","typeDescriptions":{}}},"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2300:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3443,"id":3508,"nodeType":"Return","src":"2293:21:14"}]},"documentation":{"id":3435,"nodeType":"StructuredDocumentation","src":"1767:112:14","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3510,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1893:11:14","nodeType":"FunctionDefinition","parameters":{"id":3440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3437,"mutability":"mutable","name":"value","nameLocation":"1913:5:14","nodeType":"VariableDeclaration","scope":3510,"src":"1905:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3436,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3439,"mutability":"mutable","name":"length","nameLocation":"1928:6:14","nodeType":"VariableDeclaration","scope":3510,"src":"1920:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3438,"name":"uint256","nodeType":"ElementaryTypeName","src":"1920:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:31:14"},"returnParameters":{"id":3443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3510,"src":"1959:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3441,"name":"string","nodeType":"ElementaryTypeName","src":"1959:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1958:15:14"},"scope":3556,"src":"1884:437:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3529,"nodeType":"Block","src":"2546:76:14","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3523,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3513,"src":"2591:4:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3521,"name":"uint160","nodeType":"ElementaryTypeName","src":"2583:7:14","typeDescriptions":{}}},"id":3524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2583:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3520,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3519,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:14","typeDescriptions":{}}},"id":3525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2575:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3526,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3338,"src":"2599:15:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3518,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3434,3510,3530],"referencedDeclaration":3510,"src":"2563:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2563:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3517,"id":3528,"nodeType":"Return","src":"2556:59:14"}]},"documentation":{"id":3511,"nodeType":"StructuredDocumentation","src":"2327:141:14","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":3530,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2482:11:14","nodeType":"FunctionDefinition","parameters":{"id":3514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3513,"mutability":"mutable","name":"addr","nameLocation":"2502:4:14","nodeType":"VariableDeclaration","scope":3530,"src":"2494:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3512,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:14:14"},"returnParameters":{"id":3517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3516,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3530,"src":"2531:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3515,"name":"string","nodeType":"ElementaryTypeName","src":"2531:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2530:15:14"},"scope":3556,"src":"2473:149:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3554,"nodeType":"Block","src":"2777:66:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3543,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3533,"src":"2810:1:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2804:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3541,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:14","typeDescriptions":{}}},"id":3544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2804:8:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3540,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2794:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2794:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":3549,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3535,"src":"2833:1:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3547,"name":"bytes","nodeType":"ElementaryTypeName","src":"2827:5:14","typeDescriptions":{}}},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2827:8:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3546,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2817:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2794:42:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3539,"id":3553,"nodeType":"Return","src":"2787:49:14"}]},"documentation":{"id":3531,"nodeType":"StructuredDocumentation","src":"2628:66:14","text":" @dev Returns true if the two strings are equal."},"id":3555,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2708:5:14","nodeType":"FunctionDefinition","parameters":{"id":3536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3533,"mutability":"mutable","name":"a","nameLocation":"2728:1:14","nodeType":"VariableDeclaration","scope":3555,"src":"2714:15:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3532,"name":"string","nodeType":"ElementaryTypeName","src":"2714:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3535,"mutability":"mutable","name":"b","nameLocation":"2745:1:14","nodeType":"VariableDeclaration","scope":3555,"src":"2731:15:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3534,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2713:34:14"},"returnParameters":{"id":3539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3538,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3555,"src":"2771:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3537,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:14"},"scope":3556,"src":"2699:144:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3557,"src":"242:2603:14","usedErrors":[]}],"src":"101:2745:14"},"id":14},"contracts/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"contracts/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3263],"ERC165Upgradeable":[3600],"IERC165Upgradeable":[3624],"Initializable":[2979]},"id":3601,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3558,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:15"},{"absolutePath":"contracts/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":3559,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3601,"sourceUnit":3625,"src":"124:34:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":3560,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3601,"sourceUnit":2980,"src":"159:45:15","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3562,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":2979,"src":"822:13:15"},"id":3563,"nodeType":"InheritanceSpecifier","src":"822:13:15"},{"baseName":{"id":3564,"name":"IERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":3624,"src":"837:18:15"},"id":3565,"nodeType":"InheritanceSpecifier","src":"837:18:15"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":3561,"nodeType":"StructuredDocumentation","src":"206:576:15","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":3600,"linearizedBaseContracts":[3600,3624,2979],"name":"ERC165Upgradeable","nameLocation":"801:17:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":3570,"nodeType":"Block","src":"913:2:15","statements":[]},"id":3571,"implemented":true,"kind":"function","modifiers":[{"id":3568,"kind":"modifierInvocation","modifierName":{"id":3567,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"896:16:15"},"nodeType":"ModifierInvocation","src":"896:16:15"}],"name":"__ERC165_init","nameLocation":"871:13:15","nodeType":"FunctionDefinition","parameters":{"id":3566,"nodeType":"ParameterList","parameters":[],"src":"884:2:15"},"returnParameters":{"id":3569,"nodeType":"ParameterList","parameters":[],"src":"913:0:15"},"scope":3600,"src":"862:53:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3576,"nodeType":"Block","src":"982:2:15","statements":[]},"id":3577,"implemented":true,"kind":"function","modifiers":[{"id":3574,"kind":"modifierInvocation","modifierName":{"id":3573,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"965:16:15"},"nodeType":"ModifierInvocation","src":"965:16:15"}],"name":"__ERC165_init_unchained","nameLocation":"930:23:15","nodeType":"FunctionDefinition","parameters":{"id":3572,"nodeType":"ParameterList","parameters":[],"src":"953:2:15"},"returnParameters":{"id":3575,"nodeType":"ParameterList","parameters":[],"src":"982:0:15"},"scope":3600,"src":"921:63:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3623],"body":{"id":3593,"nodeType":"Block","src":"1142:75:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3586,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"1159:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3588,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"1179:18:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$3624_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$3624_$","typeString":"type(contract IERC165Upgradeable)"}],"id":3587,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1174:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1174:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$3624","typeString":"type(contract IERC165Upgradeable)"}},"id":3590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1174:36:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1159:51:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3585,"id":3592,"nodeType":"Return","src":"1152:58:15"}]},"documentation":{"id":3578,"nodeType":"StructuredDocumentation","src":"990:56:15","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3594,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1060:17:15","nodeType":"FunctionDefinition","overrides":{"id":3582,"nodeType":"OverrideSpecifier","overrides":[],"src":"1118:8:15"},"parameters":{"id":3581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3580,"mutability":"mutable","name":"interfaceId","nameLocation":"1085:11:15","nodeType":"VariableDeclaration","scope":3594,"src":"1078:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3579,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1078:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1077:20:15"},"returnParameters":{"id":3585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3584,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3594,"src":"1136:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3583,"name":"bool","nodeType":"ElementaryTypeName","src":"1136:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1135:6:15"},"scope":3600,"src":"1051:166:15","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":3595,"nodeType":"StructuredDocumentation","src":"1223:254:15","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3599,"mutability":"mutable","name":"__gap","nameLocation":"1502:5:15","nodeType":"VariableDeclaration","scope":3600,"src":"1482:25:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3596,"name":"uint256","nodeType":"ElementaryTypeName","src":"1482:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3598,"length":{"hexValue":"3530","id":3597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1490:2:15","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1482:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3601,"src":"783:727:15","usedErrors":[]}],"src":"99:1412:15"},"id":15},"contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[3612]},"id":3613,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3602,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:16"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":3603,"nodeType":"StructuredDocumentation","src":"125:279:16","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3612,"linearizedBaseContracts":[3612],"name":"IERC165","nameLocation":"415:7:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3604,"nodeType":"StructuredDocumentation","src":"429:340:16","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3611,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:16","nodeType":"FunctionDefinition","parameters":{"id":3607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3606,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:16","nodeType":"VariableDeclaration","scope":3611,"src":"801:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3605,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:16"},"returnParameters":{"id":3610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3609,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3611,"src":"844:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3608,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:16"},"scope":3612,"src":"774:76:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3613,"src":"405:447:16","usedErrors":[]}],"src":"100:753:16"},"id":16},"contracts/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"contracts/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[3624]},"id":3625,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3614,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:17"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":3615,"nodeType":"StructuredDocumentation","src":"125:279:17","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3624,"linearizedBaseContracts":[3624],"name":"IERC165Upgradeable","nameLocation":"415:18:17","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3616,"nodeType":"StructuredDocumentation","src":"440:340:17","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3623,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:17","nodeType":"FunctionDefinition","parameters":{"id":3619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3618,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:17","nodeType":"VariableDeclaration","scope":3623,"src":"812:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3617,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:17"},"returnParameters":{"id":3622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3623,"src":"855:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3620,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:17"},"scope":3624,"src":"785:76:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3625,"src":"405:458:17","usedErrors":[]}],"src":"100:764:17"},"id":17},"contracts/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"contracts/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[4490]},"id":4491,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3626,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:18"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":3627,"nodeType":"StructuredDocumentation","src":"128:73:18","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4490,"linearizedBaseContracts":[4490],"name":"MathUpgradeable","nameLocation":"210:15:18","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":3631,"members":[{"id":3628,"name":"Down","nameLocation":"256:4:18","nodeType":"EnumValue","src":"256:4:18"},{"id":3629,"name":"Up","nameLocation":"298:2:18","nodeType":"EnumValue","src":"298:2:18"},{"id":3630,"name":"Zero","nameLocation":"329:4:18","nodeType":"EnumValue","src":"329:4:18"}],"name":"Rounding","nameLocation":"237:8:18","nodeType":"EnumDefinition","src":"232:122:18"},{"body":{"id":3648,"nodeType":"Block","src":"491:37:18","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3641,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"508:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3642,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3636,"src":"512:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3645,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3636,"src":"520:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:18","trueExpression":{"id":3644,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"516:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3640,"id":3647,"nodeType":"Return","src":"501:20:18"}]},"documentation":{"id":3632,"nodeType":"StructuredDocumentation","src":"360:59:18","text":" @dev Returns the largest of two numbers."},"id":3649,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:18","nodeType":"FunctionDefinition","parameters":{"id":3637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3634,"mutability":"mutable","name":"a","nameLocation":"445:1:18","nodeType":"VariableDeclaration","scope":3649,"src":"437:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3633,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3636,"mutability":"mutable","name":"b","nameLocation":"456:1:18","nodeType":"VariableDeclaration","scope":3649,"src":"448:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3635,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:18"},"returnParameters":{"id":3640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3639,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3649,"src":"482:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3638,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:18"},"scope":4490,"src":"424:104:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3666,"nodeType":"Block","src":"666:37:18","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3659,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"683:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3660,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"687:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3663,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"695:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:18","trueExpression":{"id":3662,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"691:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3658,"id":3665,"nodeType":"Return","src":"676:20:18"}]},"documentation":{"id":3650,"nodeType":"StructuredDocumentation","src":"534:60:18","text":" @dev Returns the smallest of two numbers."},"id":3667,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:18","nodeType":"FunctionDefinition","parameters":{"id":3655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3652,"mutability":"mutable","name":"a","nameLocation":"620:1:18","nodeType":"VariableDeclaration","scope":3667,"src":"612:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3651,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3654,"mutability":"mutable","name":"b","nameLocation":"631:1:18","nodeType":"VariableDeclaration","scope":3667,"src":"623:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3653,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:18"},"returnParameters":{"id":3658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3657,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3667,"src":"657:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3656,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:18"},"scope":4490,"src":"599:104:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3689,"nodeType":"Block","src":"887:82:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3677,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"942:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3678,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3672,"src":"946:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3680,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3681,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"952:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3682,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3672,"src":"956:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3684,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3676,"id":3688,"nodeType":"Return","src":"934:28:18"}]},"documentation":{"id":3668,"nodeType":"StructuredDocumentation","src":"709:102:18","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3690,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:18","nodeType":"FunctionDefinition","parameters":{"id":3673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3670,"mutability":"mutable","name":"a","nameLocation":"841:1:18","nodeType":"VariableDeclaration","scope":3690,"src":"833:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3669,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3672,"mutability":"mutable","name":"b","nameLocation":"852:1:18","nodeType":"VariableDeclaration","scope":3690,"src":"844:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3671,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:18"},"returnParameters":{"id":3676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3675,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3690,"src":"878:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3674,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:18"},"scope":4490,"src":"816:153:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3714,"nodeType":"Block","src":"1239:123:18","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3700,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"1327:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3704,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"1341:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3707,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3708,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"1350:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:18","trueExpression":{"hexValue":"30","id":3703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3699,"id":3713,"nodeType":"Return","src":"1320:35:18"}]},"documentation":{"id":3691,"nodeType":"StructuredDocumentation","src":"975:188:18","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":3715,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:18","nodeType":"FunctionDefinition","parameters":{"id":3696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3693,"mutability":"mutable","name":"a","nameLocation":"1193:1:18","nodeType":"VariableDeclaration","scope":3715,"src":"1185:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3692,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3695,"mutability":"mutable","name":"b","nameLocation":"1204:1:18","nodeType":"VariableDeclaration","scope":3715,"src":"1196:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3694,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:18"},"returnParameters":{"id":3699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3715,"src":"1230:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3697,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:18"},"scope":4490,"src":"1168:194:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3837,"nodeType":"Block","src":"1776:3822:18","statements":[{"id":3836,"nodeType":"UncheckedBlock","src":"1786:3806:18","statements":[{"assignments":[3728],"declarations":[{"constant":false,"id":3728,"mutability":"mutable","name":"prod0","nameLocation":"2115:5:18","nodeType":"VariableDeclaration","scope":3836,"src":"2107:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3727,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3729,"nodeType":"VariableDeclarationStatement","src":"2107:13:18"},{"assignments":[3731],"declarations":[{"constant":false,"id":3731,"mutability":"mutable","name":"prod1","nameLocation":"2187:5:18","nodeType":"VariableDeclaration","scope":3836,"src":"2179:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3730,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3732,"nodeType":"VariableDeclarationStatement","src":"2179:13:18"},{"AST":{"nodeType":"YulBlock","src":"2259:157:18","statements":[{"nodeType":"YulVariableDeclaration","src":"2277:30:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2294:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"2297:1:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2304:1:18","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2300:3:18"},"nodeType":"YulFunctionCall","src":"2300:6:18"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2287:6:18"},"nodeType":"YulFunctionCall","src":"2287:20:18"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2281:2:18","type":""}]},{"nodeType":"YulAssignment","src":"2324:18:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2337:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"2340:1:18"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2333:3:18"},"nodeType":"YulFunctionCall","src":"2333:9:18"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2324:5:18"}]},{"nodeType":"YulAssignment","src":"2359:43:18","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2376:2:18"},{"name":"prod0","nodeType":"YulIdentifier","src":"2380:5:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2372:3:18"},"nodeType":"YulFunctionCall","src":"2372:14:18"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2391:2:18"},{"name":"prod0","nodeType":"YulIdentifier","src":"2395:5:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2388:2:18"},"nodeType":"YulFunctionCall","src":"2388:13:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2368:3:18"},"nodeType":"YulFunctionCall","src":"2368:34:18"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2359:5:18"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3728,"isOffset":false,"isSlot":false,"src":"2324:5:18","valueSize":1},{"declaration":3728,"isOffset":false,"isSlot":false,"src":"2380:5:18","valueSize":1},{"declaration":3728,"isOffset":false,"isSlot":false,"src":"2395:5:18","valueSize":1},{"declaration":3731,"isOffset":false,"isSlot":false,"src":"2359:5:18","valueSize":1},{"declaration":3718,"isOffset":false,"isSlot":false,"src":"2294:1:18","valueSize":1},{"declaration":3718,"isOffset":false,"isSlot":false,"src":"2337:1:18","valueSize":1},{"declaration":3720,"isOffset":false,"isSlot":false,"src":"2297:1:18","valueSize":1},{"declaration":3720,"isOffset":false,"isSlot":false,"src":"2340:1:18","valueSize":1}],"id":3733,"nodeType":"InlineAssembly","src":"2250:166:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3734,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3731,"src":"2497:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2497:10:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3742,"nodeType":"IfStatement","src":"2493:75:18","trueBody":{"id":3741,"nodeType":"Block","src":"2509:59:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3737,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"2534:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3738,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"2542:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2534:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3726,"id":3740,"nodeType":"Return","src":"2527:26:18"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3744,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"2678:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3745,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3731,"src":"2692:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2678:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":3747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2699:23:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":3743,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2670:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2670:53:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3749,"nodeType":"ExpressionStatement","src":"2670:53:18"},{"assignments":[3751],"declarations":[{"constant":false,"id":3751,"mutability":"mutable","name":"remainder","nameLocation":"2987:9:18","nodeType":"VariableDeclaration","scope":3836,"src":"2979:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3750,"name":"uint256","nodeType":"ElementaryTypeName","src":"2979:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3752,"nodeType":"VariableDeclarationStatement","src":"2979:17:18"},{"AST":{"nodeType":"YulBlock","src":"3019:291:18","statements":[{"nodeType":"YulAssignment","src":"3088:38:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3108:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"3111:1:18"},{"name":"denominator","nodeType":"YulIdentifier","src":"3114:11:18"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3101:6:18"},"nodeType":"YulFunctionCall","src":"3101:25:18"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3088:9:18"}]},{"nodeType":"YulAssignment","src":"3208:41:18","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3221:5:18"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3231:9:18"},{"name":"prod0","nodeType":"YulIdentifier","src":"3242:5:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3228:2:18"},"nodeType":"YulFunctionCall","src":"3228:20:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3217:3:18"},"nodeType":"YulFunctionCall","src":"3217:32:18"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3208:5:18"}]},{"nodeType":"YulAssignment","src":"3266:30:18","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3279:5:18"},{"name":"remainder","nodeType":"YulIdentifier","src":"3286:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3275:3:18"},"nodeType":"YulFunctionCall","src":"3275:21:18"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3266:5:18"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3722,"isOffset":false,"isSlot":false,"src":"3114:11:18","valueSize":1},{"declaration":3728,"isOffset":false,"isSlot":false,"src":"3242:5:18","valueSize":1},{"declaration":3728,"isOffset":false,"isSlot":false,"src":"3266:5:18","valueSize":1},{"declaration":3728,"isOffset":false,"isSlot":false,"src":"3279:5:18","valueSize":1},{"declaration":3731,"isOffset":false,"isSlot":false,"src":"3208:5:18","valueSize":1},{"declaration":3731,"isOffset":false,"isSlot":false,"src":"3221:5:18","valueSize":1},{"declaration":3751,"isOffset":false,"isSlot":false,"src":"3088:9:18","valueSize":1},{"declaration":3751,"isOffset":false,"isSlot":false,"src":"3231:9:18","valueSize":1},{"declaration":3751,"isOffset":false,"isSlot":false,"src":"3286:9:18","valueSize":1},{"declaration":3718,"isOffset":false,"isSlot":false,"src":"3108:1:18","valueSize":1},{"declaration":3720,"isOffset":false,"isSlot":false,"src":"3111:1:18","valueSize":1}],"id":3753,"nodeType":"InlineAssembly","src":"3010:300:18"},{"assignments":[3755],"declarations":[{"constant":false,"id":3755,"mutability":"mutable","name":"twos","nameLocation":"3625:4:18","nodeType":"VariableDeclaration","scope":3836,"src":"3617:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3754,"name":"uint256","nodeType":"ElementaryTypeName","src":"3617:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3763,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3756,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"3632:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3647:12:18","subExpression":{"id":3757,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"3648:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3662:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3647:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3761,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3646:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3632:32:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3617:47:18"},{"AST":{"nodeType":"YulBlock","src":"3687:362:18","statements":[{"nodeType":"YulAssignment","src":"3752:37:18","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3771:11:18"},{"name":"twos","nodeType":"YulIdentifier","src":"3784:4:18"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3767:3:18"},"nodeType":"YulFunctionCall","src":"3767:22:18"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3752:11:18"}]},{"nodeType":"YulAssignment","src":"3856:25:18","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3869:5:18"},{"name":"twos","nodeType":"YulIdentifier","src":"3876:4:18"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3865:3:18"},"nodeType":"YulFunctionCall","src":"3865:16:18"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3856:5:18"}]},{"nodeType":"YulAssignment","src":"3996:39:18","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4016:1:18","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4019:4:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4012:3:18"},"nodeType":"YulFunctionCall","src":"4012:12:18"},{"name":"twos","nodeType":"YulIdentifier","src":"4026:4:18"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4008:3:18"},"nodeType":"YulFunctionCall","src":"4008:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"4033:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4004:3:18"},"nodeType":"YulFunctionCall","src":"4004:31:18"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3996:4:18"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3722,"isOffset":false,"isSlot":false,"src":"3752:11:18","valueSize":1},{"declaration":3722,"isOffset":false,"isSlot":false,"src":"3771:11:18","valueSize":1},{"declaration":3728,"isOffset":false,"isSlot":false,"src":"3856:5:18","valueSize":1},{"declaration":3728,"isOffset":false,"isSlot":false,"src":"3869:5:18","valueSize":1},{"declaration":3755,"isOffset":false,"isSlot":false,"src":"3784:4:18","valueSize":1},{"declaration":3755,"isOffset":false,"isSlot":false,"src":"3876:4:18","valueSize":1},{"declaration":3755,"isOffset":false,"isSlot":false,"src":"3996:4:18","valueSize":1},{"declaration":3755,"isOffset":false,"isSlot":false,"src":"4019:4:18","valueSize":1},{"declaration":3755,"isOffset":false,"isSlot":false,"src":"4026:4:18","valueSize":1}],"id":3764,"nodeType":"InlineAssembly","src":"3678:371:18"},{"expression":{"id":3769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3765,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"4115:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3766,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3731,"src":"4124:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3767,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"4132:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4124:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4115:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3770,"nodeType":"ExpressionStatement","src":"4115:21:18"},{"assignments":[3772],"declarations":[{"constant":false,"id":3772,"mutability":"mutable","name":"inverse","nameLocation":"4462:7:18","nodeType":"VariableDeclaration","scope":3836,"src":"4454:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3771,"name":"uint256","nodeType":"ElementaryTypeName","src":"4454:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3779,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4473:1:18","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3774,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"4477:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4473:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3776,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4472:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4492:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4472:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4454:39:18"},{"expression":{"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3780,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"4710:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4721:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3782,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"4725:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3783,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"4739:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4725:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4721:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4710:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3787,"nodeType":"ExpressionStatement","src":"4710:36:18"},{"expression":{"id":3794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3788,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"4779:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4790:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3790,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"4794:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3791,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"4808:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4794:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4790:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4779:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3795,"nodeType":"ExpressionStatement","src":"4779:36:18"},{"expression":{"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3796,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"4849:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4860:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3798,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"4864:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3799,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"4878:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4864:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4860:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4849:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3803,"nodeType":"ExpressionStatement","src":"4849:36:18"},{"expression":{"id":3810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3804,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"4919:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4930:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3806,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"4934:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3807,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"4948:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4934:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4930:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4919:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3811,"nodeType":"ExpressionStatement","src":"4919:36:18"},{"expression":{"id":3818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3812,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"4989:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5000:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3814,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"5004:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3815,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"5018:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5004:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5000:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4989:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3819,"nodeType":"ExpressionStatement","src":"4989:36:18"},{"expression":{"id":3826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3820,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"5060:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5071:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3822,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"5075:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3823,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"5089:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5075:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5071:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5060:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3827,"nodeType":"ExpressionStatement","src":"5060:36:18"},{"expression":{"id":3832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3828,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"5530:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3829,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"5539:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3830,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"5547:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5539:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5530:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3833,"nodeType":"ExpressionStatement","src":"5530:24:18"},{"expression":{"id":3834,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"5575:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3726,"id":3835,"nodeType":"Return","src":"5568:13:18"}]}]},"documentation":{"id":3716,"nodeType":"StructuredDocumentation","src":"1368:305:18","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":3838,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:18","nodeType":"FunctionDefinition","parameters":{"id":3723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3718,"mutability":"mutable","name":"x","nameLocation":"1702:1:18","nodeType":"VariableDeclaration","scope":3838,"src":"1694:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3717,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3720,"mutability":"mutable","name":"y","nameLocation":"1713:1:18","nodeType":"VariableDeclaration","scope":3838,"src":"1705:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3719,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3722,"mutability":"mutable","name":"denominator","nameLocation":"1724:11:18","nodeType":"VariableDeclaration","scope":3838,"src":"1716:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3721,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:43:18"},"returnParameters":{"id":3726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3725,"mutability":"mutable","name":"result","nameLocation":"1768:6:18","nodeType":"VariableDeclaration","scope":3838,"src":"1760:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3724,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1759:16:18"},"scope":4490,"src":"1678:3920:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3881,"nodeType":"Block","src":"5840:189:18","statements":[{"assignments":[3854],"declarations":[{"constant":false,"id":3854,"mutability":"mutable","name":"result","nameLocation":"5858:6:18","nodeType":"VariableDeclaration","scope":3881,"src":"5850:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3853,"name":"uint256","nodeType":"ElementaryTypeName","src":"5850:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3860,"initialValue":{"arguments":[{"id":3856,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3841,"src":"5874:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3857,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3843,"src":"5877:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3858,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3845,"src":"5880:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3855,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3838,3882],"referencedDeclaration":3838,"src":"5867:6:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5867:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5850:42:18"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"},"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3861,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3848,"src":"5906:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3862,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3631,"src":"5918:8:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3631_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3863,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3629,"src":"5918:11:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"src":"5906:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3866,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3841,"src":"5940:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3867,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3843,"src":"5943:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3868,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3845,"src":"5946:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3865,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5933:6:18","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5933:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5961:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5933:29:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5906:56:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3878,"nodeType":"IfStatement","src":"5902:98:18","trueBody":{"id":3877,"nodeType":"Block","src":"5964:36:18","statements":[{"expression":{"id":3875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3873,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"5978:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5988:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5978:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3876,"nodeType":"ExpressionStatement","src":"5978:11:18"}]}},{"expression":{"id":3879,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"6016:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3852,"id":3880,"nodeType":"Return","src":"6009:13:18"}]},"documentation":{"id":3839,"nodeType":"StructuredDocumentation","src":"5604:121:18","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3882,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5739:6:18","nodeType":"FunctionDefinition","parameters":{"id":3849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3841,"mutability":"mutable","name":"x","nameLocation":"5754:1:18","nodeType":"VariableDeclaration","scope":3882,"src":"5746:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3840,"name":"uint256","nodeType":"ElementaryTypeName","src":"5746:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3843,"mutability":"mutable","name":"y","nameLocation":"5765:1:18","nodeType":"VariableDeclaration","scope":3882,"src":"5757:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3842,"name":"uint256","nodeType":"ElementaryTypeName","src":"5757:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3845,"mutability":"mutable","name":"denominator","nameLocation":"5776:11:18","nodeType":"VariableDeclaration","scope":3882,"src":"5768:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3844,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3848,"mutability":"mutable","name":"rounding","nameLocation":"5798:8:18","nodeType":"VariableDeclaration","scope":3882,"src":"5789:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3847,"nodeType":"UserDefinedTypeName","pathNode":{"id":3846,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3631,"src":"5789:8:18"},"referencedDeclaration":3631,"src":"5789:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"5745:62:18"},"returnParameters":{"id":3852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3882,"src":"5831:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3850,"name":"uint256","nodeType":"ElementaryTypeName","src":"5831:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5830:9:18"},"scope":4490,"src":"5730:299:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3993,"nodeType":"Block","src":"6305:1585:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3890,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3885,"src":"6319:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6324:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6319:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3896,"nodeType":"IfStatement","src":"6315:45:18","trueBody":{"id":3895,"nodeType":"Block","src":"6327:33:18","statements":[{"expression":{"hexValue":"30","id":3893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6348:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3889,"id":3894,"nodeType":"Return","src":"6341:8:18"}]}},{"assignments":[3898],"declarations":[{"constant":false,"id":3898,"mutability":"mutable","name":"result","nameLocation":"7047:6:18","nodeType":"VariableDeclaration","scope":3993,"src":"7039:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3897,"name":"uint256","nodeType":"ElementaryTypeName","src":"7039:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3907,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7056:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3901,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3885,"src":"7067:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3900,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4162,4198],"referencedDeclaration":4162,"src":"7062:4:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7062:7:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7073:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7062:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3905,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7061:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7056:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7039:36:18"},{"id":3992,"nodeType":"UncheckedBlock","src":"7476:408:18","statements":[{"expression":{"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3908,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7500:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3909,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7510:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3910,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3885,"src":"7519:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3911,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7523:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7519:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7510:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3914,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7509:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7534:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7509:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7500:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3918,"nodeType":"ExpressionStatement","src":"7500:35:18"},{"expression":{"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3919,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7549:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3920,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7559:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3921,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3885,"src":"7568:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3922,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7572:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7568:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7559:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3925,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7558:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7583:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7558:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7549:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3929,"nodeType":"ExpressionStatement","src":"7549:35:18"},{"expression":{"id":3939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3930,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7598:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3931,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7608:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3932,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3885,"src":"7617:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3933,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7621:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7617:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7608:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3936,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7607:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7632:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7607:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7598:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3940,"nodeType":"ExpressionStatement","src":"7598:35:18"},{"expression":{"id":3950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3941,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7647:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3942,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7657:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3943,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3885,"src":"7666:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3944,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7670:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7666:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7657:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3947,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7656:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7681:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7656:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7647:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3951,"nodeType":"ExpressionStatement","src":"7647:35:18"},{"expression":{"id":3961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3952,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7696:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3953,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7706:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3954,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3885,"src":"7715:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3955,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7719:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7715:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7706:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3958,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7705:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7730:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7705:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7696:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3962,"nodeType":"ExpressionStatement","src":"7696:35:18"},{"expression":{"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3963,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7745:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3964,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7755:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3965,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3885,"src":"7764:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3966,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7768:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7764:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7755:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3969,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7754:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7779:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7754:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7745:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3973,"nodeType":"ExpressionStatement","src":"7745:35:18"},{"expression":{"id":3983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3974,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7794:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3975,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7804:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3976,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3885,"src":"7813:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3977,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7817:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7813:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7804:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3980,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7803:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7828:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7803:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7794:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3984,"nodeType":"ExpressionStatement","src":"7794:35:18"},{"expression":{"arguments":[{"id":3986,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7854:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3987,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3885,"src":"7862:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3988,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7866:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7862:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3985,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3667,"src":"7850:3:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7850:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3889,"id":3991,"nodeType":"Return","src":"7843:30:18"}]}]},"documentation":{"id":3883,"nodeType":"StructuredDocumentation","src":"6035:208:18","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3994,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6257:4:18","nodeType":"FunctionDefinition","parameters":{"id":3886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3885,"mutability":"mutable","name":"a","nameLocation":"6270:1:18","nodeType":"VariableDeclaration","scope":3994,"src":"6262:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3884,"name":"uint256","nodeType":"ElementaryTypeName","src":"6262:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6261:11:18"},"returnParameters":{"id":3889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3888,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3994,"src":"6296:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3887,"name":"uint256","nodeType":"ElementaryTypeName","src":"6296:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6295:9:18"},"scope":4490,"src":"6248:1642:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4029,"nodeType":"Block","src":"8066:161:18","statements":[{"id":4028,"nodeType":"UncheckedBlock","src":"8076:145:18","statements":[{"assignments":[4006],"declarations":[{"constant":false,"id":4006,"mutability":"mutable","name":"result","nameLocation":"8108:6:18","nodeType":"VariableDeclaration","scope":4028,"src":"8100:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4005,"name":"uint256","nodeType":"ElementaryTypeName","src":"8100:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4010,"initialValue":{"arguments":[{"id":4008,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3997,"src":"8122:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4007,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3994,4030],"referencedDeclaration":3994,"src":"8117:4:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8117:7:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8100:24:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4011,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4006,"src":"8145:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"},"id":4015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4012,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"8155:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4013,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3631,"src":"8167:8:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3631_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3629,"src":"8167:11:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"src":"8155:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4016,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4006,"src":"8182:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4017,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4006,"src":"8191:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8182:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4019,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3997,"src":"8200:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8182:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8155:46:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8208:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8155:54:18","trueExpression":{"hexValue":"31","id":4022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8204:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4025,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8154:56:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8145:65:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4004,"id":4027,"nodeType":"Return","src":"8138:72:18"}]}]},"documentation":{"id":3995,"nodeType":"StructuredDocumentation","src":"7896:89:18","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":4030,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"7999:4:18","nodeType":"FunctionDefinition","parameters":{"id":4001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3997,"mutability":"mutable","name":"a","nameLocation":"8012:1:18","nodeType":"VariableDeclaration","scope":4030,"src":"8004:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3996,"name":"uint256","nodeType":"ElementaryTypeName","src":"8004:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4000,"mutability":"mutable","name":"rounding","nameLocation":"8024:8:18","nodeType":"VariableDeclaration","scope":4030,"src":"8015:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3999,"nodeType":"UserDefinedTypeName","pathNode":{"id":3998,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3631,"src":"8015:8:18"},"referencedDeclaration":3631,"src":"8015:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8003:30:18"},"returnParameters":{"id":4004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4003,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4030,"src":"8057:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4002,"name":"uint256","nodeType":"ElementaryTypeName","src":"8057:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8056:9:18"},"scope":4490,"src":"7990:237:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4161,"nodeType":"Block","src":"8412:922:18","statements":[{"assignments":[4039],"declarations":[{"constant":false,"id":4039,"mutability":"mutable","name":"result","nameLocation":"8430:6:18","nodeType":"VariableDeclaration","scope":4161,"src":"8422:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4038,"name":"uint256","nodeType":"ElementaryTypeName","src":"8422:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4041,"initialValue":{"hexValue":"30","id":4040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8439:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8422:18:18"},{"id":4158,"nodeType":"UncheckedBlock","src":"8450:855:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4042,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"8478:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8487:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8478:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8493:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8478:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4056,"nodeType":"IfStatement","src":"8474:99:18","trueBody":{"id":4055,"nodeType":"Block","src":"8496:77:18","statements":[{"expression":{"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4047,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"8514:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8524:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8514:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4050,"nodeType":"ExpressionStatement","src":"8514:13:18"},{"expression":{"id":4053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4051,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"8545:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":4052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8555:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8545:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4054,"nodeType":"ExpressionStatement","src":"8545:13:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4057,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"8590:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8599:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8590:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8604:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8590:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4071,"nodeType":"IfStatement","src":"8586:96:18","trueBody":{"id":4070,"nodeType":"Block","src":"8607:75:18","statements":[{"expression":{"id":4064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4062,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"8625:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8635:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8625:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4065,"nodeType":"ExpressionStatement","src":"8625:12:18"},{"expression":{"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4066,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"8655:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8665:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8655:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4069,"nodeType":"ExpressionStatement","src":"8655:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4072,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"8699:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8708:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8699:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8713:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8699:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4086,"nodeType":"IfStatement","src":"8695:96:18","trueBody":{"id":4085,"nodeType":"Block","src":"8716:75:18","statements":[{"expression":{"id":4079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4077,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"8734:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8744:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8734:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4080,"nodeType":"ExpressionStatement","src":"8734:12:18"},{"expression":{"id":4083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4081,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"8764:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8774:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8764:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4084,"nodeType":"ExpressionStatement","src":"8764:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4087,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"8808:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8808:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8822:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8808:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4101,"nodeType":"IfStatement","src":"8804:96:18","trueBody":{"id":4100,"nodeType":"Block","src":"8825:75:18","statements":[{"expression":{"id":4094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4092,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"8843:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8853:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8843:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4095,"nodeType":"ExpressionStatement","src":"8843:12:18"},{"expression":{"id":4098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4096,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"8873:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8883:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8873:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4099,"nodeType":"ExpressionStatement","src":"8873:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4102,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"8917:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8926:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8917:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8930:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8917:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4116,"nodeType":"IfStatement","src":"8913:93:18","trueBody":{"id":4115,"nodeType":"Block","src":"8933:73:18","statements":[{"expression":{"id":4109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4107,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"8951:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8961:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8951:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4110,"nodeType":"ExpressionStatement","src":"8951:11:18"},{"expression":{"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4111,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"8980:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8980:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4114,"nodeType":"ExpressionStatement","src":"8980:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4117,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"9023:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":4118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9032:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9023:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9036:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9023:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4131,"nodeType":"IfStatement","src":"9019:93:18","trueBody":{"id":4130,"nodeType":"Block","src":"9039:73:18","statements":[{"expression":{"id":4124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4122,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"9057:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9067:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9057:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4125,"nodeType":"ExpressionStatement","src":"9057:11:18"},{"expression":{"id":4128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4126,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"9086:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9096:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9086:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4129,"nodeType":"ExpressionStatement","src":"9086:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4132,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"9129:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":4133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9138:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9129:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9142:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9129:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4146,"nodeType":"IfStatement","src":"9125:93:18","trueBody":{"id":4145,"nodeType":"Block","src":"9145:73:18","statements":[{"expression":{"id":4139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4137,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"9163:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":4138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9173:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9163:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4140,"nodeType":"ExpressionStatement","src":"9163:11:18"},{"expression":{"id":4143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4141,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"9192:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9202:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9192:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4144,"nodeType":"ExpressionStatement","src":"9192:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4147,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"9235:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9244:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9235:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9248:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9235:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4157,"nodeType":"IfStatement","src":"9231:64:18","trueBody":{"id":4156,"nodeType":"Block","src":"9251:44:18","statements":[{"expression":{"id":4154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4152,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"9269:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9279:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9269:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4155,"nodeType":"ExpressionStatement","src":"9269:11:18"}]}}]},{"expression":{"id":4159,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"9321:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4037,"id":4160,"nodeType":"Return","src":"9314:13:18"}]},"documentation":{"id":4031,"nodeType":"StructuredDocumentation","src":"8233:113:18","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4162,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8360:4:18","nodeType":"FunctionDefinition","parameters":{"id":4034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4033,"mutability":"mutable","name":"value","nameLocation":"8373:5:18","nodeType":"VariableDeclaration","scope":4162,"src":"8365:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4032,"name":"uint256","nodeType":"ElementaryTypeName","src":"8365:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8364:15:18"},"returnParameters":{"id":4037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4036,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4162,"src":"8403:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4035,"name":"uint256","nodeType":"ElementaryTypeName","src":"8403:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8402:9:18"},"scope":4490,"src":"8351:983:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4197,"nodeType":"Block","src":"9567:165:18","statements":[{"id":4196,"nodeType":"UncheckedBlock","src":"9577:149:18","statements":[{"assignments":[4174],"declarations":[{"constant":false,"id":4174,"mutability":"mutable","name":"result","nameLocation":"9609:6:18","nodeType":"VariableDeclaration","scope":4196,"src":"9601:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4173,"name":"uint256","nodeType":"ElementaryTypeName","src":"9601:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4178,"initialValue":{"arguments":[{"id":4176,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4165,"src":"9623:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4175,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4162,4198],"referencedDeclaration":4162,"src":"9618:4:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9618:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9601:28:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4179,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"9650:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"},"id":4183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4180,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"9660:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4181,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3631,"src":"9672:8:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3631_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4182,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3629,"src":"9672:11:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"src":"9660:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9687:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4185,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"9692:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9687:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4187,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4165,"src":"9701:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9687:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9660:46:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9713:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9660:54:18","trueExpression":{"hexValue":"31","id":4190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9709:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4193,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9659:56:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9650:65:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4172,"id":4195,"nodeType":"Return","src":"9643:72:18"}]}]},"documentation":{"id":4163,"nodeType":"StructuredDocumentation","src":"9340:142:18","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4198,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9496:4:18","nodeType":"FunctionDefinition","parameters":{"id":4169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4165,"mutability":"mutable","name":"value","nameLocation":"9509:5:18","nodeType":"VariableDeclaration","scope":4198,"src":"9501:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4164,"name":"uint256","nodeType":"ElementaryTypeName","src":"9501:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4168,"mutability":"mutable","name":"rounding","nameLocation":"9525:8:18","nodeType":"VariableDeclaration","scope":4198,"src":"9516:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4167,"nodeType":"UserDefinedTypeName","pathNode":{"id":4166,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3631,"src":"9516:8:18"},"referencedDeclaration":3631,"src":"9516:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9500:34:18"},"returnParameters":{"id":4172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4198,"src":"9558:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4170,"name":"uint256","nodeType":"ElementaryTypeName","src":"9558:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9557:9:18"},"scope":4490,"src":"9487:245:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4326,"nodeType":"Block","src":"9919:854:18","statements":[{"assignments":[4207],"declarations":[{"constant":false,"id":4207,"mutability":"mutable","name":"result","nameLocation":"9937:6:18","nodeType":"VariableDeclaration","scope":4326,"src":"9929:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4206,"name":"uint256","nodeType":"ElementaryTypeName","src":"9929:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4209,"initialValue":{"hexValue":"30","id":4208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9946:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9929:18:18"},{"id":4323,"nodeType":"UncheckedBlock","src":"9957:787:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"9985:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9994:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10000:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"9994:8:18","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"9985:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4226,"nodeType":"IfStatement","src":"9981:103:18","trueBody":{"id":4225,"nodeType":"Block","src":"10004:80:18","statements":[{"expression":{"id":4219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4215,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"10022:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10031:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10037:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10031:8:18","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10022:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4220,"nodeType":"ExpressionStatement","src":"10022:17:18"},{"expression":{"id":4223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4221,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"10057:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10067:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10057:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4224,"nodeType":"ExpressionStatement","src":"10057:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4227,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"10101:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10110:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10116:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10110:8:18","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10101:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4243,"nodeType":"IfStatement","src":"10097:103:18","trueBody":{"id":4242,"nodeType":"Block","src":"10120:80:18","statements":[{"expression":{"id":4236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4232,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"10138:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10147:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10153:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10147:8:18","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10138:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4237,"nodeType":"ExpressionStatement","src":"10138:17:18"},{"expression":{"id":4240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4238,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"10173:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10183:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4241,"nodeType":"ExpressionStatement","src":"10173:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4244,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"10217:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4247,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10226:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10232:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10226:8:18","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10217:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4260,"nodeType":"IfStatement","src":"10213:103:18","trueBody":{"id":4259,"nodeType":"Block","src":"10236:80:18","statements":[{"expression":{"id":4253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4249,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"10254:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10263:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10269:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10263:8:18","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10254:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4254,"nodeType":"ExpressionStatement","src":"10254:17:18"},{"expression":{"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4255,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"10289:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10299:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10289:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4258,"nodeType":"ExpressionStatement","src":"10289:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4261,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"10333:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10342:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10348:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10342:7:18","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10333:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4277,"nodeType":"IfStatement","src":"10329:100:18","trueBody":{"id":4276,"nodeType":"Block","src":"10351:78:18","statements":[{"expression":{"id":4270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4266,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"10369:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10378:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10384:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10378:7:18","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10369:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4271,"nodeType":"ExpressionStatement","src":"10369:16:18"},{"expression":{"id":4274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4272,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"10403:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10413:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10403:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4275,"nodeType":"ExpressionStatement","src":"10403:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4278,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"10446:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4281,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10455:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10461:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10455:7:18","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10446:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4294,"nodeType":"IfStatement","src":"10442:100:18","trueBody":{"id":4293,"nodeType":"Block","src":"10464:78:18","statements":[{"expression":{"id":4287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4283,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"10482:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10491:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10497:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10491:7:18","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10482:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4288,"nodeType":"ExpressionStatement","src":"10482:16:18"},{"expression":{"id":4291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4289,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"10516:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10526:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10516:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4292,"nodeType":"ExpressionStatement","src":"10516:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4295,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"10559:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4298,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10568:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10574:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10568:7:18","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10559:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4311,"nodeType":"IfStatement","src":"10555:100:18","trueBody":{"id":4310,"nodeType":"Block","src":"10577:78:18","statements":[{"expression":{"id":4304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4300,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"10595:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10604:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10610:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10604:7:18","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10595:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4305,"nodeType":"ExpressionStatement","src":"10595:16:18"},{"expression":{"id":4308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4306,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"10629:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10639:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10629:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4309,"nodeType":"ExpressionStatement","src":"10629:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4312,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"10672:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4315,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10681:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10687:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10681:7:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10672:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4322,"nodeType":"IfStatement","src":"10668:66:18","trueBody":{"id":4321,"nodeType":"Block","src":"10690:44:18","statements":[{"expression":{"id":4319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4317,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"10708:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10718:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10708:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4320,"nodeType":"ExpressionStatement","src":"10708:11:18"}]}}]},{"expression":{"id":4324,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"10760:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4205,"id":4325,"nodeType":"Return","src":"10753:13:18"}]},"documentation":{"id":4199,"nodeType":"StructuredDocumentation","src":"9738:114:18","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4327,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9866:5:18","nodeType":"FunctionDefinition","parameters":{"id":4202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4201,"mutability":"mutable","name":"value","nameLocation":"9880:5:18","nodeType":"VariableDeclaration","scope":4327,"src":"9872:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4200,"name":"uint256","nodeType":"ElementaryTypeName","src":"9872:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9871:15:18"},"returnParameters":{"id":4205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4327,"src":"9910:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4203,"name":"uint256","nodeType":"ElementaryTypeName","src":"9910:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9909:9:18"},"scope":4490,"src":"9857:916:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4362,"nodeType":"Block","src":"11008:167:18","statements":[{"id":4361,"nodeType":"UncheckedBlock","src":"11018:151:18","statements":[{"assignments":[4339],"declarations":[{"constant":false,"id":4339,"mutability":"mutable","name":"result","nameLocation":"11050:6:18","nodeType":"VariableDeclaration","scope":4361,"src":"11042:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4338,"name":"uint256","nodeType":"ElementaryTypeName","src":"11042:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4343,"initialValue":{"arguments":[{"id":4341,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"11065:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4340,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4327,4363],"referencedDeclaration":4327,"src":"11059:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11059:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11042:29:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4344,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"11092:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"},"id":4348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4345,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4333,"src":"11102:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4346,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3631,"src":"11114:8:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3631_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3629,"src":"11114:11:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"src":"11102:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11129:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4350,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"11135:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11129:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4352,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"11144:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11129:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11102:47:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11102:55:18","trueExpression":{"hexValue":"31","id":4355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11152:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4358,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11101:57:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11092:66:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4337,"id":4360,"nodeType":"Return","src":"11085:73:18"}]}]},"documentation":{"id":4328,"nodeType":"StructuredDocumentation","src":"10779:143:18","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4363,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10936:5:18","nodeType":"FunctionDefinition","parameters":{"id":4334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4330,"mutability":"mutable","name":"value","nameLocation":"10950:5:18","nodeType":"VariableDeclaration","scope":4363,"src":"10942:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4329,"name":"uint256","nodeType":"ElementaryTypeName","src":"10942:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4333,"mutability":"mutable","name":"rounding","nameLocation":"10966:8:18","nodeType":"VariableDeclaration","scope":4363,"src":"10957:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4332,"nodeType":"UserDefinedTypeName","pathNode":{"id":4331,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3631,"src":"10957:8:18"},"referencedDeclaration":3631,"src":"10957:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"10941:34:18"},"returnParameters":{"id":4337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4336,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4363,"src":"10999:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4335,"name":"uint256","nodeType":"ElementaryTypeName","src":"10999:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10998:9:18"},"scope":4490,"src":"10927:248:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4449,"nodeType":"Block","src":"11489:600:18","statements":[{"assignments":[4372],"declarations":[{"constant":false,"id":4372,"mutability":"mutable","name":"result","nameLocation":"11507:6:18","nodeType":"VariableDeclaration","scope":4449,"src":"11499:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4371,"name":"uint256","nodeType":"ElementaryTypeName","src":"11499:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4374,"initialValue":{"hexValue":"30","id":4373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11516:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11499:18:18"},{"id":4446,"nodeType":"UncheckedBlock","src":"11527:533:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4375,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"11555:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11564:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11555:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11570:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11555:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4389,"nodeType":"IfStatement","src":"11551:98:18","trueBody":{"id":4388,"nodeType":"Block","src":"11573:76:18","statements":[{"expression":{"id":4382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4380,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"11591:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11601:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11591:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4383,"nodeType":"ExpressionStatement","src":"11591:13:18"},{"expression":{"id":4386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4384,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"11622:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11632:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11622:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4387,"nodeType":"ExpressionStatement","src":"11622:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4390,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"11666:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11675:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11666:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11680:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11666:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4404,"nodeType":"IfStatement","src":"11662:95:18","trueBody":{"id":4403,"nodeType":"Block","src":"11683:74:18","statements":[{"expression":{"id":4397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4395,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"11701:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11711:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11701:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4398,"nodeType":"ExpressionStatement","src":"11701:12:18"},{"expression":{"id":4401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4399,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"11731:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11741:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11731:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4402,"nodeType":"ExpressionStatement","src":"11731:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4405,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"11774:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11783:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11774:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11788:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11774:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4419,"nodeType":"IfStatement","src":"11770:95:18","trueBody":{"id":4418,"nodeType":"Block","src":"11791:74:18","statements":[{"expression":{"id":4412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4410,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"11809:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11819:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11809:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4413,"nodeType":"ExpressionStatement","src":"11809:12:18"},{"expression":{"id":4416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4414,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"11839:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11849:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11839:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4417,"nodeType":"ExpressionStatement","src":"11839:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4420,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"11882:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11891:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11882:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11896:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11882:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4434,"nodeType":"IfStatement","src":"11878:95:18","trueBody":{"id":4433,"nodeType":"Block","src":"11899:74:18","statements":[{"expression":{"id":4427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4425,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"11917:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11927:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11917:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4428,"nodeType":"ExpressionStatement","src":"11917:12:18"},{"expression":{"id":4431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4429,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"11947:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11947:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4432,"nodeType":"ExpressionStatement","src":"11947:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4435,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"11990:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11999:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11990:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11990:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4445,"nodeType":"IfStatement","src":"11986:64:18","trueBody":{"id":4444,"nodeType":"Block","src":"12006:44:18","statements":[{"expression":{"id":4442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4440,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"12024:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12024:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4443,"nodeType":"ExpressionStatement","src":"12024:11:18"}]}}]},{"expression":{"id":4447,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"12076:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4370,"id":4448,"nodeType":"Return","src":"12069:13:18"}]},"documentation":{"id":4364,"nodeType":"StructuredDocumentation","src":"11181:240:18","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4450,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11435:6:18","nodeType":"FunctionDefinition","parameters":{"id":4367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4366,"mutability":"mutable","name":"value","nameLocation":"11450:5:18","nodeType":"VariableDeclaration","scope":4450,"src":"11442:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4365,"name":"uint256","nodeType":"ElementaryTypeName","src":"11442:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11441:15:18"},"returnParameters":{"id":4370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4369,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4450,"src":"11480:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4368,"name":"uint256","nodeType":"ElementaryTypeName","src":"11480:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11479:9:18"},"scope":4490,"src":"11426:663:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4488,"nodeType":"Block","src":"12326:174:18","statements":[{"id":4487,"nodeType":"UncheckedBlock","src":"12336:158:18","statements":[{"assignments":[4462],"declarations":[{"constant":false,"id":4462,"mutability":"mutable","name":"result","nameLocation":"12368:6:18","nodeType":"VariableDeclaration","scope":4487,"src":"12360:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4461,"name":"uint256","nodeType":"ElementaryTypeName","src":"12360:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4466,"initialValue":{"arguments":[{"id":4464,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4453,"src":"12384:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4463,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4450,4489],"referencedDeclaration":4450,"src":"12377:6:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12377:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12360:30:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4467,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4462,"src":"12411:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"},"id":4471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4468,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4456,"src":"12421:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4469,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3631,"src":"12433:8:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3631_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3629,"src":"12433:11:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"src":"12421:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12448:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4473,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4462,"src":"12454:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":4474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12464:1:18","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12454:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4476,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12453:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12448:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4478,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4453,"src":"12469:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12448:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12421:53:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12481:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12421:61:18","trueExpression":{"hexValue":"31","id":4481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12477:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4484,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12420:63:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12411:72:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4460,"id":4486,"nodeType":"Return","src":"12404:79:18"}]}]},"documentation":{"id":4451,"nodeType":"StructuredDocumentation","src":"12095:144:18","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4489,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12253:6:18","nodeType":"FunctionDefinition","parameters":{"id":4457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4453,"mutability":"mutable","name":"value","nameLocation":"12268:5:18","nodeType":"VariableDeclaration","scope":4489,"src":"12260:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4452,"name":"uint256","nodeType":"ElementaryTypeName","src":"12260:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4456,"mutability":"mutable","name":"rounding","nameLocation":"12284:8:18","nodeType":"VariableDeclaration","scope":4489,"src":"12275:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4455,"nodeType":"UserDefinedTypeName","pathNode":{"id":4454,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3631,"src":"12275:8:18"},"referencedDeclaration":3631,"src":"12275:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3631","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12259:34:18"},"returnParameters":{"id":4460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4459,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4489,"src":"12317:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4458,"name":"uint256","nodeType":"ElementaryTypeName","src":"12317:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12316:9:18"},"scope":4490,"src":"12244:256:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4491,"src":"202:12300:18","usedErrors":[]}],"src":"103:12400:18"},"id":18},"contracts/utils/math/SignedMathUpgradeable.sol":{"ast":{"absolutePath":"contracts/utils/math/SignedMathUpgradeable.sol","exportedSymbols":{"SignedMathUpgradeable":[4595]},"id":4596,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4492,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:19"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":4493,"nodeType":"StructuredDocumentation","src":"134:80:19","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4595,"linearizedBaseContracts":[4595],"name":"SignedMathUpgradeable","nameLocation":"223:21:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":4510,"nodeType":"Block","src":"386:37:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4503,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4496,"src":"403:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4504,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"407:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"403:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4507,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"415:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"403:13:19","trueExpression":{"id":4506,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4496,"src":"411:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4502,"id":4509,"nodeType":"Return","src":"396:20:19"}]},"documentation":{"id":4494,"nodeType":"StructuredDocumentation","src":"251:66:19","text":" @dev Returns the largest of two signed numbers."},"id":4511,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"331:3:19","nodeType":"FunctionDefinition","parameters":{"id":4499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4496,"mutability":"mutable","name":"a","nameLocation":"342:1:19","nodeType":"VariableDeclaration","scope":4511,"src":"335:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4495,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4498,"mutability":"mutable","name":"b","nameLocation":"352:1:19","nodeType":"VariableDeclaration","scope":4511,"src":"345:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4497,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"334:20:19"},"returnParameters":{"id":4502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4501,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4511,"src":"378:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4500,"name":"int256","nodeType":"ElementaryTypeName","src":"378:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"377:8:19"},"scope":4595,"src":"322:101:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4528,"nodeType":"Block","src":"565:37:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4521,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4514,"src":"582:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4522,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"586:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"582:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4525,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"594:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"582:13:19","trueExpression":{"id":4524,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4514,"src":"590:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4520,"id":4527,"nodeType":"Return","src":"575:20:19"}]},"documentation":{"id":4512,"nodeType":"StructuredDocumentation","src":"429:67:19","text":" @dev Returns the smallest of two signed numbers."},"id":4529,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"510:3:19","nodeType":"FunctionDefinition","parameters":{"id":4517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4514,"mutability":"mutable","name":"a","nameLocation":"521:1:19","nodeType":"VariableDeclaration","scope":4529,"src":"514:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4513,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4516,"mutability":"mutable","name":"b","nameLocation":"531:1:19","nodeType":"VariableDeclaration","scope":4529,"src":"524:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4515,"name":"int256","nodeType":"ElementaryTypeName","src":"524:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"513:20:19"},"returnParameters":{"id":4520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4529,"src":"557:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4518,"name":"int256","nodeType":"ElementaryTypeName","src":"557:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"556:8:19"},"scope":4595,"src":"501:101:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4572,"nodeType":"Block","src":"807:162:19","statements":[{"assignments":[4540],"declarations":[{"constant":false,"id":4540,"mutability":"mutable","name":"x","nameLocation":"876:1:19","nodeType":"VariableDeclaration","scope":4572,"src":"869:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4539,"name":"int256","nodeType":"ElementaryTypeName","src":"869:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4553,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4541,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"881:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4542,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"885:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4544,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4545,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"892:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4546,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"896:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"892:5:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4548,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"891:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4551,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"890:14:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"880:24:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"869:35:19"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4554,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4540,"src":"921:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4559,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4540,"src":"941:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"933:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4557,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:19","typeDescriptions":{}}},"id":4560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"933:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":4561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"947:3:19","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"933:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4556,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4555,"name":"int256","nodeType":"ElementaryTypeName","src":"926:6:19","typeDescriptions":{}}},"id":4563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"926:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4564,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"955:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4565,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"959:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"955:5:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4567,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"954:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"926:35:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4569,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"925:37:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:41:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4538,"id":4571,"nodeType":"Return","src":"914:48:19"}]},"documentation":{"id":4530,"nodeType":"StructuredDocumentation","src":"608:126:19","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":4573,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"748:7:19","nodeType":"FunctionDefinition","parameters":{"id":4535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4532,"mutability":"mutable","name":"a","nameLocation":"763:1:19","nodeType":"VariableDeclaration","scope":4573,"src":"756:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4531,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4534,"mutability":"mutable","name":"b","nameLocation":"773:1:19","nodeType":"VariableDeclaration","scope":4573,"src":"766:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4533,"name":"int256","nodeType":"ElementaryTypeName","src":"766:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"755:20:19"},"returnParameters":{"id":4538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4537,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4573,"src":"799:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4536,"name":"int256","nodeType":"ElementaryTypeName","src":"799:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"798:8:19"},"scope":4595,"src":"739:230:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4593,"nodeType":"Block","src":"1113:158:19","statements":[{"id":4592,"nodeType":"UncheckedBlock","src":"1123:142:19","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4583,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"1238:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":4584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1243:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1238:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1251:2:19","subExpression":{"id":4587,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"1252:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1238:15:19","trueExpression":{"id":4586,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"1247:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4581,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:19","typeDescriptions":{}}},"id":4590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1230:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4580,"id":4591,"nodeType":"Return","src":"1223:31:19"}]}]},"documentation":{"id":4574,"nodeType":"StructuredDocumentation","src":"975:78:19","text":" @dev Returns the absolute unsigned value of a signed value."},"id":4594,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1067:3:19","nodeType":"FunctionDefinition","parameters":{"id":4577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4576,"mutability":"mutable","name":"n","nameLocation":"1078:1:19","nodeType":"VariableDeclaration","scope":4594,"src":"1071:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4575,"name":"int256","nodeType":"ElementaryTypeName","src":"1071:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1070:10:19"},"returnParameters":{"id":4580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4594,"src":"1104:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4578,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:19"},"scope":4595,"src":"1058:213:19","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4596,"src":"215:1058:19","usedErrors":[]}],"src":"109:1165:19"},"id":19}},"contracts":{"contracts/BusinessCardBase.sol":{"BusinessCardBase":{"abi":[{"inputs":[],"name":"BusinessCardBase__ExceededPeople","type":"error"},{"inputs":[],"name":"BusinessCardBase__InvalidArrayCount","type":"error"},{"inputs":[],"name":"BusinessCardBase__InvalidETHAmountSent","type":"error"},{"inputs":[],"name":"BusinessCardBase__InvalidString","type":"error"},{"inputs":[],"name":"BusinessCardBase__NotMintable","type":"error"},{"inputs":[],"name":"BusinessCardBase__NotStaked","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"string","name":"email","type":"string"},{"indexed":false,"internalType":"string","name":"phone","type":"string"},{"indexed":false,"internalType":"string","name":"company","type":"string"},{"indexed":false,"internalType":"uint256","name":"valueDesired","type":"uint256"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"CardCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"CardTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"company","type":"address"},{"indexed":false,"internalType":"address[]","name":"employeeAddresses","type":"address[]"},{"indexed":false,"internalType":"uint32","name":"employeeCount","type":"uint32"}],"name":"PartyMint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"string","name":"companyName","type":"string"}],"name":"Stake","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"uint256","name":"_firstMintPrice","type":"uint256"},{"internalType":"uint256","name":"_mintPrice","type":"uint256"},{"internalType":"uint256","name":"_stakePrice","type":"uint256"}],"name":"__BusinessCardBase__init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_email","type":"string"},{"internalType":"string","name":"_phone","type":"string"},{"internalType":"address","name":"_company","type":"address"},{"internalType":"uint256","name":"valueDesired","type":"uint256"}],"name":"_mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getCard","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"email","type":"string"},{"internalType":"string","name":"phone","type":"string"},{"internalType":"string","name":"company","type":"string"},{"internalType":"enum BusinessCardBase.CardType","name":"cardType","type":"uint8"},{"internalType":"uint256","name":"valueDesired","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"internalType":"struct BusinessCardBase.Card","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getCardByOwner","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"email","type":"string"},{"internalType":"string","name":"phone","type":"string"},{"internalType":"string","name":"company","type":"string"},{"internalType":"enum BusinessCardBase.CardType","name":"cardType","type":"uint8"},{"internalType":"uint256","name":"valueDesired","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"internalType":"struct BusinessCardBase.Card","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCardCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"getCardCountByOwner","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCards","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"email","type":"string"},{"internalType":"string","name":"phone","type":"string"},{"internalType":"string","name":"company","type":"string"},{"internalType":"enum BusinessCardBase.CardType","name":"cardType","type":"uint8"},{"internalType":"uint256","name":"valueDesired","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"internalType":"struct BusinessCardBase.Card[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"companyAddress","type":"address"}],"name":"getCompanyName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFirstMintPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMintPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mint","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_employeeCount","type":"uint256"},{"internalType":"address[]","name":"employeeAddresses","type":"address[]"}],"name":"partyMint","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_company","type":"string"}],"name":"stake","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenByIndex(uint256)":{"details":"See {IERC721Enumerable-tokenByIndex}."},"tokenOfOwnerByIndex(address,uint256)":{"details":"See {IERC721Enumerable-tokenOfOwnerByIndex}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"totalSupply()":{"details":"See {IERC721Enumerable-totalSupply}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5647 DUP1 PUSH3 0x21 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x61A53251 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xA2235934 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xB0DF9E53 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xB0DF9E53 EQ PUSH2 0x69F JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x6CA JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x6F3 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x730 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0xA2235934 EQ PUSH2 0x5E5 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x60E JUMPI DUP1 PUSH4 0xA4EF7031 EQ PUSH2 0x637 JUMPI DUP1 PUSH4 0xA7F93EBD EQ PUSH2 0x674 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x7D620130 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x7D620130 EQ PUSH2 0x515 JUMPI DUP1 PUSH4 0x9188D312 EQ PUSH2 0x540 JUMPI DUP1 PUSH4 0x95ACF987 EQ PUSH2 0x57D JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x5BA JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x61A53251 EQ PUSH2 0x470 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x49B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x4D8 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x185590E2 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x42842E0E GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x3B1 JUMPI DUP1 PUSH4 0x46F45B8D EQ PUSH2 0x3DA JUMPI DUP1 PUSH4 0x47C36B8C EQ PUSH2 0x40A JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x433 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x185590E2 EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x374 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x154308F0 EQ PUSH2 0x2B3 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2E3 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x22F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x404C JUMP JUMPDEST PUSH2 0x76D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x492A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x219 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x226 SWAP2 SWAP1 PUSH2 0x4945 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x256 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x251 SWAP2 SWAP1 PUSH2 0x41BE JUMP JUMPDEST PUSH2 0x879 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x263 SWAP2 SWAP1 PUSH2 0x4871 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28E SWAP2 SWAP1 PUSH2 0x400C JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29D PUSH2 0x9D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2AA SWAP2 SWAP1 PUSH2 0x492A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C8 SWAP2 SWAP1 PUSH2 0x41EB JUMP JUMPDEST PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DA SWAP2 SWAP1 PUSH2 0x492A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xE9C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x335 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x330 SWAP2 SWAP1 PUSH2 0x400C JUMP JUMPDEST PUSH2 0xEA9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x342 SWAP2 SWAP1 PUSH2 0x4BC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x372 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x36D SWAP2 SWAP1 PUSH2 0x3EF6 JUMP JUMPDEST PUSH2 0x11D2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x380 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x396 SWAP2 SWAP1 PUSH2 0x400C JUMP JUMPDEST PUSH2 0x1232 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A8 SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D3 SWAP2 SWAP1 PUSH2 0x3EF6 JUMP JUMPDEST PUSH2 0x12D7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3EF SWAP2 SWAP1 PUSH2 0x40A6 JUMP JUMPDEST PUSH2 0x12F7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x401 SWAP2 SWAP1 PUSH2 0x492A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x416 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x431 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x42C SWAP2 SWAP1 PUSH2 0x4247 JUMP JUMPDEST PUSH2 0x1439 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x455 SWAP2 SWAP1 PUSH2 0x41BE JUMP JUMPDEST PUSH2 0x14C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x467 SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x485 PUSH2 0x1538 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x492 SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4BD SWAP2 SWAP1 PUSH2 0x41BE JUMP JUMPDEST PUSH2 0x1542 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4CF SWAP2 SWAP1 PUSH2 0x4871 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4FF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4FA SWAP2 SWAP1 PUSH2 0x3E89 JUMP JUMPDEST PUSH2 0x15C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50C SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x52A PUSH2 0x1681 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x537 SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x567 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x562 SWAP2 SWAP1 PUSH2 0x41BE JUMP JUMPDEST PUSH2 0x168E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x574 SWAP2 SWAP1 PUSH2 0x4BC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x589 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x59F SWAP2 SWAP1 PUSH2 0x3E89 JUMP JUMPDEST PUSH2 0x19AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B1 SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5CF PUSH2 0x19BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5DC SWAP2 SWAP1 PUSH2 0x4945 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x60C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x607 SWAP2 SWAP1 PUSH2 0x40EF JUMP JUMPDEST PUSH2 0x1A51 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x61A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x635 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x630 SWAP2 SWAP1 PUSH2 0x3FCC JUMP JUMPDEST PUSH2 0x206D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x643 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x65E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x659 SWAP2 SWAP1 PUSH2 0x3E89 JUMP JUMPDEST PUSH2 0x2083 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66B SWAP2 SWAP1 PUSH2 0x4945 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x680 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x689 PUSH2 0x2154 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x696 SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6B4 PUSH2 0x215E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6C1 SWAP2 SWAP1 PUSH2 0x4908 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6EC SWAP2 SWAP1 PUSH2 0x3F49 JUMP JUMPDEST PUSH2 0x24A0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x715 SWAP2 SWAP1 PUSH2 0x41BE JUMP JUMPDEST PUSH2 0x2502 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x727 SWAP2 SWAP1 PUSH2 0x4945 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x757 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x752 SWAP2 SWAP1 PUSH2 0x3EB6 JUMP JUMPDEST PUSH2 0x256A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x764 SWAP2 SWAP1 PUSH2 0x492A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x780E9D6300000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x7E0 JUMPI POP PUSH2 0x7DF DUP3 PUSH2 0x25FE JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x65 DUP1 SLOAD PUSH2 0x7F6 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x822 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x86F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x844 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x86F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x852 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x884 DUP3 PUSH2 0x26E0 JUMP JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8CA DUP3 PUSH2 0x1542 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x93B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x932 SWAP1 PUSH2 0x4B24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x95A PUSH2 0x272B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x989 JUMPI POP PUSH2 0x988 DUP2 PUSH2 0x983 PUSH2 0x272B JUMP JUMPDEST PUSH2 0x256A JUMP JUMPDEST JUMPDEST PUSH2 0x9C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9BF SWAP1 PUSH2 0x4B44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9D2 DUP4 DUP4 PUSH2 0x2733 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xAFF JUMPI PUSH1 0xCC SLOAD CALLVALUE EQ PUSH2 0xA66 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7D604D0E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xCE PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xAF3 SWAP2 SWAP1 PUSH2 0x4DAA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xC1B JUMP JUMPDEST PUSH1 0xCB SLOAD CALLVALUE EQ PUSH2 0xB3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x7D604D0E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xCD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xA PUSH4 0xFFFFFFFF AND PUSH1 0xCE PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 ISZERO ISZERO PUSH1 0xD0 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0xCAE JUMPI PUSH1 0x40 MLOAD PUSH32 0xE11CD5BE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA PUSH4 0xFFFFFFFF AND DUP4 GT ISZERO PUSH2 0xCEF JUMPI PUSH1 0x40 MLOAD PUSH32 0x667D7A4800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0xCC SLOAD PUSH2 0xCFD SWAP2 SWAP1 PUSH2 0x4E00 JUMP JUMPDEST CALLVALUE EQ PUSH2 0xD35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7D604D0E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 MLOAD DUP4 EQ PUSH2 0xD6F JUMPI PUSH1 0x40 MLOAD PUSH32 0xA84927600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xE40 JUMPI PUSH1 0x1 PUSH1 0xCE PUSH1 0x0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD98 JUMPI PUSH2 0xD97 PUSH2 0x5110 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xE26 SWAP2 SWAP1 PUSH2 0x4DAA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0xE38 SWAP1 PUSH2 0x4FDC JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD77 JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6DF9081C5DED9CFF457E4B66EB4D5C66A49BF08DED297C2887204B850A135489 DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0xE89 SWAP3 SWAP2 SWAP1 PUSH2 0x48D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x99 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xEB1 PUSH2 0x3B9A JUMP JUMPDEST PUSH1 0xC9 PUSH2 0xEBD DUP5 DUP5 PUSH2 0x1232 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xECE JUMPI PUSH2 0xECD PUSH2 0x5110 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0xEF7 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF23 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF70 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF45 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF70 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF53 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0xF89 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFB5 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1002 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFD7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1002 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFE5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH2 0x101B SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1047 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1094 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1069 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1094 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1077 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x10AD SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x10D9 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1126 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x10FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1126 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1109 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1154 JUMPI PUSH2 0x1153 PUSH2 0x5083 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1166 JUMPI PUSH2 0x1165 PUSH2 0x5083 JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x11E3 PUSH2 0x11DD PUSH2 0x272B JUMP JUMPDEST DUP3 PUSH2 0x27EC JUMP JUMPDEST PUSH2 0x1222 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1219 SWAP1 PUSH2 0x49E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x122D DUP4 DUP4 DUP4 PUSH2 0x2881 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x123D DUP4 PUSH2 0x15C9 JUMP JUMPDEST DUP3 LT PUSH2 0x127E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1275 SWAP1 PUSH2 0x4A04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x97 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x12F2 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x24A0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCA SLOAD CALLVALUE EQ PUSH2 0x1334 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE11CD5BE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xD0 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0xD1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x13DF SWAP3 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x72D0050D8F1A0F19ACE5B1F50E8B5333308C60902442B7444A65CFFFBAD884E7 CALLVALUE DUP5 PUSH1 0x40 MLOAD PUSH2 0x1428 SWAP3 SWAP2 SWAP1 PUSH2 0x4C01 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14AD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x427573696E657373436172644261736500000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4243000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x28EC JUMP JUMPDEST DUP3 PUSH1 0xCB DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0xCC DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0xCA DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14D1 PUSH2 0xE9C JUMP JUMPDEST DUP3 LT PUSH2 0x1512 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1509 SWAP1 PUSH2 0x4B64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x99 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1526 JUMPI PUSH2 0x1525 PUSH2 0x5110 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCB SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x154E DUP4 PUSH2 0x2949 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x15C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15B7 SWAP1 PUSH2 0x4B04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x163A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1631 SWAP1 PUSH2 0x4AC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x68 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC9 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1696 PUSH2 0x3B9A JUMP JUMPDEST PUSH1 0xC9 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x16AA JUMPI PUSH2 0x16A9 PUSH2 0x5110 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x16D3 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x16FF SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x174C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1721 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x174C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x172F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x1765 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1791 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x17DE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x17B3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x17DE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x17C1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH2 0x17F7 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1823 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1870 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1845 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1870 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1853 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x1889 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x18B5 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1902 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x18D7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1902 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x18E5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1930 JUMPI PUSH2 0x192F PUSH2 0x5083 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1942 JUMPI PUSH2 0x1941 PUSH2 0x5083 JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B8 DUP3 PUSH2 0x15C9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x66 DUP1 SLOAD PUSH2 0x19CE SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x19FA SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1A47 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1A1C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1A47 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1A2A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCE PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x1B07 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5594523C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP5 MLOAD DUP7 MLOAD DUP9 MLOAD PUSH2 0x1B1A SWAP2 SWAP1 PUSH2 0x4E00 JUMP JUMPDEST PUSH2 0x1B24 SWAP2 SWAP1 PUSH2 0x4E00 JUMP JUMPDEST PUSH2 0x1B2E SWAP2 SWAP1 PUSH2 0x4E00 JUMP JUMPDEST EQ DUP1 PUSH2 0x1B66 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1B9D JUMPI PUSH1 0x40 MLOAD PUSH32 0xB73F7BA500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xCE PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x1C53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5594523C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xD1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x1CA0 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CCC SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1D19 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1CEE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1D19 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1CFC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x1D5B JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1D69 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x1D6E JUMP JUMPDEST PUSH1 0x1 SWAP2 POP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP5 MLOAD EQ PUSH2 0x1D9C JUMPI DUP4 PUSH2 0x1DD3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4E2F410000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1DEB JUMPI PUSH2 0x1DEA PUSH2 0x5083 JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP PUSH1 0xC9 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1E5A SWAP3 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1E77 SWAP3 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1E94 SWAP3 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1EB1 SWAP3 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1EDD JUMPI PUSH2 0x1EDC PUSH2 0x5083 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH1 0x0 PUSH1 0x1 PUSH1 0xC9 DUP1 SLOAD SWAP1 POP PUSH2 0x1F49 SWAP2 SWAP1 PUSH2 0x4E5A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0xCE PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1FD8 SWAP2 SWAP1 PUSH2 0x4E5A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1FE9 CALLER DUP3 PUSH2 0x2986 JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x1FFC JUMPI PUSH2 0x1FFB PUSH2 0x5083 JUMP JUMPDEST JUMPDEST DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x200F JUMPI PUSH2 0x200E PUSH2 0x5083 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x2020 JUMPI PUSH2 0x201F DUP7 DUP3 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH32 0x114AB4DF1FFB6B5225040178874680842D3203BF8CE3F59FC3A9937291066A3C DUP11 DUP11 DUP11 DUP8 DUP11 CALLER PUSH1 0x40 MLOAD PUSH2 0x205A SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4967 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x207F PUSH2 0x2078 PUSH2 0x272B JUMP JUMPDEST DUP4 DUP4 PUSH2 0x29A4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xD1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x20CF SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x20FB SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2148 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x211D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2148 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x212B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCC SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xC9 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x2497 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x21B5 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x21E1 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x222E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2203 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x222E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2211 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x2247 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2273 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x22C0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2295 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x22C0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x22A3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH2 0x22D9 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2305 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2352 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2327 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2352 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2335 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x236B SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2397 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x23E4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x23B9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x23E4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x23C7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2412 JUMPI PUSH2 0x2411 PUSH2 0x5083 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2424 JUMPI PUSH2 0x2423 PUSH2 0x5083 JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2182 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x24B1 PUSH2 0x24AB PUSH2 0x272B JUMP JUMPDEST DUP4 PUSH2 0x27EC JUMP JUMPDEST PUSH2 0x24F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24E7 SWAP1 PUSH2 0x49E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x24FC DUP5 DUP5 DUP5 DUP5 PUSH2 0x2B11 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x250D DUP3 PUSH2 0x26E0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2517 PUSH2 0x2B6D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x2537 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2562 JUMP JUMPDEST DUP1 PUSH2 0x2541 DUP5 PUSH2 0x2B84 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2552 SWAP3 SWAP2 SWAP1 PUSH2 0x484D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x26C9 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x26D9 JUMPI POP PUSH2 0x26D8 DUP3 PUSH2 0x2C5C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26E9 DUP2 PUSH2 0x2CC6 JUMP JUMPDEST PUSH2 0x2728 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x271F SWAP1 PUSH2 0x4B04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x69 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x27A6 DUP4 PUSH2 0x1542 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x27F8 DUP4 PUSH2 0x1542 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x283A JUMPI POP PUSH2 0x2839 DUP2 DUP6 PUSH2 0x256A JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2878 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2860 DUP5 PUSH2 0x879 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x288C DUP4 DUP4 DUP4 PUSH2 0x2D07 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH32 0xA39C1232E046AB0AD1C4221E11516A35AD636B4EB5A7ACAABBFD44EACA8FE007 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x293B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2932 SWAP1 PUSH2 0x4B84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2945 DUP3 DUP3 PUSH2 0x3001 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x29A0 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x3082 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2A13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A0A SWAP1 PUSH2 0x4AA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6A PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x2B04 SWAP2 SWAP1 PUSH2 0x492A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x2B1C DUP5 DUP5 DUP5 PUSH2 0x2881 JUMP JUMPDEST PUSH2 0x2B28 DUP5 DUP5 DUP5 DUP5 PUSH2 0x30DD JUMP JUMPDEST PUSH2 0x2B67 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B5E SWAP1 PUSH2 0x4A24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x2B93 DUP5 PUSH2 0x3274 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BB2 JUMPI PUSH2 0x2BB1 PUSH2 0x513F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2BE4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x2C51 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2C3B JUMPI PUSH2 0x2C3A PUSH2 0x5054 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x2C4C JUMPI PUSH2 0x2C51 JUMP JUMPDEST PUSH2 0x2BF2 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2CE8 DUP4 PUSH2 0x2949 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2D27 DUP3 PUSH2 0x1542 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2D7D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D74 SWAP1 PUSH2 0x4A44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2DED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DE4 SWAP1 PUSH2 0x4A84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2DFA DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x33C7 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2E1A DUP3 PUSH2 0x1542 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2E70 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E67 SWAP1 PUSH2 0x4A44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x68 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x68 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x67 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2FFC DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x3527 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3050 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3047 SWAP1 PUSH2 0x4B84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x65 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x3066 SWAP3 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST POP DUP1 PUSH1 0x66 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x307D SWAP3 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x308C DUP4 DUP4 PUSH2 0x352D JUMP JUMPDEST PUSH2 0x3099 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x30DD JUMP JUMPDEST PUSH2 0x30D8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30CF SWAP1 PUSH2 0x4A24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30FE DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x374B JUMP JUMPDEST ISZERO PUSH2 0x3267 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x3127 PUSH2 0x272B JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3149 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x488C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x3194 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3191 SWAP2 SWAP1 PUSH2 0x4079 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3217 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x31C4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x31C9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x320F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3206 SWAP1 PUSH2 0x4A24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x326C JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x32D2 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x32C8 JUMPI PUSH2 0x32C7 PUSH2 0x5054 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x330F JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x3305 JUMPI PUSH2 0x3304 PUSH2 0x5054 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x333E JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x3334 JUMPI PUSH2 0x3333 PUSH2 0x5054 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x3367 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x335D JUMPI PUSH2 0x335C PUSH2 0x5054 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x338C JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x3382 JUMPI PUSH2 0x3381 PUSH2 0x5054 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x33AF JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x33A5 JUMPI PUSH2 0x33A4 PUSH2 0x5054 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x33BE JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33D3 DUP5 DUP5 DUP5 DUP5 PUSH2 0x376E JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3417 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x340E SWAP1 PUSH2 0x4BA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x345F JUMPI PUSH2 0x345A DUP2 PUSH2 0x3894 JUMP JUMPDEST PUSH2 0x349E JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x349D JUMPI PUSH2 0x349C DUP6 DUP3 PUSH2 0x38DD JUMP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x34E1 JUMPI PUSH2 0x34DC DUP2 PUSH2 0x3A4A JUMP JUMPDEST PUSH2 0x3520 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x351F JUMPI PUSH2 0x351E DUP5 DUP3 PUSH2 0x3B1B JUMP JUMPDEST JUMPDEST JUMPDEST POP POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x359D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3594 SWAP1 PUSH2 0x4AE4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x35A6 DUP2 PUSH2 0x2CC6 JUMP JUMPDEST ISZERO PUSH2 0x35E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x35DD SWAP1 PUSH2 0x4A64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x35F4 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x33C7 JUMP JUMPDEST PUSH2 0x35FD DUP2 PUSH2 0x2CC6 JUMP JUMPDEST ISZERO PUSH2 0x363D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3634 SWAP1 PUSH2 0x4A64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x68 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x67 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x3747 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x3527 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x388E JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3802 JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x37FA SWAP2 SWAP1 PUSH2 0x4E5A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x388D JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3885 SWAP2 SWAP1 PUSH2 0x4DAA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x99 DUP1 SLOAD SWAP1 POP PUSH1 0x9A PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x99 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x38EA DUP5 PUSH2 0x15C9 JUMP JUMPDEST PUSH2 0x38F4 SWAP2 SWAP1 PUSH2 0x4E5A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x98 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 EQ PUSH2 0x39D9 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 PUSH1 0x97 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x98 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x98 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x97 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x99 DUP1 SLOAD SWAP1 POP PUSH2 0x3A5E SWAP2 SWAP1 PUSH2 0x4E5A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x9A PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x99 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3A8E JUMPI PUSH2 0x3A8D PUSH2 0x5110 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0x99 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3AB0 JUMPI PUSH2 0x3AAF PUSH2 0x5110 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x9A PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x9A PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x99 DUP1 SLOAD DUP1 PUSH2 0x3AFF JUMPI PUSH2 0x3AFE PUSH2 0x50E1 JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B26 DUP4 PUSH2 0x15C9 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x98 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3BD5 JUMPI PUSH2 0x3BD4 PUSH2 0x5083 JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x3C0B SWAP1 PUSH2 0x4F79 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x3C2D JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x3C74 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x3C46 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x3C74 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x3C74 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x3C73 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x3C58 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x3C81 SWAP2 SWAP1 PUSH2 0x3C85 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x3C9E JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x3C86 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB5 PUSH2 0x3CB0 DUP5 PUSH2 0x4C56 JUMP JUMPDEST PUSH2 0x4C31 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x3CD8 JUMPI PUSH2 0x3CD7 PUSH2 0x5173 JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3D08 JUMPI DUP2 PUSH2 0x3CEE DUP9 DUP3 PUSH2 0x3D96 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3CDB JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D25 PUSH2 0x3D20 DUP5 PUSH2 0x4C82 JUMP JUMPDEST PUSH2 0x4C31 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x3D41 JUMPI PUSH2 0x3D40 PUSH2 0x5178 JUMP JUMPDEST JUMPDEST PUSH2 0x3D4C DUP5 DUP3 DUP6 PUSH2 0x4F37 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D67 PUSH2 0x3D62 DUP5 PUSH2 0x4CB3 JUMP JUMPDEST PUSH2 0x4C31 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x3D83 JUMPI PUSH2 0x3D82 PUSH2 0x5178 JUMP JUMPDEST JUMPDEST PUSH2 0x3D8E DUP5 DUP3 DUP6 PUSH2 0x4F37 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3DA5 DUP2 PUSH2 0x55B5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3DC0 JUMPI PUSH2 0x3DBF PUSH2 0x516E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3DD0 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3CA2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3DE8 DUP2 PUSH2 0x55CC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3DFD DUP2 PUSH2 0x55E3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3E12 DUP2 PUSH2 0x55E3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3E2D JUMPI PUSH2 0x3E2C PUSH2 0x516E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3E3D DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3D12 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3E5B JUMPI PUSH2 0x3E5A PUSH2 0x516E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3E6B DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3D54 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3E83 DUP2 PUSH2 0x55FA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E9F JUMPI PUSH2 0x3E9E PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3EAD DUP5 DUP3 DUP6 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3ECD JUMPI PUSH2 0x3ECC PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3EDB DUP6 DUP3 DUP7 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3EEC DUP6 DUP3 DUP7 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3F0F JUMPI PUSH2 0x3F0E PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F1D DUP7 DUP3 DUP8 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3F2E DUP7 DUP3 DUP8 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3F3F DUP7 DUP3 DUP8 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3F63 JUMPI PUSH2 0x3F62 PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F71 DUP8 DUP3 DUP9 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x3F82 DUP8 DUP3 DUP9 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x3F93 DUP8 DUP3 DUP9 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3FB4 JUMPI PUSH2 0x3FB3 PUSH2 0x517D JUMP JUMPDEST JUMPDEST PUSH2 0x3FC0 DUP8 DUP3 DUP9 ADD PUSH2 0x3E18 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3FE3 JUMPI PUSH2 0x3FE2 PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3FF1 DUP6 DUP3 DUP7 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x4002 DUP6 DUP3 DUP7 ADD PUSH2 0x3DD9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4023 JUMPI PUSH2 0x4022 PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4031 DUP6 DUP3 DUP7 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x4042 DUP6 DUP3 DUP7 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4062 JUMPI PUSH2 0x4061 PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4070 DUP5 DUP3 DUP6 ADD PUSH2 0x3DEE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x408F JUMPI PUSH2 0x408E PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x409D DUP5 DUP3 DUP6 ADD PUSH2 0x3E03 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x40BC JUMPI PUSH2 0x40BB PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x40DA JUMPI PUSH2 0x40D9 PUSH2 0x517D JUMP JUMPDEST JUMPDEST PUSH2 0x40E6 DUP5 DUP3 DUP6 ADD PUSH2 0x3E46 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x410B JUMPI PUSH2 0x410A PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4129 JUMPI PUSH2 0x4128 PUSH2 0x517D JUMP JUMPDEST JUMPDEST PUSH2 0x4135 DUP9 DUP3 DUP10 ADD PUSH2 0x3E46 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4156 JUMPI PUSH2 0x4155 PUSH2 0x517D JUMP JUMPDEST JUMPDEST PUSH2 0x4162 DUP9 DUP3 DUP10 ADD PUSH2 0x3E46 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4183 JUMPI PUSH2 0x4182 PUSH2 0x517D JUMP JUMPDEST JUMPDEST PUSH2 0x418F DUP9 DUP3 DUP10 ADD PUSH2 0x3E46 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x41A0 DUP9 DUP3 DUP10 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x41B1 DUP9 DUP3 DUP10 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x41D4 JUMPI PUSH2 0x41D3 PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x41E2 DUP5 DUP3 DUP6 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4202 JUMPI PUSH2 0x4201 PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4210 DUP6 DUP3 DUP7 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4231 JUMPI PUSH2 0x4230 PUSH2 0x517D JUMP JUMPDEST JUMPDEST PUSH2 0x423D DUP6 DUP3 DUP7 ADD PUSH2 0x3DAB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4260 JUMPI PUSH2 0x425F PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x426E DUP7 DUP3 DUP8 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x427F DUP7 DUP3 DUP8 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x4290 DUP7 DUP3 DUP8 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42A6 DUP4 DUP4 PUSH2 0x42C6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42BE DUP4 DUP4 PUSH2 0x46BE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x42CF DUP2 PUSH2 0x4E8E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x42DE DUP2 PUSH2 0x4E8E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42EF DUP3 PUSH2 0x4D04 JUMP JUMPDEST PUSH2 0x42F9 DUP2 DUP6 PUSH2 0x4D4A JUMP JUMPDEST SWAP4 POP PUSH2 0x4304 DUP4 PUSH2 0x4CE4 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4335 JUMPI DUP2 MLOAD PUSH2 0x431C DUP9 DUP3 PUSH2 0x429A JUMP JUMPDEST SWAP8 POP PUSH2 0x4327 DUP4 PUSH2 0x4D30 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x4308 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x434D DUP3 PUSH2 0x4D0F JUMP JUMPDEST PUSH2 0x4357 DUP2 DUP6 PUSH2 0x4D5B JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x4369 DUP6 PUSH2 0x4CF4 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x43A5 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x4386 DUP6 DUP3 PUSH2 0x42B2 JUMP JUMPDEST SWAP5 POP PUSH2 0x4391 DUP4 PUSH2 0x4D3D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x436D JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x43C0 DUP2 PUSH2 0x4EA0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43D1 DUP3 PUSH2 0x4D1A JUMP JUMPDEST PUSH2 0x43DB DUP2 DUP6 PUSH2 0x4D6C JUMP JUMPDEST SWAP4 POP PUSH2 0x43EB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4F46 JUMP JUMPDEST PUSH2 0x43F4 DUP2 PUSH2 0x5187 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4408 DUP2 PUSH2 0x4F25 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4419 DUP3 PUSH2 0x4D25 JUMP JUMPDEST PUSH2 0x4423 DUP2 DUP6 PUSH2 0x4D7D JUMP JUMPDEST SWAP4 POP PUSH2 0x4433 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4F46 JUMP JUMPDEST PUSH2 0x443C DUP2 PUSH2 0x5187 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4452 DUP3 PUSH2 0x4D25 JUMP JUMPDEST PUSH2 0x445C DUP2 DUP6 PUSH2 0x4D8E JUMP JUMPDEST SWAP4 POP PUSH2 0x446C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4F46 JUMP JUMPDEST PUSH2 0x4475 DUP2 PUSH2 0x5187 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x448B DUP3 PUSH2 0x4D25 JUMP JUMPDEST PUSH2 0x4495 DUP2 DUP6 PUSH2 0x4D9F JUMP JUMPDEST SWAP4 POP PUSH2 0x44A5 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4F46 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44BE PUSH1 0x2D DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x44C9 DUP3 PUSH2 0x5198 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44E1 PUSH1 0x2B DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x44EC DUP3 PUSH2 0x51E7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4504 PUSH1 0x32 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x450F DUP3 PUSH2 0x5236 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4527 PUSH1 0x25 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x4532 DUP3 PUSH2 0x5285 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x454A PUSH1 0x1C DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x4555 DUP3 PUSH2 0x52D4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x456D PUSH1 0x24 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x4578 DUP3 PUSH2 0x52FD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4590 PUSH1 0x19 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x459B DUP3 PUSH2 0x534C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45B3 PUSH1 0x29 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x45BE DUP3 PUSH2 0x5375 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45D6 PUSH1 0x20 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x45E1 DUP3 PUSH2 0x53C4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45F9 PUSH1 0x18 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x4604 DUP3 PUSH2 0x53ED JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x461C PUSH1 0x21 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x4627 DUP3 PUSH2 0x5416 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x463F PUSH1 0x3D DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x464A DUP3 PUSH2 0x5465 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4662 PUSH1 0x2C DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x466D DUP3 PUSH2 0x54B4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4685 PUSH1 0x2B DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x4690 DUP3 PUSH2 0x5503 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46A8 PUSH1 0x35 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x46B3 DUP3 PUSH2 0x5552 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x0 DUP7 ADD MSTORE PUSH2 0x46DB DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x46F5 DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x470F DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x4729 DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x473E PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x43FF JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x4751 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x4820 JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x4764 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x42C6 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x0 DUP7 ADD MSTORE PUSH2 0x478C DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x47A6 DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x47C0 DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x47DA DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x47EF PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x43FF JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x4802 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x4820 JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x4815 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x42C6 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4829 DUP2 PUSH2 0x4F0B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4838 DUP2 PUSH2 0x4F0B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4847 DUP2 PUSH2 0x4F15 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4859 DUP3 DUP6 PUSH2 0x4480 JUMP JUMPDEST SWAP2 POP PUSH2 0x4865 DUP3 DUP5 PUSH2 0x4480 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4886 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x42D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x48A1 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x42D5 JUMP JUMPDEST PUSH2 0x48AE PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x42D5 JUMP JUMPDEST PUSH2 0x48BB PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x482F JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x48CD DUP2 DUP5 PUSH2 0x43C6 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x48F2 DUP2 DUP6 PUSH2 0x42E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x4901 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x483E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4922 DUP2 DUP5 PUSH2 0x4342 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x493F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x43B7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x495F DUP2 DUP5 PUSH2 0x4447 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4981 DUP2 DUP10 PUSH2 0x4447 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4995 DUP2 DUP9 PUSH2 0x4447 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x49A9 DUP2 DUP8 PUSH2 0x4447 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x49BD DUP2 DUP7 PUSH2 0x4447 JUMP JUMPDEST SWAP1 POP PUSH2 0x49CC PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x482F JUMP JUMPDEST PUSH2 0x49D9 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x42D5 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x49FD DUP2 PUSH2 0x44B1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4A1D DUP2 PUSH2 0x44D4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4A3D DUP2 PUSH2 0x44F7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4A5D DUP2 PUSH2 0x451A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4A7D DUP2 PUSH2 0x453D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4A9D DUP2 PUSH2 0x4560 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4ABD DUP2 PUSH2 0x4583 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4ADD DUP2 PUSH2 0x45A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4AFD DUP2 PUSH2 0x45C9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B1D DUP2 PUSH2 0x45EC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B3D DUP2 PUSH2 0x460F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B5D DUP2 PUSH2 0x4632 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B7D DUP2 PUSH2 0x4655 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B9D DUP2 PUSH2 0x4678 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4BBD DUP2 PUSH2 0x469B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4BDE DUP2 DUP5 PUSH2 0x476F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4BFB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x482F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x4C16 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x482F JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4C28 DUP2 DUP5 PUSH2 0x4447 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C3B PUSH2 0x4C4C JUMP JUMPDEST SWAP1 POP PUSH2 0x4C47 DUP3 DUP3 PUSH2 0x4FAB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4C71 JUMPI PUSH2 0x4C70 PUSH2 0x513F JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4C9D JUMPI PUSH2 0x4C9C PUSH2 0x513F JUMP JUMPDEST JUMPDEST PUSH2 0x4CA6 DUP3 PUSH2 0x5187 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4CCE JUMPI PUSH2 0x4CCD PUSH2 0x513F JUMP JUMPDEST JUMPDEST PUSH2 0x4CD7 DUP3 PUSH2 0x5187 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DB5 DUP3 PUSH2 0x4F0B JUMP JUMPDEST SWAP2 POP PUSH2 0x4DC0 DUP4 PUSH2 0x4F0B JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x4DF5 JUMPI PUSH2 0x4DF4 PUSH2 0x5025 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E0B DUP3 PUSH2 0x4F0B JUMP JUMPDEST SWAP2 POP PUSH2 0x4E16 DUP4 PUSH2 0x4F0B JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x4E4F JUMPI PUSH2 0x4E4E PUSH2 0x5025 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E65 DUP3 PUSH2 0x4F0B JUMP JUMPDEST SWAP2 POP PUSH2 0x4E70 DUP4 PUSH2 0x4F0B JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x4E83 JUMPI PUSH2 0x4E82 PUSH2 0x5025 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E99 DUP3 PUSH2 0x4EEB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x4EE6 DUP3 PUSH2 0x55A1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F30 DUP3 PUSH2 0x4ED8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4F64 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4F49 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x4F73 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x4F91 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x4FA5 JUMPI PUSH2 0x4FA4 PUSH2 0x50B2 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4FB4 DUP3 PUSH2 0x5187 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x4FD3 JUMPI PUSH2 0x4FD2 PUSH2 0x513F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4FE7 DUP3 PUSH2 0x4F0B JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x501A JUMPI PUSH2 0x5019 PUSH2 0x5025 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x455243373231456E756D657261626C653A206F776E657220696E646578206F75 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x74206F6620626F756E6473000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x455243373231456E756D657261626C653A20676C6F62616C20696E646578206F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7574206F6620626F756E64730000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x455243373231456E756D657261626C653A20636F6E7365637574697665207472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616E7366657273206E6F7420737570706F727465640000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x55B2 JUMPI PUSH2 0x55B1 PUSH2 0x5083 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0x55BE DUP2 PUSH2 0x4E8E JUMP JUMPDEST DUP2 EQ PUSH2 0x55C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x55D5 DUP2 PUSH2 0x4EA0 JUMP JUMPDEST DUP2 EQ PUSH2 0x55E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x55EC DUP2 PUSH2 0x4EAC JUMP JUMPDEST DUP2 EQ PUSH2 0x55F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x5603 DUP2 PUSH2 0x4F0B JUMP JUMPDEST DUP2 EQ PUSH2 0x560E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASLIMIT PUSH20 0x7210133578917325BF5BAF7128C2AC7EBB158BC9 PUSH29 0xFEBE7560B6166C91DA64736F6C63430008070033000000000000000000 ","sourceMap":"436:6503:0:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__BusinessCardBase__init_188":{"entryPoint":5177,"id":188,"parameterSlots":3,"returnSlots":0},"@__ERC721_init_1484":{"entryPoint":10476,"id":1484,"parameterSlots":2,"returnSlots":0},"@__ERC721_init_unchained_1502":{"entryPoint":12289,"id":1502,"parameterSlots":2,"returnSlots":0},"@_addTokenToAllTokensEnumeration_1302":{"entryPoint":14484,"id":1302,"parameterSlots":1,"returnSlots":0},"@_addTokenToOwnerEnumeration_1282":{"entryPoint":15131,"id":1282,"parameterSlots":2,"returnSlots":0},"@_afterTokenTransfer_2383":{"entryPoint":13607,"id":2383,"parameterSlots":4,"returnSlots":0},"@_approve_2216":{"entryPoint":10035,"id":2216,"parameterSlots":2,"returnSlots":0},"@_baseURI_1653":{"entryPoint":11117,"id":1653,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1252":{"entryPoint":13255,"id":1252,"parameterSlots":4,"returnSlots":0},"@_beforeTokenTransfer_2370":{"entryPoint":14190,"id":2370,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_2324":{"entryPoint":12509,"id":2324,"parameterSlots":4,"returnSlots":1},"@_exists_1885":{"entryPoint":11462,"id":1885,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_1919":{"entryPoint":10220,"id":1919,"parameterSlots":2,"returnSlots":1},"@_mint_2040":{"entryPoint":13613,"id":2040,"parameterSlots":2,"returnSlots":0},"@_mint_419":{"entryPoint":6737,"id":419,"parameterSlots":5,"returnSlots":0},"@_msgSender_3312":{"entryPoint":10027,"id":3312,"parameterSlots":0,"returnSlots":1},"@_ownerOf_1867":{"entryPoint":10569,"id":1867,"parameterSlots":1,"returnSlots":1},"@_removeTokenFromAllTokensEnumeration_1413":{"entryPoint":14922,"id":1413,"parameterSlots":1,"returnSlots":0},"@_removeTokenFromOwnerEnumeration_1365":{"entryPoint":14557,"id":1365,"parameterSlots":2,"returnSlots":0},"@_requireMinted_2262":{"entryPoint":9952,"id":2262,"parameterSlots":1,"returnSlots":0},"@_safeMint_1934":{"entryPoint":10630,"id":1934,"parameterSlots":2,"returnSlots":0},"@_safeMint_1963":{"entryPoint":12418,"id":1963,"parameterSlots":3,"returnSlots":0},"@_safeTransfer_1854":{"entryPoint":11025,"id":1854,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_2248":{"entryPoint":10660,"id":2248,"parameterSlots":3,"returnSlots":0},"@_transfer_2192":{"entryPoint":11527,"id":2192,"parameterSlots":3,"returnSlots":0},"@_transfer_565":{"entryPoint":10369,"id":565,"parameterSlots":3,"returnSlots":0},"@approve_1696":{"entryPoint":2239,"id":1696,"parameterSlots":2,"returnSlots":0},"@balanceOf_1557":{"entryPoint":5577,"id":1557,"parameterSlots":1,"returnSlots":1},"@getApproved_1714":{"entryPoint":2169,"id":1714,"parameterSlots":1,"returnSlots":1},"@getCardByOwner_643":{"entryPoint":3753,"id":643,"parameterSlots":2,"returnSlots":1},"@getCardCountByOwner_625":{"entryPoint":6573,"id":625,"parameterSlots":1,"returnSlots":1},"@getCardCount_613":{"entryPoint":5761,"id":613,"parameterSlots":0,"returnSlots":1},"@getCard_604":{"entryPoint":5774,"id":604,"parameterSlots":1,"returnSlots":1},"@getCards_591":{"entryPoint":8542,"id":591,"parameterSlots":0,"returnSlots":1},"@getCompanyName_655":{"entryPoint":8323,"id":655,"parameterSlots":1,"returnSlots":1},"@getFirstMintPrice_573":{"entryPoint":5432,"id":573,"parameterSlots":0,"returnSlots":1},"@getMintPrice_581":{"entryPoint":8532,"id":581,"parameterSlots":0,"returnSlots":1},"@isApprovedForAll_1749":{"entryPoint":9578,"id":1749,"parameterSlots":2,"returnSlots":1},"@isContract_2997":{"entryPoint":14155,"id":2997,"parameterSlots":1,"returnSlots":1},"@log10_4327":{"entryPoint":12916,"id":4327,"parameterSlots":1,"returnSlots":1},"@mint_248":{"entryPoint":2519,"id":248,"parameterSlots":0,"returnSlots":1},"@name_1595":{"entryPoint":2023,"id":1595,"parameterSlots":0,"returnSlots":1},"@ownerOf_1585":{"entryPoint":5442,"id":1585,"parameterSlots":1,"returnSlots":1},"@partyMint_540":{"entryPoint":3106,"id":540,"parameterSlots":2,"returnSlots":1},"@safeTransferFrom_1795":{"entryPoint":4823,"id":1795,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_1825":{"entryPoint":9376,"id":1825,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_1731":{"entryPoint":8301,"id":1731,"parameterSlots":2,"returnSlots":0},"@stake_460":{"entryPoint":4855,"id":460,"parameterSlots":1,"returnSlots":1},"@supportsInterface_1110":{"entryPoint":1901,"id":1110,"parameterSlots":1,"returnSlots":1},"@supportsInterface_1533":{"entryPoint":9726,"id":1533,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3594":{"entryPoint":11356,"id":3594,"parameterSlots":1,"returnSlots":1},"@symbol_1605":{"entryPoint":6591,"id":1605,"parameterSlots":0,"returnSlots":1},"@toString_3386":{"entryPoint":11140,"id":3386,"parameterSlots":1,"returnSlots":1},"@tokenByIndex_1172":{"entryPoint":5319,"id":1172,"parameterSlots":1,"returnSlots":1},"@tokenOfOwnerByIndex_1138":{"entryPoint":4658,"id":1138,"parameterSlots":2,"returnSlots":1},"@tokenURI_1644":{"entryPoint":9474,"id":1644,"parameterSlots":1,"returnSlots":1},"@totalSupply_1149":{"entryPoint":3740,"id":1149,"parameterSlots":0,"returnSlots":1},"@transferFrom_1776":{"entryPoint":4562,"id":1776,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":15522,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":15634,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":15700,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":15766,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":15787,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":15833,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":15854,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":15875,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":15896,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr":{"entryPoint":15942,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":15988,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":16009,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":16054,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":16118,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":16201,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":16332,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":16396,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":16460,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":16505,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":16550,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_addresst_uint256":{"entryPoint":16623,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_uint256":{"entryPoint":16830,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_address_$dyn_memory_ptr":{"entryPoint":16875,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256t_uint256":{"entryPoint":16967,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encodeUpdatedPos_t_address_to_t_address":{"entryPoint":17050,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr":{"entryPoint":17074,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":17094,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":17109,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack":{"entryPoint":17124,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":17218,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":17335,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":17350,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_enum$_CardType_$22_to_t_uint8":{"entryPoint":17407,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr":{"entryPoint":17422,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":17479,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":17536,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":17585,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c_to_t_string_memory_ptr_fromStack":{"entryPoint":17620,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":17655,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":17690,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack":{"entryPoint":17725,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":17760,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":17795,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":17830,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack":{"entryPoint":17865,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":17900,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":17935,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":17970,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc_to_t_string_memory_ptr_fromStack":{"entryPoint":18005,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":18040,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314_to_t_string_memory_ptr_fromStack":{"entryPoint":18075,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr":{"entryPoint":18110,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr_fromStack":{"entryPoint":18287,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":18464,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":18479,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32_fromStack":{"entryPoint":18494,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":18509,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":18545,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":18572,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_uint32__to_t_array$_t_address_$dyn_memory_ptr_t_uint32__fromStack_reversed":{"entryPoint":18648,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":18696,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":18730,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18757,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address__fromStack_reversed":{"entryPoint":18791,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18916,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18948,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18980,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19012,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19044,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19076,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19108,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19140,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19172,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19204,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19236,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19268,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19300,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19332,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19364,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_Card_$87_memory_ptr__to_t_struct$_Card_$87_memory_ptr__fromStack_reversed":{"entryPoint":19396,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":19430,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_string_memory_ptr__to_t_uint256_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19457,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_memory":{"entryPoint":19505,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":19532,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":19542,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":19586,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":19635,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":19684,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr":{"entryPoint":19700,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":19716,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr":{"entryPoint":19727,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":19738,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":19749,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":19760,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr":{"entryPoint":19773,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack":{"entryPoint":19786,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":19803,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":19820,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr":{"entryPoint":19837,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":19854,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":19871,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":19882,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":19968,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":20058,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":20110,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":20128,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":20140,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_enum$_CardType_$22":{"entryPoint":20184,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":20203,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":20235,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":20245,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_enum$_CardType_$22_to_t_uint8":{"entryPoint":20261,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":20279,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":20294,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":20345,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":20395,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":20444,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":20517,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":20564,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":20611,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":20658,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":20705,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":20752,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":20799,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":20846,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":20851,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":20856,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":20861,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":20866,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":20871,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":20888,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c":{"entryPoint":20967,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":21046,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":21125,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57":{"entryPoint":21204,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":21245,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":21324,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":21365,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6":{"entryPoint":21444,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":21485,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":21526,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":21605,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc":{"entryPoint":21684,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":21763,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314":{"entryPoint":21842,"id":null,"parameterSlots":1,"returnSlots":0},"validator_assert_t_enum$_CardType_$22":{"entryPoint":21921,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":21941,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":21964,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":21987,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":22010,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:48571:20","statements":[{"body":{"nodeType":"YulBlock","src":"126:620:20","statements":[{"nodeType":"YulAssignment","src":"136:90:20","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"218:6:20"}],"functionName":{"name":"array_allocation_size_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"161:56:20"},"nodeType":"YulFunctionCall","src":"161:64:20"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"145:15:20"},"nodeType":"YulFunctionCall","src":"145:81:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"136:5:20"}]},{"nodeType":"YulVariableDeclaration","src":"235:16:20","value":{"name":"array","nodeType":"YulIdentifier","src":"246:5:20"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"239:3:20","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"268:5:20"},{"name":"length","nodeType":"YulIdentifier","src":"275:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"261:6:20"},"nodeType":"YulFunctionCall","src":"261:21:20"},"nodeType":"YulExpressionStatement","src":"261:21:20"},{"nodeType":"YulAssignment","src":"291:23:20","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"302:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"309:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"298:3:20"},"nodeType":"YulFunctionCall","src":"298:16:20"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"291:3:20"}]},{"nodeType":"YulVariableDeclaration","src":"324:17:20","value":{"name":"offset","nodeType":"YulIdentifier","src":"335:6:20"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"328:3:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"390:103:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"404:77:20"},"nodeType":"YulFunctionCall","src":"404:79:20"},"nodeType":"YulExpressionStatement","src":"404:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"360:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"369:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"377:4:20","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"365:3:20"},"nodeType":"YulFunctionCall","src":"365:17:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"356:3:20"},"nodeType":"YulFunctionCall","src":"356:27:20"},{"name":"end","nodeType":"YulIdentifier","src":"385:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"353:2:20"},"nodeType":"YulFunctionCall","src":"353:36:20"},"nodeType":"YulIf","src":"350:143:20"},{"body":{"nodeType":"YulBlock","src":"562:178:20","statements":[{"nodeType":"YulVariableDeclaration","src":"577:21:20","value":{"name":"src","nodeType":"YulIdentifier","src":"595:3:20"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"581:10:20","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"619:3:20"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"645:10:20"},{"name":"end","nodeType":"YulIdentifier","src":"657:3:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"624:20:20"},"nodeType":"YulFunctionCall","src":"624:37:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"612:6:20"},"nodeType":"YulFunctionCall","src":"612:50:20"},"nodeType":"YulExpressionStatement","src":"612:50:20"},{"nodeType":"YulAssignment","src":"675:21:20","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"686:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"691:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"682:3:20"},"nodeType":"YulFunctionCall","src":"682:14:20"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"675:3:20"}]},{"nodeType":"YulAssignment","src":"709:21:20","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"720:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"725:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:20"},"nodeType":"YulFunctionCall","src":"716:14:20"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"709:3:20"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"524:1:20"},{"name":"length","nodeType":"YulIdentifier","src":"527:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"521:2:20"},"nodeType":"YulFunctionCall","src":"521:13:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"535:18:20","statements":[{"nodeType":"YulAssignment","src":"537:14:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"546:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"549:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"542:3:20"},"nodeType":"YulFunctionCall","src":"542:9:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"537:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"506:14:20","statements":[{"nodeType":"YulVariableDeclaration","src":"508:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"517:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"512:1:20","type":""}]}]},"src":"502:238:20"}]},"name":"abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"96:6:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"104:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"112:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"120:5:20","type":""}],"src":"24:722:20"},{"body":{"nodeType":"YulBlock","src":"835:327:20","statements":[{"nodeType":"YulAssignment","src":"845:74:20","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"911:6:20"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"870:40:20"},"nodeType":"YulFunctionCall","src":"870:48:20"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"854:15:20"},"nodeType":"YulFunctionCall","src":"854:65:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"845:5:20"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"935:5:20"},{"name":"length","nodeType":"YulIdentifier","src":"942:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"928:6:20"},"nodeType":"YulFunctionCall","src":"928:21:20"},"nodeType":"YulExpressionStatement","src":"928:21:20"},{"nodeType":"YulVariableDeclaration","src":"958:27:20","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"973:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"980:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"969:3:20"},"nodeType":"YulFunctionCall","src":"969:16:20"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"962:3:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"1023:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"1025:77:20"},"nodeType":"YulFunctionCall","src":"1025:79:20"},"nodeType":"YulExpressionStatement","src":"1025:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1004:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"1009:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1000:3:20"},"nodeType":"YulFunctionCall","src":"1000:16:20"},{"name":"end","nodeType":"YulIdentifier","src":"1018:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"997:2:20"},"nodeType":"YulFunctionCall","src":"997:25:20"},"nodeType":"YulIf","src":"994:112:20"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1139:3:20"},{"name":"dst","nodeType":"YulIdentifier","src":"1144:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"1149:6:20"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"1115:23:20"},"nodeType":"YulFunctionCall","src":"1115:41:20"},"nodeType":"YulExpressionStatement","src":"1115:41:20"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"808:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"813:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"821:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"829:5:20","type":""}],"src":"752:410:20"},{"body":{"nodeType":"YulBlock","src":"1252:328:20","statements":[{"nodeType":"YulAssignment","src":"1262:75:20","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1329:6:20"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"1287:41:20"},"nodeType":"YulFunctionCall","src":"1287:49:20"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1271:15:20"},"nodeType":"YulFunctionCall","src":"1271:66:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1262:5:20"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"1353:5:20"},{"name":"length","nodeType":"YulIdentifier","src":"1360:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1346:6:20"},"nodeType":"YulFunctionCall","src":"1346:21:20"},"nodeType":"YulExpressionStatement","src":"1346:21:20"},{"nodeType":"YulVariableDeclaration","src":"1376:27:20","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"1391:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"1398:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1387:3:20"},"nodeType":"YulFunctionCall","src":"1387:16:20"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1380:3:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"1441:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"1443:77:20"},"nodeType":"YulFunctionCall","src":"1443:79:20"},"nodeType":"YulExpressionStatement","src":"1443:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1422:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"1427:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1418:3:20"},"nodeType":"YulFunctionCall","src":"1418:16:20"},{"name":"end","nodeType":"YulIdentifier","src":"1436:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1415:2:20"},"nodeType":"YulFunctionCall","src":"1415:25:20"},"nodeType":"YulIf","src":"1412:112:20"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1557:3:20"},{"name":"dst","nodeType":"YulIdentifier","src":"1562:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"1567:6:20"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"1533:23:20"},"nodeType":"YulFunctionCall","src":"1533:41:20"},"nodeType":"YulExpressionStatement","src":"1533:41:20"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1225:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"1230:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"1238:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1246:5:20","type":""}],"src":"1168:412:20"},{"body":{"nodeType":"YulBlock","src":"1638:87:20","statements":[{"nodeType":"YulAssignment","src":"1648:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1670:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1657:12:20"},"nodeType":"YulFunctionCall","src":"1657:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1648:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1713:5:20"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1686:26:20"},"nodeType":"YulFunctionCall","src":"1686:33:20"},"nodeType":"YulExpressionStatement","src":"1686:33:20"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1616:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"1624:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1632:5:20","type":""}],"src":"1586:139:20"},{"body":{"nodeType":"YulBlock","src":"1825:293:20","statements":[{"body":{"nodeType":"YulBlock","src":"1874:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"1876:77:20"},"nodeType":"YulFunctionCall","src":"1876:79:20"},"nodeType":"YulExpressionStatement","src":"1876:79:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1853:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"1861:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1849:3:20"},"nodeType":"YulFunctionCall","src":"1849:17:20"},{"name":"end","nodeType":"YulIdentifier","src":"1868:3:20"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1845:3:20"},"nodeType":"YulFunctionCall","src":"1845:27:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1838:6:20"},"nodeType":"YulFunctionCall","src":"1838:35:20"},"nodeType":"YulIf","src":"1835:122:20"},{"nodeType":"YulVariableDeclaration","src":"1966:34:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1993:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1980:12:20"},"nodeType":"YulFunctionCall","src":"1980:20:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1970:6:20","type":""}]},{"nodeType":"YulAssignment","src":"2009:103:20","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2085:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"2093:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2081:3:20"},"nodeType":"YulFunctionCall","src":"2081:17:20"},{"name":"length","nodeType":"YulIdentifier","src":"2100:6:20"},{"name":"end","nodeType":"YulIdentifier","src":"2108:3:20"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2018:62:20"},"nodeType":"YulFunctionCall","src":"2018:94:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2009:5:20"}]}]},"name":"abi_decode_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1803:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"1811:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1819:5:20","type":""}],"src":"1748:370:20"},{"body":{"nodeType":"YulBlock","src":"2173:84:20","statements":[{"nodeType":"YulAssignment","src":"2183:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2205:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2192:12:20"},"nodeType":"YulFunctionCall","src":"2192:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2183:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2245:5:20"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"2221:23:20"},"nodeType":"YulFunctionCall","src":"2221:30:20"},"nodeType":"YulExpressionStatement","src":"2221:30:20"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2151:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"2159:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2167:5:20","type":""}],"src":"2124:133:20"},{"body":{"nodeType":"YulBlock","src":"2314:86:20","statements":[{"nodeType":"YulAssignment","src":"2324:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2346:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2333:12:20"},"nodeType":"YulFunctionCall","src":"2333:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2324:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2388:5:20"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"2362:25:20"},"nodeType":"YulFunctionCall","src":"2362:32:20"},"nodeType":"YulExpressionStatement","src":"2362:32:20"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2292:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"2300:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2308:5:20","type":""}],"src":"2263:137:20"},{"body":{"nodeType":"YulBlock","src":"2468:79:20","statements":[{"nodeType":"YulAssignment","src":"2478:22:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2493:6:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2487:5:20"},"nodeType":"YulFunctionCall","src":"2487:13:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2478:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2535:5:20"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"2509:25:20"},"nodeType":"YulFunctionCall","src":"2509:32:20"},"nodeType":"YulExpressionStatement","src":"2509:32:20"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2446:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"2454:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2462:5:20","type":""}],"src":"2406:141:20"},{"body":{"nodeType":"YulBlock","src":"2627:277:20","statements":[{"body":{"nodeType":"YulBlock","src":"2676:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2678:77:20"},"nodeType":"YulFunctionCall","src":"2678:79:20"},"nodeType":"YulExpressionStatement","src":"2678:79:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2655:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"2663:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2651:3:20"},"nodeType":"YulFunctionCall","src":"2651:17:20"},{"name":"end","nodeType":"YulIdentifier","src":"2670:3:20"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2647:3:20"},"nodeType":"YulFunctionCall","src":"2647:27:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2640:6:20"},"nodeType":"YulFunctionCall","src":"2640:35:20"},"nodeType":"YulIf","src":"2637:122:20"},{"nodeType":"YulVariableDeclaration","src":"2768:34:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2795:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2782:12:20"},"nodeType":"YulFunctionCall","src":"2782:20:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2772:6:20","type":""}]},{"nodeType":"YulAssignment","src":"2811:87:20","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2871:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"2879:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2867:3:20"},"nodeType":"YulFunctionCall","src":"2867:17:20"},{"name":"length","nodeType":"YulIdentifier","src":"2886:6:20"},{"name":"end","nodeType":"YulIdentifier","src":"2894:3:20"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"2820:46:20"},"nodeType":"YulFunctionCall","src":"2820:78:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2811:5:20"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2605:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"2613:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2621:5:20","type":""}],"src":"2566:338:20"},{"body":{"nodeType":"YulBlock","src":"2986:278:20","statements":[{"body":{"nodeType":"YulBlock","src":"3035:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"3037:77:20"},"nodeType":"YulFunctionCall","src":"3037:79:20"},"nodeType":"YulExpressionStatement","src":"3037:79:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3014:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"3022:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3010:3:20"},"nodeType":"YulFunctionCall","src":"3010:17:20"},{"name":"end","nodeType":"YulIdentifier","src":"3029:3:20"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3006:3:20"},"nodeType":"YulFunctionCall","src":"3006:27:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2999:6:20"},"nodeType":"YulFunctionCall","src":"2999:35:20"},"nodeType":"YulIf","src":"2996:122:20"},{"nodeType":"YulVariableDeclaration","src":"3127:34:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3154:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3141:12:20"},"nodeType":"YulFunctionCall","src":"3141:20:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3131:6:20","type":""}]},{"nodeType":"YulAssignment","src":"3170:88:20","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3231:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"3239:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3227:3:20"},"nodeType":"YulFunctionCall","src":"3227:17:20"},{"name":"length","nodeType":"YulIdentifier","src":"3246:6:20"},{"name":"end","nodeType":"YulIdentifier","src":"3254:3:20"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"3179:47:20"},"nodeType":"YulFunctionCall","src":"3179:79:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3170:5:20"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2964:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"2972:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2980:5:20","type":""}],"src":"2924:340:20"},{"body":{"nodeType":"YulBlock","src":"3322:87:20","statements":[{"nodeType":"YulAssignment","src":"3332:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3354:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3341:12:20"},"nodeType":"YulFunctionCall","src":"3341:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3332:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3397:5:20"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3370:26:20"},"nodeType":"YulFunctionCall","src":"3370:33:20"},"nodeType":"YulExpressionStatement","src":"3370:33:20"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3300:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"3308:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3316:5:20","type":""}],"src":"3270:139:20"},{"body":{"nodeType":"YulBlock","src":"3481:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"3527:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3529:77:20"},"nodeType":"YulFunctionCall","src":"3529:79:20"},"nodeType":"YulExpressionStatement","src":"3529:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3502:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"3511:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3498:3:20"},"nodeType":"YulFunctionCall","src":"3498:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"3523:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3494:3:20"},"nodeType":"YulFunctionCall","src":"3494:32:20"},"nodeType":"YulIf","src":"3491:119:20"},{"nodeType":"YulBlock","src":"3620:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3635:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"3649:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3639:6:20","type":""}]},{"nodeType":"YulAssignment","src":"3664:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3699:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"3710:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3695:3:20"},"nodeType":"YulFunctionCall","src":"3695:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3719:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3674:20:20"},"nodeType":"YulFunctionCall","src":"3674:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3664:6:20"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3451:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3462:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3474:6:20","type":""}],"src":"3415:329:20"},{"body":{"nodeType":"YulBlock","src":"3833:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"3879:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3881:77:20"},"nodeType":"YulFunctionCall","src":"3881:79:20"},"nodeType":"YulExpressionStatement","src":"3881:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3854:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"3863:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3850:3:20"},"nodeType":"YulFunctionCall","src":"3850:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"3875:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3846:3:20"},"nodeType":"YulFunctionCall","src":"3846:32:20"},"nodeType":"YulIf","src":"3843:119:20"},{"nodeType":"YulBlock","src":"3972:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3987:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4001:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3991:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4016:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4051:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4062:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4047:3:20"},"nodeType":"YulFunctionCall","src":"4047:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4071:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4026:20:20"},"nodeType":"YulFunctionCall","src":"4026:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4016:6:20"}]}]},{"nodeType":"YulBlock","src":"4099:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4114:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4128:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4118:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4144:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4179:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4190:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4175:3:20"},"nodeType":"YulFunctionCall","src":"4175:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4199:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4154:20:20"},"nodeType":"YulFunctionCall","src":"4154:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4144:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3795:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3806:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3818:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3826:6:20","type":""}],"src":"3750:474:20"},{"body":{"nodeType":"YulBlock","src":"4330:519:20","statements":[{"body":{"nodeType":"YulBlock","src":"4376:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4378:77:20"},"nodeType":"YulFunctionCall","src":"4378:79:20"},"nodeType":"YulExpressionStatement","src":"4378:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4351:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"4360:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4347:3:20"},"nodeType":"YulFunctionCall","src":"4347:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"4372:2:20","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4343:3:20"},"nodeType":"YulFunctionCall","src":"4343:32:20"},"nodeType":"YulIf","src":"4340:119:20"},{"nodeType":"YulBlock","src":"4469:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4484:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4498:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4488:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4513:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4548:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4559:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4544:3:20"},"nodeType":"YulFunctionCall","src":"4544:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4568:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4523:20:20"},"nodeType":"YulFunctionCall","src":"4523:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4513:6:20"}]}]},{"nodeType":"YulBlock","src":"4596:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4611:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4625:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4615:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4641:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4676:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4687:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4672:3:20"},"nodeType":"YulFunctionCall","src":"4672:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4696:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4651:20:20"},"nodeType":"YulFunctionCall","src":"4651:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4641:6:20"}]}]},{"nodeType":"YulBlock","src":"4724:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4739:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4753:2:20","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4743:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4769:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4804:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4815:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4800:3:20"},"nodeType":"YulFunctionCall","src":"4800:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4824:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4779:20:20"},"nodeType":"YulFunctionCall","src":"4779:53:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4769:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4284:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4295:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4307:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4315:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4323:6:20","type":""}],"src":"4230:619:20"},{"body":{"nodeType":"YulBlock","src":"4981:817:20","statements":[{"body":{"nodeType":"YulBlock","src":"5028:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5030:77:20"},"nodeType":"YulFunctionCall","src":"5030:79:20"},"nodeType":"YulExpressionStatement","src":"5030:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5002:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"5011:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4998:3:20"},"nodeType":"YulFunctionCall","src":"4998:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"5023:3:20","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4994:3:20"},"nodeType":"YulFunctionCall","src":"4994:33:20"},"nodeType":"YulIf","src":"4991:120:20"},{"nodeType":"YulBlock","src":"5121:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5136:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5150:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5140:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5165:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5200:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5211:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5196:3:20"},"nodeType":"YulFunctionCall","src":"5196:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5220:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5175:20:20"},"nodeType":"YulFunctionCall","src":"5175:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5165:6:20"}]}]},{"nodeType":"YulBlock","src":"5248:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5263:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5277:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5267:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5293:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5328:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5339:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5324:3:20"},"nodeType":"YulFunctionCall","src":"5324:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5348:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5303:20:20"},"nodeType":"YulFunctionCall","src":"5303:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5293:6:20"}]}]},{"nodeType":"YulBlock","src":"5376:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5391:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5405:2:20","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5395:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5421:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5456:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5467:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5452:3:20"},"nodeType":"YulFunctionCall","src":"5452:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5476:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5431:20:20"},"nodeType":"YulFunctionCall","src":"5431:53:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5421:6:20"}]}]},{"nodeType":"YulBlock","src":"5504:287:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5519:46:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5550:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"5561:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5546:3:20"},"nodeType":"YulFunctionCall","src":"5546:18:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5533:12:20"},"nodeType":"YulFunctionCall","src":"5533:32:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5523:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"5612:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5614:77:20"},"nodeType":"YulFunctionCall","src":"5614:79:20"},"nodeType":"YulExpressionStatement","src":"5614:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5584:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"5592:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5581:2:20"},"nodeType":"YulFunctionCall","src":"5581:30:20"},"nodeType":"YulIf","src":"5578:117:20"},{"nodeType":"YulAssignment","src":"5709:72:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5753:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5764:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5749:3:20"},"nodeType":"YulFunctionCall","src":"5749:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5773:7:20"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"5719:29:20"},"nodeType":"YulFunctionCall","src":"5719:62:20"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5709:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4927:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4938:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4950:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4958:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4966:6:20","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4974:6:20","type":""}],"src":"4855:943:20"},{"body":{"nodeType":"YulBlock","src":"5884:388:20","statements":[{"body":{"nodeType":"YulBlock","src":"5930:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5932:77:20"},"nodeType":"YulFunctionCall","src":"5932:79:20"},"nodeType":"YulExpressionStatement","src":"5932:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5905:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"5914:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5901:3:20"},"nodeType":"YulFunctionCall","src":"5901:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"5926:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5897:3:20"},"nodeType":"YulFunctionCall","src":"5897:32:20"},"nodeType":"YulIf","src":"5894:119:20"},{"nodeType":"YulBlock","src":"6023:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6038:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"6052:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6042:6:20","type":""}]},{"nodeType":"YulAssignment","src":"6067:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6102:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"6113:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6098:3:20"},"nodeType":"YulFunctionCall","src":"6098:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6122:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6077:20:20"},"nodeType":"YulFunctionCall","src":"6077:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6067:6:20"}]}]},{"nodeType":"YulBlock","src":"6150:115:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6165:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"6179:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6169:6:20","type":""}]},{"nodeType":"YulAssignment","src":"6195:60:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6227:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"6238:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6223:3:20"},"nodeType":"YulFunctionCall","src":"6223:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6247:7:20"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"6205:17:20"},"nodeType":"YulFunctionCall","src":"6205:50:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6195:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5846:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5857:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5869:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5877:6:20","type":""}],"src":"5804:468:20"},{"body":{"nodeType":"YulBlock","src":"6361:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"6407:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6409:77:20"},"nodeType":"YulFunctionCall","src":"6409:79:20"},"nodeType":"YulExpressionStatement","src":"6409:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6382:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"6391:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6378:3:20"},"nodeType":"YulFunctionCall","src":"6378:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"6403:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6374:3:20"},"nodeType":"YulFunctionCall","src":"6374:32:20"},"nodeType":"YulIf","src":"6371:119:20"},{"nodeType":"YulBlock","src":"6500:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6515:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"6529:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6519:6:20","type":""}]},{"nodeType":"YulAssignment","src":"6544:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6579:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"6590:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6575:3:20"},"nodeType":"YulFunctionCall","src":"6575:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6599:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6554:20:20"},"nodeType":"YulFunctionCall","src":"6554:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6544:6:20"}]}]},{"nodeType":"YulBlock","src":"6627:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6642:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"6656:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6646:6:20","type":""}]},{"nodeType":"YulAssignment","src":"6672:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6707:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"6718:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6703:3:20"},"nodeType":"YulFunctionCall","src":"6703:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6727:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6682:20:20"},"nodeType":"YulFunctionCall","src":"6682:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6672:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6323:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6334:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6346:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6354:6:20","type":""}],"src":"6278:474:20"},{"body":{"nodeType":"YulBlock","src":"6823:262:20","statements":[{"body":{"nodeType":"YulBlock","src":"6869:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6871:77:20"},"nodeType":"YulFunctionCall","src":"6871:79:20"},"nodeType":"YulExpressionStatement","src":"6871:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6844:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"6853:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6840:3:20"},"nodeType":"YulFunctionCall","src":"6840:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"6865:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6836:3:20"},"nodeType":"YulFunctionCall","src":"6836:32:20"},"nodeType":"YulIf","src":"6833:119:20"},{"nodeType":"YulBlock","src":"6962:116:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6977:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"6991:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6981:6:20","type":""}]},{"nodeType":"YulAssignment","src":"7006:62:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7040:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"7051:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7036:3:20"},"nodeType":"YulFunctionCall","src":"7036:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7060:7:20"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"7016:19:20"},"nodeType":"YulFunctionCall","src":"7016:52:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7006:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6793:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6804:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6816:6:20","type":""}],"src":"6758:327:20"},{"body":{"nodeType":"YulBlock","src":"7167:273:20","statements":[{"body":{"nodeType":"YulBlock","src":"7213:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7215:77:20"},"nodeType":"YulFunctionCall","src":"7215:79:20"},"nodeType":"YulExpressionStatement","src":"7215:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7188:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"7197:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7184:3:20"},"nodeType":"YulFunctionCall","src":"7184:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"7209:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7180:3:20"},"nodeType":"YulFunctionCall","src":"7180:32:20"},"nodeType":"YulIf","src":"7177:119:20"},{"nodeType":"YulBlock","src":"7306:127:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7321:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7335:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7325:6:20","type":""}]},{"nodeType":"YulAssignment","src":"7350:73:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7395:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"7406:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7391:3:20"},"nodeType":"YulFunctionCall","src":"7391:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7415:7:20"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"7360:30:20"},"nodeType":"YulFunctionCall","src":"7360:63:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7350:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7137:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7148:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7160:6:20","type":""}],"src":"7091:349:20"},{"body":{"nodeType":"YulBlock","src":"7522:433:20","statements":[{"body":{"nodeType":"YulBlock","src":"7568:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7570:77:20"},"nodeType":"YulFunctionCall","src":"7570:79:20"},"nodeType":"YulExpressionStatement","src":"7570:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7543:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"7552:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7539:3:20"},"nodeType":"YulFunctionCall","src":"7539:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"7564:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7535:3:20"},"nodeType":"YulFunctionCall","src":"7535:32:20"},"nodeType":"YulIf","src":"7532:119:20"},{"nodeType":"YulBlock","src":"7661:287:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7676:45:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7707:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"7718:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7703:3:20"},"nodeType":"YulFunctionCall","src":"7703:17:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7690:12:20"},"nodeType":"YulFunctionCall","src":"7690:31:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7680:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"7768:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7770:77:20"},"nodeType":"YulFunctionCall","src":"7770:79:20"},"nodeType":"YulExpressionStatement","src":"7770:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7740:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"7748:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7737:2:20"},"nodeType":"YulFunctionCall","src":"7737:30:20"},"nodeType":"YulIf","src":"7734:117:20"},{"nodeType":"YulAssignment","src":"7865:73:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7910:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"7921:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7906:3:20"},"nodeType":"YulFunctionCall","src":"7906:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7930:7:20"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7875:30:20"},"nodeType":"YulFunctionCall","src":"7875:63:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7865:6:20"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7492:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7503:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7515:6:20","type":""}],"src":"7446:509:20"},{"body":{"nodeType":"YulBlock","src":"8125:1287:20","statements":[{"body":{"nodeType":"YulBlock","src":"8172:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8174:77:20"},"nodeType":"YulFunctionCall","src":"8174:79:20"},"nodeType":"YulExpressionStatement","src":"8174:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8146:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"8155:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8142:3:20"},"nodeType":"YulFunctionCall","src":"8142:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"8167:3:20","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8138:3:20"},"nodeType":"YulFunctionCall","src":"8138:33:20"},"nodeType":"YulIf","src":"8135:120:20"},{"nodeType":"YulBlock","src":"8265:287:20","statements":[{"nodeType":"YulVariableDeclaration","src":"8280:45:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8311:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"8322:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8307:3:20"},"nodeType":"YulFunctionCall","src":"8307:17:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8294:12:20"},"nodeType":"YulFunctionCall","src":"8294:31:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8284:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"8372:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"8374:77:20"},"nodeType":"YulFunctionCall","src":"8374:79:20"},"nodeType":"YulExpressionStatement","src":"8374:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8344:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8352:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8341:2:20"},"nodeType":"YulFunctionCall","src":"8341:30:20"},"nodeType":"YulIf","src":"8338:117:20"},{"nodeType":"YulAssignment","src":"8469:73:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8514:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"8525:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8510:3:20"},"nodeType":"YulFunctionCall","src":"8510:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8534:7:20"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"8479:30:20"},"nodeType":"YulFunctionCall","src":"8479:63:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8469:6:20"}]}]},{"nodeType":"YulBlock","src":"8562:288:20","statements":[{"nodeType":"YulVariableDeclaration","src":"8577:46:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8608:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"8619:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8604:3:20"},"nodeType":"YulFunctionCall","src":"8604:18:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8591:12:20"},"nodeType":"YulFunctionCall","src":"8591:32:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8581:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"8670:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"8672:77:20"},"nodeType":"YulFunctionCall","src":"8672:79:20"},"nodeType":"YulExpressionStatement","src":"8672:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8642:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8650:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8639:2:20"},"nodeType":"YulFunctionCall","src":"8639:30:20"},"nodeType":"YulIf","src":"8636:117:20"},{"nodeType":"YulAssignment","src":"8767:73:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8812:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"8823:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8808:3:20"},"nodeType":"YulFunctionCall","src":"8808:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8832:7:20"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"8777:30:20"},"nodeType":"YulFunctionCall","src":"8777:63:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8767:6:20"}]}]},{"nodeType":"YulBlock","src":"8860:288:20","statements":[{"nodeType":"YulVariableDeclaration","src":"8875:46:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8906:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"8917:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8902:3:20"},"nodeType":"YulFunctionCall","src":"8902:18:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8889:12:20"},"nodeType":"YulFunctionCall","src":"8889:32:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8879:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"8968:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"8970:77:20"},"nodeType":"YulFunctionCall","src":"8970:79:20"},"nodeType":"YulExpressionStatement","src":"8970:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8940:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8948:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8937:2:20"},"nodeType":"YulFunctionCall","src":"8937:30:20"},"nodeType":"YulIf","src":"8934:117:20"},{"nodeType":"YulAssignment","src":"9065:73:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9110:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"9121:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9106:3:20"},"nodeType":"YulFunctionCall","src":"9106:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9130:7:20"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"9075:30:20"},"nodeType":"YulFunctionCall","src":"9075:63:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9065:6:20"}]}]},{"nodeType":"YulBlock","src":"9158:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"9173:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"9187:2:20","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9177:6:20","type":""}]},{"nodeType":"YulAssignment","src":"9203:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9238:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"9249:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9234:3:20"},"nodeType":"YulFunctionCall","src":"9234:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9258:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9213:20:20"},"nodeType":"YulFunctionCall","src":"9213:53:20"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9203:6:20"}]}]},{"nodeType":"YulBlock","src":"9286:119:20","statements":[{"nodeType":"YulVariableDeclaration","src":"9301:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"9315:3:20","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9305:6:20","type":""}]},{"nodeType":"YulAssignment","src":"9332:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9367:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"9378:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9363:3:20"},"nodeType":"YulFunctionCall","src":"9363:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9387:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9342:20:20"},"nodeType":"YulFunctionCall","src":"9342:53:20"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"9332:6:20"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8063:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8074:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8086:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8094:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8102:6:20","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8110:6:20","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8118:6:20","type":""}],"src":"7961:1451:20"},{"body":{"nodeType":"YulBlock","src":"9484:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"9530:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9532:77:20"},"nodeType":"YulFunctionCall","src":"9532:79:20"},"nodeType":"YulExpressionStatement","src":"9532:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9505:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"9514:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9501:3:20"},"nodeType":"YulFunctionCall","src":"9501:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"9526:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9497:3:20"},"nodeType":"YulFunctionCall","src":"9497:32:20"},"nodeType":"YulIf","src":"9494:119:20"},{"nodeType":"YulBlock","src":"9623:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"9638:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"9652:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9642:6:20","type":""}]},{"nodeType":"YulAssignment","src":"9667:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9702:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"9713:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9698:3:20"},"nodeType":"YulFunctionCall","src":"9698:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9722:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9677:20:20"},"nodeType":"YulFunctionCall","src":"9677:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9667:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9454:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9465:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9477:6:20","type":""}],"src":"9418:329:20"},{"body":{"nodeType":"YulBlock","src":"9861:576:20","statements":[{"body":{"nodeType":"YulBlock","src":"9907:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9909:77:20"},"nodeType":"YulFunctionCall","src":"9909:79:20"},"nodeType":"YulExpressionStatement","src":"9909:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9882:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"9891:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9878:3:20"},"nodeType":"YulFunctionCall","src":"9878:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"9903:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9874:3:20"},"nodeType":"YulFunctionCall","src":"9874:32:20"},"nodeType":"YulIf","src":"9871:119:20"},{"nodeType":"YulBlock","src":"10000:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"10015:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"10029:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10019:6:20","type":""}]},{"nodeType":"YulAssignment","src":"10044:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10079:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"10090:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10075:3:20"},"nodeType":"YulFunctionCall","src":"10075:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10099:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10054:20:20"},"nodeType":"YulFunctionCall","src":"10054:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10044:6:20"}]}]},{"nodeType":"YulBlock","src":"10127:303:20","statements":[{"nodeType":"YulVariableDeclaration","src":"10142:46:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10173:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"10184:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10169:3:20"},"nodeType":"YulFunctionCall","src":"10169:18:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10156:12:20"},"nodeType":"YulFunctionCall","src":"10156:32:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10146:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"10235:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"10237:77:20"},"nodeType":"YulFunctionCall","src":"10237:79:20"},"nodeType":"YulExpressionStatement","src":"10237:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10207:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"10215:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10204:2:20"},"nodeType":"YulFunctionCall","src":"10204:30:20"},"nodeType":"YulIf","src":"10201:117:20"},{"nodeType":"YulAssignment","src":"10332:88:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10392:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"10403:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10388:3:20"},"nodeType":"YulFunctionCall","src":"10388:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10412:7:20"}],"functionName":{"name":"abi_decode_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"10342:45:20"},"nodeType":"YulFunctionCall","src":"10342:78:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10332:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9823:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9834:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9846:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9854:6:20","type":""}],"src":"9753:684:20"},{"body":{"nodeType":"YulBlock","src":"10543:519:20","statements":[{"body":{"nodeType":"YulBlock","src":"10589:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10591:77:20"},"nodeType":"YulFunctionCall","src":"10591:79:20"},"nodeType":"YulExpressionStatement","src":"10591:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10564:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"10573:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10560:3:20"},"nodeType":"YulFunctionCall","src":"10560:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"10585:2:20","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10556:3:20"},"nodeType":"YulFunctionCall","src":"10556:32:20"},"nodeType":"YulIf","src":"10553:119:20"},{"nodeType":"YulBlock","src":"10682:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"10697:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"10711:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10701:6:20","type":""}]},{"nodeType":"YulAssignment","src":"10726:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10761:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"10772:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10757:3:20"},"nodeType":"YulFunctionCall","src":"10757:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10781:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10736:20:20"},"nodeType":"YulFunctionCall","src":"10736:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10726:6:20"}]}]},{"nodeType":"YulBlock","src":"10809:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"10824:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"10838:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10828:6:20","type":""}]},{"nodeType":"YulAssignment","src":"10854:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10889:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"10900:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10885:3:20"},"nodeType":"YulFunctionCall","src":"10885:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10909:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10864:20:20"},"nodeType":"YulFunctionCall","src":"10864:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10854:6:20"}]}]},{"nodeType":"YulBlock","src":"10937:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"10952:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"10966:2:20","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10956:6:20","type":""}]},{"nodeType":"YulAssignment","src":"10982:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11017:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"11028:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11013:3:20"},"nodeType":"YulFunctionCall","src":"11013:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11037:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10992:20:20"},"nodeType":"YulFunctionCall","src":"10992:53:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10982:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10497:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10508:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10520:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10528:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10536:6:20","type":""}],"src":"10443:619:20"},{"body":{"nodeType":"YulBlock","src":"11148:99:20","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11192:6:20"},{"name":"pos","nodeType":"YulIdentifier","src":"11200:3:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"11158:33:20"},"nodeType":"YulFunctionCall","src":"11158:46:20"},"nodeType":"YulExpressionStatement","src":"11158:46:20"},{"nodeType":"YulAssignment","src":"11213:28:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11231:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"11236:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11227:3:20"},"nodeType":"YulFunctionCall","src":"11227:14:20"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"11213:10:20"}]}]},"name":"abi_encodeUpdatedPos_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"11121:6:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11129:3:20","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"11137:10:20","type":""}],"src":"11068:179:20"},{"body":{"nodeType":"YulBlock","src":"11373:116:20","statements":[{"nodeType":"YulAssignment","src":"11383:100:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11471:6:20"},{"name":"pos","nodeType":"YulIdentifier","src":"11479:3:20"}],"functionName":{"name":"abi_encode_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr","nodeType":"YulIdentifier","src":"11397:73:20"},"nodeType":"YulFunctionCall","src":"11397:86:20"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"11383:10:20"}]}]},"name":"abi_encodeUpdatedPos_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"11346:6:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11354:3:20","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"11362:10:20","type":""}],"src":"11253:236:20"},{"body":{"nodeType":"YulBlock","src":"11550:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11567:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11590:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"11572:17:20"},"nodeType":"YulFunctionCall","src":"11572:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11560:6:20"},"nodeType":"YulFunctionCall","src":"11560:37:20"},"nodeType":"YulExpressionStatement","src":"11560:37:20"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11538:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11545:3:20","type":""}],"src":"11495:108:20"},{"body":{"nodeType":"YulBlock","src":"11674:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11691:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11714:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"11696:17:20"},"nodeType":"YulFunctionCall","src":"11696:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11684:6:20"},"nodeType":"YulFunctionCall","src":"11684:37:20"},"nodeType":"YulExpressionStatement","src":"11684:37:20"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11662:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11669:3:20","type":""}],"src":"11609:118:20"},{"body":{"nodeType":"YulBlock","src":"11887:608:20","statements":[{"nodeType":"YulVariableDeclaration","src":"11897:68:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11959:5:20"}],"functionName":{"name":"array_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"11911:47:20"},"nodeType":"YulFunctionCall","src":"11911:54:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11901:6:20","type":""}]},{"nodeType":"YulAssignment","src":"11974:93:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12055:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"12060:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11981:73:20"},"nodeType":"YulFunctionCall","src":"11981:86:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11974:3:20"}]},{"nodeType":"YulVariableDeclaration","src":"12076:71:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12141:5:20"}],"functionName":{"name":"array_dataslot_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"12091:49:20"},"nodeType":"YulFunctionCall","src":"12091:56:20"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"12080:7:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12156:21:20","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"12170:7:20"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"12160:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"12246:224:20","statements":[{"nodeType":"YulVariableDeclaration","src":"12260:34:20","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"12287:6:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12281:5:20"},"nodeType":"YulFunctionCall","src":"12281:13:20"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"12264:13:20","type":""}]},{"nodeType":"YulAssignment","src":"12307:70:20","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"12358:13:20"},{"name":"pos","nodeType":"YulIdentifier","src":"12373:3:20"}],"functionName":{"name":"abi_encodeUpdatedPos_t_address_to_t_address","nodeType":"YulIdentifier","src":"12314:43:20"},"nodeType":"YulFunctionCall","src":"12314:63:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12307:3:20"}]},{"nodeType":"YulAssignment","src":"12390:70:20","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"12453:6:20"}],"functionName":{"name":"array_nextElement_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"12400:52:20"},"nodeType":"YulFunctionCall","src":"12400:60:20"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"12390:6:20"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12208:1:20"},{"name":"length","nodeType":"YulIdentifier","src":"12211:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12205:2:20"},"nodeType":"YulFunctionCall","src":"12205:13:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"12219:18:20","statements":[{"nodeType":"YulAssignment","src":"12221:14:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12230:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"12233:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12226:3:20"},"nodeType":"YulFunctionCall","src":"12226:9:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"12221:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"12190:14:20","statements":[{"nodeType":"YulVariableDeclaration","src":"12192:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"12201:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"12196:1:20","type":""}]}]},"src":"12186:284:20"},{"nodeType":"YulAssignment","src":"12479:10:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"12486:3:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12479:3:20"}]}]},"name":"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11866:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11873:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11882:3:20","type":""}],"src":"11763:732:20"},{"body":{"nodeType":"YulBlock","src":"12737:907:20","statements":[{"nodeType":"YulVariableDeclaration","src":"12747:88:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12829:5:20"}],"functionName":{"name":"array_length_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"12761:67:20"},"nodeType":"YulFunctionCall","src":"12761:74:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"12751:6:20","type":""}]},{"nodeType":"YulAssignment","src":"12844:113:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12945:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"12950:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12851:93:20"},"nodeType":"YulFunctionCall","src":"12851:106:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12844:3:20"}]},{"nodeType":"YulVariableDeclaration","src":"12966:20:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"12983:3:20"},"variables":[{"name":"headStart","nodeType":"YulTypedName","src":"12970:9:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12995:39:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13011:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13020:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"13028:4:20","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"13016:3:20"},"nodeType":"YulFunctionCall","src":"13016:17:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13007:3:20"},"nodeType":"YulFunctionCall","src":"13007:27:20"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"12999:4:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13043:91:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13128:5:20"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"13058:69:20"},"nodeType":"YulFunctionCall","src":"13058:76:20"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"13047:7:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13143:21:20","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"13157:7:20"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"13147:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"13233:366:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13254:3:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13263:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"13269:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13259:3:20"},"nodeType":"YulFunctionCall","src":"13259:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13247:6:20"},"nodeType":"YulFunctionCall","src":"13247:33:20"},"nodeType":"YulExpressionStatement","src":"13247:33:20"},{"nodeType":"YulVariableDeclaration","src":"13293:34:20","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13320:6:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13314:5:20"},"nodeType":"YulFunctionCall","src":"13314:13:20"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"13297:13:20","type":""}]},{"nodeType":"YulAssignment","src":"13340:112:20","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"13432:13:20"},{"name":"tail","nodeType":"YulIdentifier","src":"13447:4:20"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr","nodeType":"YulIdentifier","src":"13348:83:20"},"nodeType":"YulFunctionCall","src":"13348:104:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13340:4:20"}]},{"nodeType":"YulAssignment","src":"13465:90:20","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13548:6:20"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"13475:72:20"},"nodeType":"YulFunctionCall","src":"13475:80:20"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13465:6:20"}]},{"nodeType":"YulAssignment","src":"13568:21:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13579:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"13584:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13575:3:20"},"nodeType":"YulFunctionCall","src":"13575:14:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13568:3:20"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13195:1:20"},{"name":"length","nodeType":"YulIdentifier","src":"13198:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13192:2:20"},"nodeType":"YulFunctionCall","src":"13192:13:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13206:18:20","statements":[{"nodeType":"YulAssignment","src":"13208:14:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13217:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"13220:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13213:3:20"},"nodeType":"YulFunctionCall","src":"13213:9:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"13208:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"13177:14:20","statements":[{"nodeType":"YulVariableDeclaration","src":"13179:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"13188:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"13183:1:20","type":""}]}]},"src":"13173:426:20"},{"nodeType":"YulAssignment","src":"13608:11:20","value":{"name":"tail","nodeType":"YulIdentifier","src":"13615:4:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13608:3:20"}]},{"nodeType":"YulAssignment","src":"13628:10:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"13635:3:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13628:3:20"}]}]},"name":"abi_encode_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12716:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12723:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12732:3:20","type":""}],"src":"12573:1071:20"},{"body":{"nodeType":"YulBlock","src":"13709:50:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13726:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13746:5:20"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"13731:14:20"},"nodeType":"YulFunctionCall","src":"13731:21:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13719:6:20"},"nodeType":"YulFunctionCall","src":"13719:34:20"},"nodeType":"YulExpressionStatement","src":"13719:34:20"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13697:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13704:3:20","type":""}],"src":"13650:109:20"},{"body":{"nodeType":"YulBlock","src":"13855:270:20","statements":[{"nodeType":"YulVariableDeclaration","src":"13865:52:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13911:5:20"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"13879:31:20"},"nodeType":"YulFunctionCall","src":"13879:38:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13869:6:20","type":""}]},{"nodeType":"YulAssignment","src":"13926:77:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13991:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"13996:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13933:57:20"},"nodeType":"YulFunctionCall","src":"13933:70:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13926:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14038:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"14045:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14034:3:20"},"nodeType":"YulFunctionCall","src":"14034:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"14052:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"14057:6:20"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"14012:21:20"},"nodeType":"YulFunctionCall","src":"14012:52:20"},"nodeType":"YulExpressionStatement","src":"14012:52:20"},{"nodeType":"YulAssignment","src":"14073:46:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14084:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14111:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"14089:21:20"},"nodeType":"YulFunctionCall","src":"14089:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14080:3:20"},"nodeType":"YulFunctionCall","src":"14080:39:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14073:3:20"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13836:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13843:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13851:3:20","type":""}],"src":"13765:360:20"},{"body":{"nodeType":"YulBlock","src":"14195:75:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14212:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14257:5:20"}],"functionName":{"name":"convert_t_enum$_CardType_$22_to_t_uint8","nodeType":"YulIdentifier","src":"14217:39:20"},"nodeType":"YulFunctionCall","src":"14217:46:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14205:6:20"},"nodeType":"YulFunctionCall","src":"14205:59:20"},"nodeType":"YulExpressionStatement","src":"14205:59:20"}]},"name":"abi_encode_t_enum$_CardType_$22_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14183:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14190:3:20","type":""}],"src":"14131:139:20"},{"body":{"nodeType":"YulBlock","src":"14358:262:20","statements":[{"nodeType":"YulVariableDeclaration","src":"14368:53:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14415:5:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"14382:32:20"},"nodeType":"YulFunctionCall","src":"14382:39:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14372:6:20","type":""}]},{"nodeType":"YulAssignment","src":"14430:68:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14486:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"14491:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr","nodeType":"YulIdentifier","src":"14437:48:20"},"nodeType":"YulFunctionCall","src":"14437:61:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14430:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14533:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"14540:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14529:3:20"},"nodeType":"YulFunctionCall","src":"14529:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"14547:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"14552:6:20"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"14507:21:20"},"nodeType":"YulFunctionCall","src":"14507:52:20"},"nodeType":"YulExpressionStatement","src":"14507:52:20"},{"nodeType":"YulAssignment","src":"14568:46:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14579:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14606:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"14584:21:20"},"nodeType":"YulFunctionCall","src":"14584:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14575:3:20"},"nodeType":"YulFunctionCall","src":"14575:39:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14568:3:20"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14339:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14346:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14354:3:20","type":""}],"src":"14276:344:20"},{"body":{"nodeType":"YulBlock","src":"14718:272:20","statements":[{"nodeType":"YulVariableDeclaration","src":"14728:53:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14775:5:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"14742:32:20"},"nodeType":"YulFunctionCall","src":"14742:39:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14732:6:20","type":""}]},{"nodeType":"YulAssignment","src":"14790:78:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14856:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"14861:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14797:58:20"},"nodeType":"YulFunctionCall","src":"14797:71:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14790:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14903:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"14910:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14899:3:20"},"nodeType":"YulFunctionCall","src":"14899:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"14917:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"14922:6:20"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"14877:21:20"},"nodeType":"YulFunctionCall","src":"14877:52:20"},"nodeType":"YulExpressionStatement","src":"14877:52:20"},{"nodeType":"YulAssignment","src":"14938:46:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14949:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14976:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"14954:21:20"},"nodeType":"YulFunctionCall","src":"14954:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14945:3:20"},"nodeType":"YulFunctionCall","src":"14945:39:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14938:3:20"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14699:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14706:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14714:3:20","type":""}],"src":"14626:364:20"},{"body":{"nodeType":"YulBlock","src":"15106:267:20","statements":[{"nodeType":"YulVariableDeclaration","src":"15116:53:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15163:5:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"15130:32:20"},"nodeType":"YulFunctionCall","src":"15130:39:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15120:6:20","type":""}]},{"nodeType":"YulAssignment","src":"15178:96:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15262:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"15267:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15185:76:20"},"nodeType":"YulFunctionCall","src":"15185:89:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15178:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15309:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"15316:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15305:3:20"},"nodeType":"YulFunctionCall","src":"15305:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"15323:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"15328:6:20"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"15283:21:20"},"nodeType":"YulFunctionCall","src":"15283:52:20"},"nodeType":"YulExpressionStatement","src":"15283:52:20"},{"nodeType":"YulAssignment","src":"15344:23:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15355:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"15360:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15351:3:20"},"nodeType":"YulFunctionCall","src":"15351:16:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15344:3:20"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15087:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15094:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15102:3:20","type":""}],"src":"14996:377:20"},{"body":{"nodeType":"YulBlock","src":"15525:220:20","statements":[{"nodeType":"YulAssignment","src":"15535:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15601:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"15606:2:20","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15542:58:20"},"nodeType":"YulFunctionCall","src":"15542:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15535:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15707:3:20"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"15618:88:20"},"nodeType":"YulFunctionCall","src":"15618:93:20"},"nodeType":"YulExpressionStatement","src":"15618:93:20"},{"nodeType":"YulAssignment","src":"15720:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15731:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"15736:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15727:3:20"},"nodeType":"YulFunctionCall","src":"15727:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15720:3:20"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15513:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15521:3:20","type":""}],"src":"15379:366:20"},{"body":{"nodeType":"YulBlock","src":"15897:220:20","statements":[{"nodeType":"YulAssignment","src":"15907:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15973:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"15978:2:20","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15914:58:20"},"nodeType":"YulFunctionCall","src":"15914:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15907:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16079:3:20"}],"functionName":{"name":"store_literal_in_memory_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c","nodeType":"YulIdentifier","src":"15990:88:20"},"nodeType":"YulFunctionCall","src":"15990:93:20"},"nodeType":"YulExpressionStatement","src":"15990:93:20"},{"nodeType":"YulAssignment","src":"16092:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16103:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"16108:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16099:3:20"},"nodeType":"YulFunctionCall","src":"16099:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16092:3:20"}]}]},"name":"abi_encode_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15885:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15893:3:20","type":""}],"src":"15751:366:20"},{"body":{"nodeType":"YulBlock","src":"16269:220:20","statements":[{"nodeType":"YulAssignment","src":"16279:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16345:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"16350:2:20","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16286:58:20"},"nodeType":"YulFunctionCall","src":"16286:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16279:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16451:3:20"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"16362:88:20"},"nodeType":"YulFunctionCall","src":"16362:93:20"},"nodeType":"YulExpressionStatement","src":"16362:93:20"},{"nodeType":"YulAssignment","src":"16464:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16475:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"16480:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16471:3:20"},"nodeType":"YulFunctionCall","src":"16471:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16464:3:20"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16257:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16265:3:20","type":""}],"src":"16123:366:20"},{"body":{"nodeType":"YulBlock","src":"16641:220:20","statements":[{"nodeType":"YulAssignment","src":"16651:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16717:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"16722:2:20","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16658:58:20"},"nodeType":"YulFunctionCall","src":"16658:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16651:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16823:3:20"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"16734:88:20"},"nodeType":"YulFunctionCall","src":"16734:93:20"},"nodeType":"YulExpressionStatement","src":"16734:93:20"},{"nodeType":"YulAssignment","src":"16836:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16847:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"16852:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16843:3:20"},"nodeType":"YulFunctionCall","src":"16843:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16836:3:20"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16629:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16637:3:20","type":""}],"src":"16495:366:20"},{"body":{"nodeType":"YulBlock","src":"17013:220:20","statements":[{"nodeType":"YulAssignment","src":"17023:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17089:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17094:2:20","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17030:58:20"},"nodeType":"YulFunctionCall","src":"17030:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17023:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17195:3:20"}],"functionName":{"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulIdentifier","src":"17106:88:20"},"nodeType":"YulFunctionCall","src":"17106:93:20"},"nodeType":"YulExpressionStatement","src":"17106:93:20"},{"nodeType":"YulAssignment","src":"17208:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17219:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17224:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17215:3:20"},"nodeType":"YulFunctionCall","src":"17215:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17208:3:20"}]}]},"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17001:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17009:3:20","type":""}],"src":"16867:366:20"},{"body":{"nodeType":"YulBlock","src":"17385:220:20","statements":[{"nodeType":"YulAssignment","src":"17395:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17461:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17466:2:20","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17402:58:20"},"nodeType":"YulFunctionCall","src":"17402:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17395:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17567:3:20"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"17478:88:20"},"nodeType":"YulFunctionCall","src":"17478:93:20"},"nodeType":"YulExpressionStatement","src":"17478:93:20"},{"nodeType":"YulAssignment","src":"17580:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17591:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17596:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17587:3:20"},"nodeType":"YulFunctionCall","src":"17587:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17580:3:20"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17373:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17381:3:20","type":""}],"src":"17239:366:20"},{"body":{"nodeType":"YulBlock","src":"17757:220:20","statements":[{"nodeType":"YulAssignment","src":"17767:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17833:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17838:2:20","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17774:58:20"},"nodeType":"YulFunctionCall","src":"17774:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17767:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17939:3:20"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"17850:88:20"},"nodeType":"YulFunctionCall","src":"17850:93:20"},"nodeType":"YulExpressionStatement","src":"17850:93:20"},{"nodeType":"YulAssignment","src":"17952:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17963:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17968:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17959:3:20"},"nodeType":"YulFunctionCall","src":"17959:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17952:3:20"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17745:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17753:3:20","type":""}],"src":"17611:366:20"},{"body":{"nodeType":"YulBlock","src":"18129:220:20","statements":[{"nodeType":"YulAssignment","src":"18139:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18205:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"18210:2:20","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18146:58:20"},"nodeType":"YulFunctionCall","src":"18146:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18139:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18311:3:20"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"18222:88:20"},"nodeType":"YulFunctionCall","src":"18222:93:20"},"nodeType":"YulExpressionStatement","src":"18222:93:20"},{"nodeType":"YulAssignment","src":"18324:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18335:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"18340:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18331:3:20"},"nodeType":"YulFunctionCall","src":"18331:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18324:3:20"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18117:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18125:3:20","type":""}],"src":"17983:366:20"},{"body":{"nodeType":"YulBlock","src":"18501:220:20","statements":[{"nodeType":"YulAssignment","src":"18511:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18577:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"18582:2:20","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18518:58:20"},"nodeType":"YulFunctionCall","src":"18518:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18511:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18683:3:20"}],"functionName":{"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulIdentifier","src":"18594:88:20"},"nodeType":"YulFunctionCall","src":"18594:93:20"},"nodeType":"YulExpressionStatement","src":"18594:93:20"},{"nodeType":"YulAssignment","src":"18696:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18707:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"18712:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18703:3:20"},"nodeType":"YulFunctionCall","src":"18703:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18696:3:20"}]}]},"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18489:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18497:3:20","type":""}],"src":"18355:366:20"},{"body":{"nodeType":"YulBlock","src":"18873:220:20","statements":[{"nodeType":"YulAssignment","src":"18883:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18949:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"18954:2:20","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18890:58:20"},"nodeType":"YulFunctionCall","src":"18890:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18883:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19055:3:20"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"18966:88:20"},"nodeType":"YulFunctionCall","src":"18966:93:20"},"nodeType":"YulExpressionStatement","src":"18966:93:20"},{"nodeType":"YulAssignment","src":"19068:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19079:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"19084:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19075:3:20"},"nodeType":"YulFunctionCall","src":"19075:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19068:3:20"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18861:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18869:3:20","type":""}],"src":"18727:366:20"},{"body":{"nodeType":"YulBlock","src":"19245:220:20","statements":[{"nodeType":"YulAssignment","src":"19255:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19321:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"19326:2:20","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19262:58:20"},"nodeType":"YulFunctionCall","src":"19262:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19255:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19427:3:20"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"19338:88:20"},"nodeType":"YulFunctionCall","src":"19338:93:20"},"nodeType":"YulExpressionStatement","src":"19338:93:20"},{"nodeType":"YulAssignment","src":"19440:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19451:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"19456:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19447:3:20"},"nodeType":"YulFunctionCall","src":"19447:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19440:3:20"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19233:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19241:3:20","type":""}],"src":"19099:366:20"},{"body":{"nodeType":"YulBlock","src":"19617:220:20","statements":[{"nodeType":"YulAssignment","src":"19627:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19693:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"19698:2:20","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19634:58:20"},"nodeType":"YulFunctionCall","src":"19634:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19627:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19799:3:20"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"19710:88:20"},"nodeType":"YulFunctionCall","src":"19710:93:20"},"nodeType":"YulExpressionStatement","src":"19710:93:20"},{"nodeType":"YulAssignment","src":"19812:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19823:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"19828:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19819:3:20"},"nodeType":"YulFunctionCall","src":"19819:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19812:3:20"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19605:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19613:3:20","type":""}],"src":"19471:366:20"},{"body":{"nodeType":"YulBlock","src":"19989:220:20","statements":[{"nodeType":"YulAssignment","src":"19999:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20065:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"20070:2:20","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20006:58:20"},"nodeType":"YulFunctionCall","src":"20006:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19999:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20171:3:20"}],"functionName":{"name":"store_literal_in_memory_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc","nodeType":"YulIdentifier","src":"20082:88:20"},"nodeType":"YulFunctionCall","src":"20082:93:20"},"nodeType":"YulExpressionStatement","src":"20082:93:20"},{"nodeType":"YulAssignment","src":"20184:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20195:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"20200:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20191:3:20"},"nodeType":"YulFunctionCall","src":"20191:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20184:3:20"}]}]},"name":"abi_encode_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19977:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19985:3:20","type":""}],"src":"19843:366:20"},{"body":{"nodeType":"YulBlock","src":"20361:220:20","statements":[{"nodeType":"YulAssignment","src":"20371:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20437:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"20442:2:20","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20378:58:20"},"nodeType":"YulFunctionCall","src":"20378:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20371:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20543:3:20"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"20454:88:20"},"nodeType":"YulFunctionCall","src":"20454:93:20"},"nodeType":"YulExpressionStatement","src":"20454:93:20"},{"nodeType":"YulAssignment","src":"20556:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20567:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"20572:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20563:3:20"},"nodeType":"YulFunctionCall","src":"20563:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20556:3:20"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20349:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20357:3:20","type":""}],"src":"20215:366:20"},{"body":{"nodeType":"YulBlock","src":"20733:220:20","statements":[{"nodeType":"YulAssignment","src":"20743:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20809:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"20814:2:20","type":"","value":"53"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20750:58:20"},"nodeType":"YulFunctionCall","src":"20750:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20743:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20915:3:20"}],"functionName":{"name":"store_literal_in_memory_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314","nodeType":"YulIdentifier","src":"20826:88:20"},"nodeType":"YulFunctionCall","src":"20826:93:20"},"nodeType":"YulExpressionStatement","src":"20826:93:20"},{"nodeType":"YulAssignment","src":"20928:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20939:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"20944:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20935:3:20"},"nodeType":"YulFunctionCall","src":"20935:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20928:3:20"}]}]},"name":"abi_encode_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20721:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20729:3:20","type":""}],"src":"20587:366:20"},{"body":{"nodeType":"YulBlock","src":"21131:1592:20","statements":[{"nodeType":"YulVariableDeclaration","src":"21141:26:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21157:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"21162:4:20","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21153:3:20"},"nodeType":"YulFunctionCall","src":"21153:14:20"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"21145:4:20","type":""}]},{"nodeType":"YulBlock","src":"21177:235:20","statements":[{"nodeType":"YulVariableDeclaration","src":"21212:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21242:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"21249:4:20","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21238:3:20"},"nodeType":"YulFunctionCall","src":"21238:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21232:5:20"},"nodeType":"YulFunctionCall","src":"21232:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"21216:12:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21280:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"21285:4:20","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21276:3:20"},"nodeType":"YulFunctionCall","src":"21276:14:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21296:4:20"},{"name":"pos","nodeType":"YulIdentifier","src":"21302:3:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21292:3:20"},"nodeType":"YulFunctionCall","src":"21292:14:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21269:6:20"},"nodeType":"YulFunctionCall","src":"21269:38:20"},"nodeType":"YulExpressionStatement","src":"21269:38:20"},{"nodeType":"YulAssignment","src":"21320:81:20","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"21382:12:20"},{"name":"tail","nodeType":"YulIdentifier","src":"21396:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"21328:53:20"},"nodeType":"YulFunctionCall","src":"21328:73:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21320:4:20"}]}]},{"nodeType":"YulBlock","src":"21422:236:20","statements":[{"nodeType":"YulVariableDeclaration","src":"21458:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21488:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"21495:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21484:3:20"},"nodeType":"YulFunctionCall","src":"21484:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21478:5:20"},"nodeType":"YulFunctionCall","src":"21478:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"21462:12:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21526:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"21531:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21522:3:20"},"nodeType":"YulFunctionCall","src":"21522:14:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21542:4:20"},{"name":"pos","nodeType":"YulIdentifier","src":"21548:3:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21538:3:20"},"nodeType":"YulFunctionCall","src":"21538:14:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21515:6:20"},"nodeType":"YulFunctionCall","src":"21515:38:20"},"nodeType":"YulExpressionStatement","src":"21515:38:20"},{"nodeType":"YulAssignment","src":"21566:81:20","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"21628:12:20"},{"name":"tail","nodeType":"YulIdentifier","src":"21642:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"21574:53:20"},"nodeType":"YulFunctionCall","src":"21574:73:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21566:4:20"}]}]},{"nodeType":"YulBlock","src":"21668:236:20","statements":[{"nodeType":"YulVariableDeclaration","src":"21704:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21734:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"21741:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21730:3:20"},"nodeType":"YulFunctionCall","src":"21730:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21724:5:20"},"nodeType":"YulFunctionCall","src":"21724:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"21708:12:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21772:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"21777:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21768:3:20"},"nodeType":"YulFunctionCall","src":"21768:14:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21788:4:20"},{"name":"pos","nodeType":"YulIdentifier","src":"21794:3:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21784:3:20"},"nodeType":"YulFunctionCall","src":"21784:14:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21761:6:20"},"nodeType":"YulFunctionCall","src":"21761:38:20"},"nodeType":"YulExpressionStatement","src":"21761:38:20"},{"nodeType":"YulAssignment","src":"21812:81:20","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"21874:12:20"},{"name":"tail","nodeType":"YulIdentifier","src":"21888:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"21820:53:20"},"nodeType":"YulFunctionCall","src":"21820:73:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21812:4:20"}]}]},{"nodeType":"YulBlock","src":"21914:238:20","statements":[{"nodeType":"YulVariableDeclaration","src":"21952:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21982:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"21989:4:20","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21978:3:20"},"nodeType":"YulFunctionCall","src":"21978:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21972:5:20"},"nodeType":"YulFunctionCall","src":"21972:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"21956:12:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22020:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"22025:4:20","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22016:3:20"},"nodeType":"YulFunctionCall","src":"22016:14:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22036:4:20"},{"name":"pos","nodeType":"YulIdentifier","src":"22042:3:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22032:3:20"},"nodeType":"YulFunctionCall","src":"22032:14:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22009:6:20"},"nodeType":"YulFunctionCall","src":"22009:38:20"},"nodeType":"YulExpressionStatement","src":"22009:38:20"},{"nodeType":"YulAssignment","src":"22060:81:20","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"22122:12:20"},{"name":"tail","nodeType":"YulIdentifier","src":"22136:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"22068:53:20"},"nodeType":"YulFunctionCall","src":"22068:73:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22060:4:20"}]}]},{"nodeType":"YulBlock","src":"22162:177:20","statements":[{"nodeType":"YulVariableDeclaration","src":"22201:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22231:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"22238:4:20","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22227:3:20"},"nodeType":"YulFunctionCall","src":"22227:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22221:5:20"},"nodeType":"YulFunctionCall","src":"22221:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"22205:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"22300:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22318:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"22323:4:20","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22314:3:20"},"nodeType":"YulFunctionCall","src":"22314:14:20"}],"functionName":{"name":"abi_encode_t_enum$_CardType_$22_to_t_uint8","nodeType":"YulIdentifier","src":"22257:42:20"},"nodeType":"YulFunctionCall","src":"22257:72:20"},"nodeType":"YulExpressionStatement","src":"22257:72:20"}]},{"nodeType":"YulBlock","src":"22349:172:20","statements":[{"nodeType":"YulVariableDeclaration","src":"22392:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22422:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"22429:4:20","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22418:3:20"},"nodeType":"YulFunctionCall","src":"22418:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22412:5:20"},"nodeType":"YulFunctionCall","src":"22412:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"22396:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"22482:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22500:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"22505:4:20","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22496:3:20"},"nodeType":"YulFunctionCall","src":"22496:14:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"22448:33:20"},"nodeType":"YulFunctionCall","src":"22448:63:20"},"nodeType":"YulExpressionStatement","src":"22448:63:20"}]},{"nodeType":"YulBlock","src":"22531:165:20","statements":[{"nodeType":"YulVariableDeclaration","src":"22567:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22597:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"22604:4:20","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22593:3:20"},"nodeType":"YulFunctionCall","src":"22593:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22587:5:20"},"nodeType":"YulFunctionCall","src":"22587:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"22571:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"22657:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22675:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"22680:4:20","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22671:3:20"},"nodeType":"YulFunctionCall","src":"22671:14:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"22623:33:20"},"nodeType":"YulFunctionCall","src":"22623:63:20"},"nodeType":"YulExpressionStatement","src":"22623:63:20"}]},{"nodeType":"YulAssignment","src":"22706:11:20","value":{"name":"tail","nodeType":"YulIdentifier","src":"22713:4:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22706:3:20"}]}]},"name":"abi_encode_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21110:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"21117:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21126:3:20","type":""}],"src":"21027:1696:20"},{"body":{"nodeType":"YulBlock","src":"22911:1592:20","statements":[{"nodeType":"YulVariableDeclaration","src":"22921:26:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22937:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"22942:4:20","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22933:3:20"},"nodeType":"YulFunctionCall","src":"22933:14:20"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"22925:4:20","type":""}]},{"nodeType":"YulBlock","src":"22957:235:20","statements":[{"nodeType":"YulVariableDeclaration","src":"22992:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23022:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"23029:4:20","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23018:3:20"},"nodeType":"YulFunctionCall","src":"23018:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23012:5:20"},"nodeType":"YulFunctionCall","src":"23012:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"22996:12:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23060:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"23065:4:20","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23056:3:20"},"nodeType":"YulFunctionCall","src":"23056:14:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23076:4:20"},{"name":"pos","nodeType":"YulIdentifier","src":"23082:3:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23072:3:20"},"nodeType":"YulFunctionCall","src":"23072:14:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23049:6:20"},"nodeType":"YulFunctionCall","src":"23049:38:20"},"nodeType":"YulExpressionStatement","src":"23049:38:20"},{"nodeType":"YulAssignment","src":"23100:81:20","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"23162:12:20"},{"name":"tail","nodeType":"YulIdentifier","src":"23176:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"23108:53:20"},"nodeType":"YulFunctionCall","src":"23108:73:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23100:4:20"}]}]},{"nodeType":"YulBlock","src":"23202:236:20","statements":[{"nodeType":"YulVariableDeclaration","src":"23238:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23268:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"23275:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23264:3:20"},"nodeType":"YulFunctionCall","src":"23264:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23258:5:20"},"nodeType":"YulFunctionCall","src":"23258:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"23242:12:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23306:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"23311:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23302:3:20"},"nodeType":"YulFunctionCall","src":"23302:14:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23322:4:20"},{"name":"pos","nodeType":"YulIdentifier","src":"23328:3:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23318:3:20"},"nodeType":"YulFunctionCall","src":"23318:14:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23295:6:20"},"nodeType":"YulFunctionCall","src":"23295:38:20"},"nodeType":"YulExpressionStatement","src":"23295:38:20"},{"nodeType":"YulAssignment","src":"23346:81:20","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"23408:12:20"},{"name":"tail","nodeType":"YulIdentifier","src":"23422:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"23354:53:20"},"nodeType":"YulFunctionCall","src":"23354:73:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23346:4:20"}]}]},{"nodeType":"YulBlock","src":"23448:236:20","statements":[{"nodeType":"YulVariableDeclaration","src":"23484:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23514:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"23521:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23510:3:20"},"nodeType":"YulFunctionCall","src":"23510:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23504:5:20"},"nodeType":"YulFunctionCall","src":"23504:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"23488:12:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23552:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"23557:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23548:3:20"},"nodeType":"YulFunctionCall","src":"23548:14:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23568:4:20"},{"name":"pos","nodeType":"YulIdentifier","src":"23574:3:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23564:3:20"},"nodeType":"YulFunctionCall","src":"23564:14:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23541:6:20"},"nodeType":"YulFunctionCall","src":"23541:38:20"},"nodeType":"YulExpressionStatement","src":"23541:38:20"},{"nodeType":"YulAssignment","src":"23592:81:20","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"23654:12:20"},{"name":"tail","nodeType":"YulIdentifier","src":"23668:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"23600:53:20"},"nodeType":"YulFunctionCall","src":"23600:73:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23592:4:20"}]}]},{"nodeType":"YulBlock","src":"23694:238:20","statements":[{"nodeType":"YulVariableDeclaration","src":"23732:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23762:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"23769:4:20","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23758:3:20"},"nodeType":"YulFunctionCall","src":"23758:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23752:5:20"},"nodeType":"YulFunctionCall","src":"23752:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"23736:12:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23800:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"23805:4:20","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23796:3:20"},"nodeType":"YulFunctionCall","src":"23796:14:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23816:4:20"},{"name":"pos","nodeType":"YulIdentifier","src":"23822:3:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23812:3:20"},"nodeType":"YulFunctionCall","src":"23812:14:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23789:6:20"},"nodeType":"YulFunctionCall","src":"23789:38:20"},"nodeType":"YulExpressionStatement","src":"23789:38:20"},{"nodeType":"YulAssignment","src":"23840:81:20","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"23902:12:20"},{"name":"tail","nodeType":"YulIdentifier","src":"23916:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"23848:53:20"},"nodeType":"YulFunctionCall","src":"23848:73:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23840:4:20"}]}]},{"nodeType":"YulBlock","src":"23942:177:20","statements":[{"nodeType":"YulVariableDeclaration","src":"23981:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24011:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"24018:4:20","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24007:3:20"},"nodeType":"YulFunctionCall","src":"24007:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24001:5:20"},"nodeType":"YulFunctionCall","src":"24001:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"23985:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"24080:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24098:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"24103:4:20","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24094:3:20"},"nodeType":"YulFunctionCall","src":"24094:14:20"}],"functionName":{"name":"abi_encode_t_enum$_CardType_$22_to_t_uint8","nodeType":"YulIdentifier","src":"24037:42:20"},"nodeType":"YulFunctionCall","src":"24037:72:20"},"nodeType":"YulExpressionStatement","src":"24037:72:20"}]},{"nodeType":"YulBlock","src":"24129:172:20","statements":[{"nodeType":"YulVariableDeclaration","src":"24172:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24202:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"24209:4:20","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24198:3:20"},"nodeType":"YulFunctionCall","src":"24198:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24192:5:20"},"nodeType":"YulFunctionCall","src":"24192:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"24176:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"24262:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24280:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"24285:4:20","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24276:3:20"},"nodeType":"YulFunctionCall","src":"24276:14:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"24228:33:20"},"nodeType":"YulFunctionCall","src":"24228:63:20"},"nodeType":"YulExpressionStatement","src":"24228:63:20"}]},{"nodeType":"YulBlock","src":"24311:165:20","statements":[{"nodeType":"YulVariableDeclaration","src":"24347:43:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24377:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"24384:4:20","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24373:3:20"},"nodeType":"YulFunctionCall","src":"24373:16:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24367:5:20"},"nodeType":"YulFunctionCall","src":"24367:23:20"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"24351:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"24437:12:20"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24455:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"24460:4:20","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24451:3:20"},"nodeType":"YulFunctionCall","src":"24451:14:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"24403:33:20"},"nodeType":"YulFunctionCall","src":"24403:63:20"},"nodeType":"YulExpressionStatement","src":"24403:63:20"}]},{"nodeType":"YulAssignment","src":"24486:11:20","value":{"name":"tail","nodeType":"YulIdentifier","src":"24493:4:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24486:3:20"}]}]},"name":"abi_encode_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22890:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22897:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22906:3:20","type":""}],"src":"22797:1706:20"},{"body":{"nodeType":"YulBlock","src":"24564:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24581:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24604:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24586:17:20"},"nodeType":"YulFunctionCall","src":"24586:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24574:6:20"},"nodeType":"YulFunctionCall","src":"24574:37:20"},"nodeType":"YulExpressionStatement","src":"24574:37:20"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24552:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"24559:3:20","type":""}],"src":"24509:108:20"},{"body":{"nodeType":"YulBlock","src":"24688:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24705:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24728:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24710:17:20"},"nodeType":"YulFunctionCall","src":"24710:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24698:6:20"},"nodeType":"YulFunctionCall","src":"24698:37:20"},"nodeType":"YulExpressionStatement","src":"24698:37:20"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24676:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"24683:3:20","type":""}],"src":"24623:118:20"},{"body":{"nodeType":"YulBlock","src":"24810:52:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24827:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24849:5:20"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"24832:16:20"},"nodeType":"YulFunctionCall","src":"24832:23:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24820:6:20"},"nodeType":"YulFunctionCall","src":"24820:36:20"},"nodeType":"YulExpressionStatement","src":"24820:36:20"}]},"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24798:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"24805:3:20","type":""}],"src":"24747:115:20"},{"body":{"nodeType":"YulBlock","src":"25052:251:20","statements":[{"nodeType":"YulAssignment","src":"25063:102:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25152:6:20"},{"name":"pos","nodeType":"YulIdentifier","src":"25161:3:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25070:81:20"},"nodeType":"YulFunctionCall","src":"25070:95:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25063:3:20"}]},{"nodeType":"YulAssignment","src":"25175:102:20","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25264:6:20"},{"name":"pos","nodeType":"YulIdentifier","src":"25273:3:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25182:81:20"},"nodeType":"YulFunctionCall","src":"25182:95:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25175:3:20"}]},{"nodeType":"YulAssignment","src":"25287:10:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"25294:3:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25287:3:20"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25023:3:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25029:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25037:6:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25048:3:20","type":""}],"src":"24868:435:20"},{"body":{"nodeType":"YulBlock","src":"25407:124:20","statements":[{"nodeType":"YulAssignment","src":"25417:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25429:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"25440:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25425:3:20"},"nodeType":"YulFunctionCall","src":"25425:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25417:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25497:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25510:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"25521:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25506:3:20"},"nodeType":"YulFunctionCall","src":"25506:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"25453:43:20"},"nodeType":"YulFunctionCall","src":"25453:71:20"},"nodeType":"YulExpressionStatement","src":"25453:71:20"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25379:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25391:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25402:4:20","type":""}],"src":"25309:222:20"},{"body":{"nodeType":"YulBlock","src":"25737:440:20","statements":[{"nodeType":"YulAssignment","src":"25747:27:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25759:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"25770:3:20","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25755:3:20"},"nodeType":"YulFunctionCall","src":"25755:19:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25747:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25828:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25841:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"25852:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25837:3:20"},"nodeType":"YulFunctionCall","src":"25837:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"25784:43:20"},"nodeType":"YulFunctionCall","src":"25784:71:20"},"nodeType":"YulExpressionStatement","src":"25784:71:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25909:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25922:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"25933:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25918:3:20"},"nodeType":"YulFunctionCall","src":"25918:18:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"25865:43:20"},"nodeType":"YulFunctionCall","src":"25865:72:20"},"nodeType":"YulExpressionStatement","src":"25865:72:20"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"25991:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26004:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"26015:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26000:3:20"},"nodeType":"YulFunctionCall","src":"26000:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"25947:43:20"},"nodeType":"YulFunctionCall","src":"25947:72:20"},"nodeType":"YulExpressionStatement","src":"25947:72:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26040:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"26051:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26036:3:20"},"nodeType":"YulFunctionCall","src":"26036:18:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26060:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"26066:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26056:3:20"},"nodeType":"YulFunctionCall","src":"26056:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26029:6:20"},"nodeType":"YulFunctionCall","src":"26029:48:20"},"nodeType":"YulExpressionStatement","src":"26029:48:20"},{"nodeType":"YulAssignment","src":"26086:84:20","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"26156:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"26165:4:20"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26094:61:20"},"nodeType":"YulFunctionCall","src":"26094:76:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26086:4:20"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25685:9:20","type":""},{"name":"value3","nodeType":"YulTypedName","src":"25697:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"25705:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25713:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25721:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25732:4:20","type":""}],"src":"25537:640:20"},{"body":{"nodeType":"YulBlock","src":"26357:305:20","statements":[{"nodeType":"YulAssignment","src":"26367:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26379:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"26390:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26375:3:20"},"nodeType":"YulFunctionCall","src":"26375:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26367:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26414:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"26425:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26410:3:20"},"nodeType":"YulFunctionCall","src":"26410:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26433:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"26439:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26429:3:20"},"nodeType":"YulFunctionCall","src":"26429:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26403:6:20"},"nodeType":"YulFunctionCall","src":"26403:47:20"},"nodeType":"YulExpressionStatement","src":"26403:47:20"},{"nodeType":"YulAssignment","src":"26459:116:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26561:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"26570:4:20"}],"functionName":{"name":"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26467:93:20"},"nodeType":"YulFunctionCall","src":"26467:108:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26459:4:20"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26627:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26640:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"26651:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26636:3:20"},"nodeType":"YulFunctionCall","src":"26636:18:20"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"26585:41:20"},"nodeType":"YulFunctionCall","src":"26585:70:20"},"nodeType":"YulExpressionStatement","src":"26585:70:20"}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_uint32__to_t_array$_t_address_$dyn_memory_ptr_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26321:9:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26333:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26341:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26352:4:20","type":""}],"src":"26183:479:20"},{"body":{"nodeType":"YulBlock","src":"26856:265:20","statements":[{"nodeType":"YulAssignment","src":"26866:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26878:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"26889:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26874:3:20"},"nodeType":"YulFunctionCall","src":"26874:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26866:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26913:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"26924:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26909:3:20"},"nodeType":"YulFunctionCall","src":"26909:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26932:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"26938:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26928:3:20"},"nodeType":"YulFunctionCall","src":"26928:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26902:6:20"},"nodeType":"YulFunctionCall","src":"26902:47:20"},"nodeType":"YulExpressionStatement","src":"26902:47:20"},{"nodeType":"YulAssignment","src":"26958:156:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27100:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"27109:4:20"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26966:133:20"},"nodeType":"YulFunctionCall","src":"26966:148:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26958:4:20"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26828:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26840:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26851:4:20","type":""}],"src":"26668:453:20"},{"body":{"nodeType":"YulBlock","src":"27219:118:20","statements":[{"nodeType":"YulAssignment","src":"27229:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27241:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"27252:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27237:3:20"},"nodeType":"YulFunctionCall","src":"27237:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27229:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27303:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27316:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"27327:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27312:3:20"},"nodeType":"YulFunctionCall","src":"27312:17:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"27265:37:20"},"nodeType":"YulFunctionCall","src":"27265:65:20"},"nodeType":"YulExpressionStatement","src":"27265:65:20"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27191:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27203:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27214:4:20","type":""}],"src":"27127:210:20"},{"body":{"nodeType":"YulBlock","src":"27461:195:20","statements":[{"nodeType":"YulAssignment","src":"27471:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27483:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"27494:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27479:3:20"},"nodeType":"YulFunctionCall","src":"27479:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27471:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27518:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"27529:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27514:3:20"},"nodeType":"YulFunctionCall","src":"27514:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27537:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"27543:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27533:3:20"},"nodeType":"YulFunctionCall","src":"27533:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27507:6:20"},"nodeType":"YulFunctionCall","src":"27507:47:20"},"nodeType":"YulExpressionStatement","src":"27507:47:20"},{"nodeType":"YulAssignment","src":"27563:86:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27635:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"27644:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27571:63:20"},"nodeType":"YulFunctionCall","src":"27571:78:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27563:4:20"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27433:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27445:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27456:4:20","type":""}],"src":"27343:313:20"},{"body":{"nodeType":"YulBlock","src":"27980:821:20","statements":[{"nodeType":"YulAssignment","src":"27990:27:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28002:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"28013:3:20","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27998:3:20"},"nodeType":"YulFunctionCall","src":"27998:19:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27990:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28038:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"28049:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28034:3:20"},"nodeType":"YulFunctionCall","src":"28034:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28057:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"28063:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28053:3:20"},"nodeType":"YulFunctionCall","src":"28053:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28027:6:20"},"nodeType":"YulFunctionCall","src":"28027:47:20"},"nodeType":"YulExpressionStatement","src":"28027:47:20"},{"nodeType":"YulAssignment","src":"28083:86:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28155:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"28164:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28091:63:20"},"nodeType":"YulFunctionCall","src":"28091:78:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28083:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28190:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"28201:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28186:3:20"},"nodeType":"YulFunctionCall","src":"28186:18:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28210:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"28216:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28206:3:20"},"nodeType":"YulFunctionCall","src":"28206:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28179:6:20"},"nodeType":"YulFunctionCall","src":"28179:48:20"},"nodeType":"YulExpressionStatement","src":"28179:48:20"},{"nodeType":"YulAssignment","src":"28236:86:20","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28308:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"28317:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28244:63:20"},"nodeType":"YulFunctionCall","src":"28244:78:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28236:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28343:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"28354:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28339:3:20"},"nodeType":"YulFunctionCall","src":"28339:18:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28363:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"28369:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28359:3:20"},"nodeType":"YulFunctionCall","src":"28359:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28332:6:20"},"nodeType":"YulFunctionCall","src":"28332:48:20"},"nodeType":"YulExpressionStatement","src":"28332:48:20"},{"nodeType":"YulAssignment","src":"28389:86:20","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"28461:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"28470:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28397:63:20"},"nodeType":"YulFunctionCall","src":"28397:78:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28389:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28496:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"28507:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28492:3:20"},"nodeType":"YulFunctionCall","src":"28492:18:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28516:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"28522:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28512:3:20"},"nodeType":"YulFunctionCall","src":"28512:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28485:6:20"},"nodeType":"YulFunctionCall","src":"28485:48:20"},"nodeType":"YulExpressionStatement","src":"28485:48:20"},{"nodeType":"YulAssignment","src":"28542:86:20","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"28614:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"28623:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28550:63:20"},"nodeType":"YulFunctionCall","src":"28550:78:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28542:4:20"}]},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"28682:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28695:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"28706:3:20","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28691:3:20"},"nodeType":"YulFunctionCall","src":"28691:19:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28638:43:20"},"nodeType":"YulFunctionCall","src":"28638:73:20"},"nodeType":"YulExpressionStatement","src":"28638:73:20"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"28765:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28778:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"28789:3:20","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28774:3:20"},"nodeType":"YulFunctionCall","src":"28774:19:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"28721:43:20"},"nodeType":"YulFunctionCall","src":"28721:73:20"},"nodeType":"YulExpressionStatement","src":"28721:73:20"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27912:9:20","type":""},{"name":"value5","nodeType":"YulTypedName","src":"27924:6:20","type":""},{"name":"value4","nodeType":"YulTypedName","src":"27932:6:20","type":""},{"name":"value3","nodeType":"YulTypedName","src":"27940:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"27948:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27956:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27964:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27975:4:20","type":""}],"src":"27662:1139:20"},{"body":{"nodeType":"YulBlock","src":"28978:248:20","statements":[{"nodeType":"YulAssignment","src":"28988:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29000:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29011:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28996:3:20"},"nodeType":"YulFunctionCall","src":"28996:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28988:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29035:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29046:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29031:3:20"},"nodeType":"YulFunctionCall","src":"29031:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29054:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"29060:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29050:3:20"},"nodeType":"YulFunctionCall","src":"29050:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29024:6:20"},"nodeType":"YulFunctionCall","src":"29024:47:20"},"nodeType":"YulExpressionStatement","src":"29024:47:20"},{"nodeType":"YulAssignment","src":"29080:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29214:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29088:124:20"},"nodeType":"YulFunctionCall","src":"29088:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29080:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28958:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28973:4:20","type":""}],"src":"28807:419:20"},{"body":{"nodeType":"YulBlock","src":"29403:248:20","statements":[{"nodeType":"YulAssignment","src":"29413:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29425:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29436:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29421:3:20"},"nodeType":"YulFunctionCall","src":"29421:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29413:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29460:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29471:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29456:3:20"},"nodeType":"YulFunctionCall","src":"29456:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29479:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"29485:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29475:3:20"},"nodeType":"YulFunctionCall","src":"29475:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29449:6:20"},"nodeType":"YulFunctionCall","src":"29449:47:20"},"nodeType":"YulExpressionStatement","src":"29449:47:20"},{"nodeType":"YulAssignment","src":"29505:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29639:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29513:124:20"},"nodeType":"YulFunctionCall","src":"29513:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29505:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29383:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29398:4:20","type":""}],"src":"29232:419:20"},{"body":{"nodeType":"YulBlock","src":"29828:248:20","statements":[{"nodeType":"YulAssignment","src":"29838:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29850:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29861:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29846:3:20"},"nodeType":"YulFunctionCall","src":"29846:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29838:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29885:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29896:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29881:3:20"},"nodeType":"YulFunctionCall","src":"29881:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29904:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"29910:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29900:3:20"},"nodeType":"YulFunctionCall","src":"29900:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29874:6:20"},"nodeType":"YulFunctionCall","src":"29874:47:20"},"nodeType":"YulExpressionStatement","src":"29874:47:20"},{"nodeType":"YulAssignment","src":"29930:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30064:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29938:124:20"},"nodeType":"YulFunctionCall","src":"29938:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29930:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29808:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29823:4:20","type":""}],"src":"29657:419:20"},{"body":{"nodeType":"YulBlock","src":"30253:248:20","statements":[{"nodeType":"YulAssignment","src":"30263:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30275:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"30286:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30271:3:20"},"nodeType":"YulFunctionCall","src":"30271:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30263:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30310:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"30321:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30306:3:20"},"nodeType":"YulFunctionCall","src":"30306:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30329:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"30335:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30325:3:20"},"nodeType":"YulFunctionCall","src":"30325:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30299:6:20"},"nodeType":"YulFunctionCall","src":"30299:47:20"},"nodeType":"YulExpressionStatement","src":"30299:47:20"},{"nodeType":"YulAssignment","src":"30355:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30489:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30363:124:20"},"nodeType":"YulFunctionCall","src":"30363:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30355:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30233:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30248:4:20","type":""}],"src":"30082:419:20"},{"body":{"nodeType":"YulBlock","src":"30678:248:20","statements":[{"nodeType":"YulAssignment","src":"30688:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30700:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"30711:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30696:3:20"},"nodeType":"YulFunctionCall","src":"30696:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30688:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30735:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"30746:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30731:3:20"},"nodeType":"YulFunctionCall","src":"30731:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30754:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"30760:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30750:3:20"},"nodeType":"YulFunctionCall","src":"30750:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30724:6:20"},"nodeType":"YulFunctionCall","src":"30724:47:20"},"nodeType":"YulExpressionStatement","src":"30724:47:20"},{"nodeType":"YulAssignment","src":"30780:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30914:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30788:124:20"},"nodeType":"YulFunctionCall","src":"30788:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30780:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30658:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30673:4:20","type":""}],"src":"30507:419:20"},{"body":{"nodeType":"YulBlock","src":"31103:248:20","statements":[{"nodeType":"YulAssignment","src":"31113:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31125:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"31136:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31121:3:20"},"nodeType":"YulFunctionCall","src":"31121:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31113:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31160:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"31171:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31156:3:20"},"nodeType":"YulFunctionCall","src":"31156:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31179:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"31185:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31175:3:20"},"nodeType":"YulFunctionCall","src":"31175:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31149:6:20"},"nodeType":"YulFunctionCall","src":"31149:47:20"},"nodeType":"YulExpressionStatement","src":"31149:47:20"},{"nodeType":"YulAssignment","src":"31205:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31339:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31213:124:20"},"nodeType":"YulFunctionCall","src":"31213:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31205:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31083:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31098:4:20","type":""}],"src":"30932:419:20"},{"body":{"nodeType":"YulBlock","src":"31528:248:20","statements":[{"nodeType":"YulAssignment","src":"31538:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31550:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"31561:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31546:3:20"},"nodeType":"YulFunctionCall","src":"31546:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31538:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31585:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"31596:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31581:3:20"},"nodeType":"YulFunctionCall","src":"31581:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31604:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"31610:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31600:3:20"},"nodeType":"YulFunctionCall","src":"31600:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31574:6:20"},"nodeType":"YulFunctionCall","src":"31574:47:20"},"nodeType":"YulExpressionStatement","src":"31574:47:20"},{"nodeType":"YulAssignment","src":"31630:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31764:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31638:124:20"},"nodeType":"YulFunctionCall","src":"31638:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31630:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31508:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31523:4:20","type":""}],"src":"31357:419:20"},{"body":{"nodeType":"YulBlock","src":"31953:248:20","statements":[{"nodeType":"YulAssignment","src":"31963:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31975:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"31986:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31971:3:20"},"nodeType":"YulFunctionCall","src":"31971:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31963:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32010:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"32021:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32006:3:20"},"nodeType":"YulFunctionCall","src":"32006:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32029:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"32035:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32025:3:20"},"nodeType":"YulFunctionCall","src":"32025:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31999:6:20"},"nodeType":"YulFunctionCall","src":"31999:47:20"},"nodeType":"YulExpressionStatement","src":"31999:47:20"},{"nodeType":"YulAssignment","src":"32055:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32189:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32063:124:20"},"nodeType":"YulFunctionCall","src":"32063:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32055:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31933:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31948:4:20","type":""}],"src":"31782:419:20"},{"body":{"nodeType":"YulBlock","src":"32378:248:20","statements":[{"nodeType":"YulAssignment","src":"32388:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32400:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"32411:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32396:3:20"},"nodeType":"YulFunctionCall","src":"32396:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32388:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32435:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"32446:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32431:3:20"},"nodeType":"YulFunctionCall","src":"32431:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32454:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"32460:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32450:3:20"},"nodeType":"YulFunctionCall","src":"32450:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32424:6:20"},"nodeType":"YulFunctionCall","src":"32424:47:20"},"nodeType":"YulExpressionStatement","src":"32424:47:20"},{"nodeType":"YulAssignment","src":"32480:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32614:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32488:124:20"},"nodeType":"YulFunctionCall","src":"32488:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32480:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32358:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32373:4:20","type":""}],"src":"32207:419:20"},{"body":{"nodeType":"YulBlock","src":"32803:248:20","statements":[{"nodeType":"YulAssignment","src":"32813:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32825:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"32836:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32821:3:20"},"nodeType":"YulFunctionCall","src":"32821:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32813:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32860:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"32871:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32856:3:20"},"nodeType":"YulFunctionCall","src":"32856:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32879:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"32885:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32875:3:20"},"nodeType":"YulFunctionCall","src":"32875:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32849:6:20"},"nodeType":"YulFunctionCall","src":"32849:47:20"},"nodeType":"YulExpressionStatement","src":"32849:47:20"},{"nodeType":"YulAssignment","src":"32905:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33039:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32913:124:20"},"nodeType":"YulFunctionCall","src":"32913:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32905:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32783:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32798:4:20","type":""}],"src":"32632:419:20"},{"body":{"nodeType":"YulBlock","src":"33228:248:20","statements":[{"nodeType":"YulAssignment","src":"33238:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33250:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"33261:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33246:3:20"},"nodeType":"YulFunctionCall","src":"33246:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33238:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33285:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"33296:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33281:3:20"},"nodeType":"YulFunctionCall","src":"33281:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33304:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"33310:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33300:3:20"},"nodeType":"YulFunctionCall","src":"33300:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33274:6:20"},"nodeType":"YulFunctionCall","src":"33274:47:20"},"nodeType":"YulExpressionStatement","src":"33274:47:20"},{"nodeType":"YulAssignment","src":"33330:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33464:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33338:124:20"},"nodeType":"YulFunctionCall","src":"33338:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33330:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33208:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33223:4:20","type":""}],"src":"33057:419:20"},{"body":{"nodeType":"YulBlock","src":"33653:248:20","statements":[{"nodeType":"YulAssignment","src":"33663:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33675:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"33686:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33671:3:20"},"nodeType":"YulFunctionCall","src":"33671:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33663:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33710:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"33721:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33706:3:20"},"nodeType":"YulFunctionCall","src":"33706:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33729:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"33735:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33725:3:20"},"nodeType":"YulFunctionCall","src":"33725:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33699:6:20"},"nodeType":"YulFunctionCall","src":"33699:47:20"},"nodeType":"YulExpressionStatement","src":"33699:47:20"},{"nodeType":"YulAssignment","src":"33755:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33889:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33763:124:20"},"nodeType":"YulFunctionCall","src":"33763:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33755:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33633:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33648:4:20","type":""}],"src":"33482:419:20"},{"body":{"nodeType":"YulBlock","src":"34078:248:20","statements":[{"nodeType":"YulAssignment","src":"34088:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34100:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"34111:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34096:3:20"},"nodeType":"YulFunctionCall","src":"34096:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34088:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34135:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"34146:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34131:3:20"},"nodeType":"YulFunctionCall","src":"34131:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34154:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"34160:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34150:3:20"},"nodeType":"YulFunctionCall","src":"34150:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34124:6:20"},"nodeType":"YulFunctionCall","src":"34124:47:20"},"nodeType":"YulExpressionStatement","src":"34124:47:20"},{"nodeType":"YulAssignment","src":"34180:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34314:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34188:124:20"},"nodeType":"YulFunctionCall","src":"34188:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34180:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34058:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34073:4:20","type":""}],"src":"33907:419:20"},{"body":{"nodeType":"YulBlock","src":"34503:248:20","statements":[{"nodeType":"YulAssignment","src":"34513:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34525:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"34536:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34521:3:20"},"nodeType":"YulFunctionCall","src":"34521:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34513:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34560:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"34571:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34556:3:20"},"nodeType":"YulFunctionCall","src":"34556:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34579:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"34585:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34575:3:20"},"nodeType":"YulFunctionCall","src":"34575:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34549:6:20"},"nodeType":"YulFunctionCall","src":"34549:47:20"},"nodeType":"YulExpressionStatement","src":"34549:47:20"},{"nodeType":"YulAssignment","src":"34605:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34739:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34613:124:20"},"nodeType":"YulFunctionCall","src":"34613:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34605:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34483:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34498:4:20","type":""}],"src":"34332:419:20"},{"body":{"nodeType":"YulBlock","src":"34928:248:20","statements":[{"nodeType":"YulAssignment","src":"34938:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34950:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"34961:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34946:3:20"},"nodeType":"YulFunctionCall","src":"34946:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34938:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34985:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"34996:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34981:3:20"},"nodeType":"YulFunctionCall","src":"34981:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35004:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"35010:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35000:3:20"},"nodeType":"YulFunctionCall","src":"35000:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34974:6:20"},"nodeType":"YulFunctionCall","src":"34974:47:20"},"nodeType":"YulExpressionStatement","src":"34974:47:20"},{"nodeType":"YulAssignment","src":"35030:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35164:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35038:124:20"},"nodeType":"YulFunctionCall","src":"35038:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35030:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34908:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34923:4:20","type":""}],"src":"34757:419:20"},{"body":{"nodeType":"YulBlock","src":"35320:215:20","statements":[{"nodeType":"YulAssignment","src":"35330:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35342:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"35353:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35338:3:20"},"nodeType":"YulFunctionCall","src":"35338:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35330:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35377:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"35388:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35373:3:20"},"nodeType":"YulFunctionCall","src":"35373:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35396:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"35402:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35392:3:20"},"nodeType":"YulFunctionCall","src":"35392:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35366:6:20"},"nodeType":"YulFunctionCall","src":"35366:47:20"},"nodeType":"YulExpressionStatement","src":"35366:47:20"},{"nodeType":"YulAssignment","src":"35422:106:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"35514:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"35523:4:20"}],"functionName":{"name":"abi_encode_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35430:83:20"},"nodeType":"YulFunctionCall","src":"35430:98:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35422:4:20"}]}]},"name":"abi_encode_tuple_t_struct$_Card_$87_memory_ptr__to_t_struct$_Card_$87_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35292:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"35304:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35315:4:20","type":""}],"src":"35182:353:20"},{"body":{"nodeType":"YulBlock","src":"35639:124:20","statements":[{"nodeType":"YulAssignment","src":"35649:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35661:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"35672:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35657:3:20"},"nodeType":"YulFunctionCall","src":"35657:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35649:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"35729:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35742:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"35753:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35738:3:20"},"nodeType":"YulFunctionCall","src":"35738:17:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"35685:43:20"},"nodeType":"YulFunctionCall","src":"35685:71:20"},"nodeType":"YulExpressionStatement","src":"35685:71:20"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35611:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"35623:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35634:4:20","type":""}],"src":"35541:222:20"},{"body":{"nodeType":"YulBlock","src":"35915:277:20","statements":[{"nodeType":"YulAssignment","src":"35925:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35937:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"35948:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35933:3:20"},"nodeType":"YulFunctionCall","src":"35933:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35925:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"36005:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36018:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"36029:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36014:3:20"},"nodeType":"YulFunctionCall","src":"36014:17:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"35961:43:20"},"nodeType":"YulFunctionCall","src":"35961:71:20"},"nodeType":"YulExpressionStatement","src":"35961:71:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36053:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"36064:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36049:3:20"},"nodeType":"YulFunctionCall","src":"36049:18:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36073:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"36079:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"36069:3:20"},"nodeType":"YulFunctionCall","src":"36069:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36042:6:20"},"nodeType":"YulFunctionCall","src":"36042:48:20"},"nodeType":"YulExpressionStatement","src":"36042:48:20"},{"nodeType":"YulAssignment","src":"36099:86:20","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"36171:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"36180:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36107:63:20"},"nodeType":"YulFunctionCall","src":"36107:78:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36099:4:20"}]}]},"name":"abi_encode_tuple_t_uint256_t_string_memory_ptr__to_t_uint256_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35879:9:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"35891:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"35899:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35910:4:20","type":""}],"src":"35769:423:20"},{"body":{"nodeType":"YulBlock","src":"36239:88:20","statements":[{"nodeType":"YulAssignment","src":"36249:30:20","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"36259:18:20"},"nodeType":"YulFunctionCall","src":"36259:20:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36249:6:20"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36308:6:20"},{"name":"size","nodeType":"YulIdentifier","src":"36316:4:20"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"36288:19:20"},"nodeType":"YulFunctionCall","src":"36288:33:20"},"nodeType":"YulExpressionStatement","src":"36288:33:20"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"36223:4:20","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"36232:6:20","type":""}],"src":"36198:129:20"},{"body":{"nodeType":"YulBlock","src":"36373:35:20","statements":[{"nodeType":"YulAssignment","src":"36383:19:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36399:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"36393:5:20"},"nodeType":"YulFunctionCall","src":"36393:9:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36383:6:20"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"36366:6:20","type":""}],"src":"36333:75:20"},{"body":{"nodeType":"YulBlock","src":"36496:229:20","statements":[{"body":{"nodeType":"YulBlock","src":"36601:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"36603:16:20"},"nodeType":"YulFunctionCall","src":"36603:18:20"},"nodeType":"YulExpressionStatement","src":"36603:18:20"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"36573:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"36581:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"36570:2:20"},"nodeType":"YulFunctionCall","src":"36570:30:20"},"nodeType":"YulIf","src":"36567:56:20"},{"nodeType":"YulAssignment","src":"36633:25:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"36645:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"36653:4:20","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"36641:3:20"},"nodeType":"YulFunctionCall","src":"36641:17:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"36633:4:20"}]},{"nodeType":"YulAssignment","src":"36695:23:20","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"36707:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"36713:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36703:3:20"},"nodeType":"YulFunctionCall","src":"36703:15:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"36695:4:20"}]}]},"name":"array_allocation_size_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"36480:6:20","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"36491:4:20","type":""}],"src":"36414:311:20"},{"body":{"nodeType":"YulBlock","src":"36797:241:20","statements":[{"body":{"nodeType":"YulBlock","src":"36902:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"36904:16:20"},"nodeType":"YulFunctionCall","src":"36904:18:20"},"nodeType":"YulExpressionStatement","src":"36904:18:20"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"36874:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"36882:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"36871:2:20"},"nodeType":"YulFunctionCall","src":"36871:30:20"},"nodeType":"YulIf","src":"36868:56:20"},{"nodeType":"YulAssignment","src":"36934:37:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"36964:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"36942:21:20"},"nodeType":"YulFunctionCall","src":"36942:29:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"36934:4:20"}]},{"nodeType":"YulAssignment","src":"37008:23:20","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"37020:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"37026:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37016:3:20"},"nodeType":"YulFunctionCall","src":"37016:15:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"37008:4:20"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"36781:6:20","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"36792:4:20","type":""}],"src":"36731:307:20"},{"body":{"nodeType":"YulBlock","src":"37111:241:20","statements":[{"body":{"nodeType":"YulBlock","src":"37216:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"37218:16:20"},"nodeType":"YulFunctionCall","src":"37218:18:20"},"nodeType":"YulExpressionStatement","src":"37218:18:20"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"37188:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"37196:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"37185:2:20"},"nodeType":"YulFunctionCall","src":"37185:30:20"},"nodeType":"YulIf","src":"37182:56:20"},{"nodeType":"YulAssignment","src":"37248:37:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"37278:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"37256:21:20"},"nodeType":"YulFunctionCall","src":"37256:29:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"37248:4:20"}]},{"nodeType":"YulAssignment","src":"37322:23:20","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"37334:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"37340:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37330:3:20"},"nodeType":"YulFunctionCall","src":"37330:15:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"37322:4:20"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"37095:6:20","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"37106:4:20","type":""}],"src":"37044:308:20"},{"body":{"nodeType":"YulBlock","src":"37430:60:20","statements":[{"nodeType":"YulAssignment","src":"37440:11:20","value":{"name":"ptr","nodeType":"YulIdentifier","src":"37448:3:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"37440:4:20"}]},{"nodeType":"YulAssignment","src":"37461:22:20","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"37473:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"37478:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37469:3:20"},"nodeType":"YulFunctionCall","src":"37469:14:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"37461:4:20"}]}]},"name":"array_dataslot_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"37417:3:20","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"37425:4:20","type":""}],"src":"37358:132:20"},{"body":{"nodeType":"YulBlock","src":"37588:60:20","statements":[{"nodeType":"YulAssignment","src":"37598:11:20","value":{"name":"ptr","nodeType":"YulIdentifier","src":"37606:3:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"37598:4:20"}]},{"nodeType":"YulAssignment","src":"37619:22:20","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"37631:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"37636:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37627:3:20"},"nodeType":"YulFunctionCall","src":"37627:14:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"37619:4:20"}]}]},"name":"array_dataslot_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"37575:3:20","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"37583:4:20","type":""}],"src":"37496:152:20"},{"body":{"nodeType":"YulBlock","src":"37728:40:20","statements":[{"nodeType":"YulAssignment","src":"37739:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37755:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"37749:5:20"},"nodeType":"YulFunctionCall","src":"37749:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"37739:6:20"}]}]},"name":"array_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37711:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"37721:6:20","type":""}],"src":"37654:114:20"},{"body":{"nodeType":"YulBlock","src":"37868:40:20","statements":[{"nodeType":"YulAssignment","src":"37879:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37895:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"37889:5:20"},"nodeType":"YulFunctionCall","src":"37889:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"37879:6:20"}]}]},"name":"array_length_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37851:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"37861:6:20","type":""}],"src":"37774:134:20"},{"body":{"nodeType":"YulBlock","src":"37972:40:20","statements":[{"nodeType":"YulAssignment","src":"37983:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37999:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"37993:5:20"},"nodeType":"YulFunctionCall","src":"37993:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"37983:6:20"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37955:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"37965:6:20","type":""}],"src":"37914:98:20"},{"body":{"nodeType":"YulBlock","src":"38077:40:20","statements":[{"nodeType":"YulAssignment","src":"38088:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38104:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"38098:5:20"},"nodeType":"YulFunctionCall","src":"38098:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"38088:6:20"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38060:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"38070:6:20","type":""}],"src":"38018:99:20"},{"body":{"nodeType":"YulBlock","src":"38198:38:20","statements":[{"nodeType":"YulAssignment","src":"38208:22:20","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"38220:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"38225:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38216:3:20"},"nodeType":"YulFunctionCall","src":"38216:14:20"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"38208:4:20"}]}]},"name":"array_nextElement_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"38185:3:20","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"38193:4:20","type":""}],"src":"38123:113:20"},{"body":{"nodeType":"YulBlock","src":"38337:38:20","statements":[{"nodeType":"YulAssignment","src":"38347:22:20","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"38359:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"38364:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38355:3:20"},"nodeType":"YulFunctionCall","src":"38355:14:20"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"38347:4:20"}]}]},"name":"array_nextElement_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"38324:3:20","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"38332:4:20","type":""}],"src":"38242:133:20"},{"body":{"nodeType":"YulBlock","src":"38492:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38509:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"38514:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38502:6:20"},"nodeType":"YulFunctionCall","src":"38502:19:20"},"nodeType":"YulExpressionStatement","src":"38502:19:20"},{"nodeType":"YulAssignment","src":"38530:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38549:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"38554:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38545:3:20"},"nodeType":"YulFunctionCall","src":"38545:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"38530:11:20"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"38464:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"38469:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"38480:11:20","type":""}],"src":"38381:184:20"},{"body":{"nodeType":"YulBlock","src":"38702:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38719:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"38724:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38712:6:20"},"nodeType":"YulFunctionCall","src":"38712:19:20"},"nodeType":"YulExpressionStatement","src":"38712:19:20"},{"nodeType":"YulAssignment","src":"38740:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38759:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"38764:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38755:3:20"},"nodeType":"YulFunctionCall","src":"38755:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"38740:11:20"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"38674:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"38679:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"38690:11:20","type":""}],"src":"38571:204:20"},{"body":{"nodeType":"YulBlock","src":"38876:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38893:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"38898:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38886:6:20"},"nodeType":"YulFunctionCall","src":"38886:19:20"},"nodeType":"YulExpressionStatement","src":"38886:19:20"},{"nodeType":"YulAssignment","src":"38914:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38933:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"38938:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38929:3:20"},"nodeType":"YulFunctionCall","src":"38929:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"38914:11:20"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"38848:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"38853:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"38864:11:20","type":""}],"src":"38781:168:20"},{"body":{"nodeType":"YulBlock","src":"39041:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39058:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"39063:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39051:6:20"},"nodeType":"YulFunctionCall","src":"39051:19:20"},"nodeType":"YulExpressionStatement","src":"39051:19:20"},{"nodeType":"YulAssignment","src":"39079:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39098:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"39103:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39094:3:20"},"nodeType":"YulFunctionCall","src":"39094:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"39079:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"39013:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"39018:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"39029:11:20","type":""}],"src":"38955:159:20"},{"body":{"nodeType":"YulBlock","src":"39216:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39233:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"39238:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39226:6:20"},"nodeType":"YulFunctionCall","src":"39226:19:20"},"nodeType":"YulExpressionStatement","src":"39226:19:20"},{"nodeType":"YulAssignment","src":"39254:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39273:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"39278:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39269:3:20"},"nodeType":"YulFunctionCall","src":"39269:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"39254:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"39188:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"39193:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"39204:11:20","type":""}],"src":"39120:169:20"},{"body":{"nodeType":"YulBlock","src":"39409:34:20","statements":[{"nodeType":"YulAssignment","src":"39419:18:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"39434:3:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"39419:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"39381:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"39386:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"39397:11:20","type":""}],"src":"39295:148:20"},{"body":{"nodeType":"YulBlock","src":"39493:261:20","statements":[{"nodeType":"YulAssignment","src":"39503:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"39526:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"39508:17:20"},"nodeType":"YulFunctionCall","src":"39508:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"39503:1:20"}]},{"nodeType":"YulAssignment","src":"39537:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"39560:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"39542:17:20"},"nodeType":"YulFunctionCall","src":"39542:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"39537:1:20"}]},{"body":{"nodeType":"YulBlock","src":"39700:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"39702:16:20"},"nodeType":"YulFunctionCall","src":"39702:18:20"},"nodeType":"YulExpressionStatement","src":"39702:18:20"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"39621:1:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"39628:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"39696:1:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39624:3:20"},"nodeType":"YulFunctionCall","src":"39624:74:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"39618:2:20"},"nodeType":"YulFunctionCall","src":"39618:81:20"},"nodeType":"YulIf","src":"39615:107:20"},{"nodeType":"YulAssignment","src":"39732:16:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"39743:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"39746:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39739:3:20"},"nodeType":"YulFunctionCall","src":"39739:9:20"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"39732:3:20"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"39480:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"39483:1:20","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"39489:3:20","type":""}],"src":"39449:305:20"},{"body":{"nodeType":"YulBlock","src":"39808:300:20","statements":[{"nodeType":"YulAssignment","src":"39818:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"39841:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"39823:17:20"},"nodeType":"YulFunctionCall","src":"39823:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"39818:1:20"}]},{"nodeType":"YulAssignment","src":"39852:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"39875:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"39857:17:20"},"nodeType":"YulFunctionCall","src":"39857:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"39852:1:20"}]},{"body":{"nodeType":"YulBlock","src":"40050:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"40052:16:20"},"nodeType":"YulFunctionCall","src":"40052:18:20"},"nodeType":"YulExpressionStatement","src":"40052:18:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"39962:1:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"39955:6:20"},"nodeType":"YulFunctionCall","src":"39955:9:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"39948:6:20"},"nodeType":"YulFunctionCall","src":"39948:17:20"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"39970:1:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"39977:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"40045:1:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"39973:3:20"},"nodeType":"YulFunctionCall","src":"39973:74:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"39967:2:20"},"nodeType":"YulFunctionCall","src":"39967:81:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"39944:3:20"},"nodeType":"YulFunctionCall","src":"39944:105:20"},"nodeType":"YulIf","src":"39941:131:20"},{"nodeType":"YulAssignment","src":"40082:20:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"40097:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"40100:1:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"40093:3:20"},"nodeType":"YulFunctionCall","src":"40093:9:20"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"40082:7:20"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"39791:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"39794:1:20","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"39800:7:20","type":""}],"src":"39760:348:20"},{"body":{"nodeType":"YulBlock","src":"40159:146:20","statements":[{"nodeType":"YulAssignment","src":"40169:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"40192:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"40174:17:20"},"nodeType":"YulFunctionCall","src":"40174:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"40169:1:20"}]},{"nodeType":"YulAssignment","src":"40203:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"40226:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"40208:17:20"},"nodeType":"YulFunctionCall","src":"40208:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"40203:1:20"}]},{"body":{"nodeType":"YulBlock","src":"40250:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"40252:16:20"},"nodeType":"YulFunctionCall","src":"40252:18:20"},"nodeType":"YulExpressionStatement","src":"40252:18:20"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"40244:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"40247:1:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"40241:2:20"},"nodeType":"YulFunctionCall","src":"40241:8:20"},"nodeType":"YulIf","src":"40238:34:20"},{"nodeType":"YulAssignment","src":"40282:17:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"40294:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"40297:1:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40290:3:20"},"nodeType":"YulFunctionCall","src":"40290:9:20"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"40282:4:20"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"40145:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"40148:1:20","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"40154:4:20","type":""}],"src":"40114:191:20"},{"body":{"nodeType":"YulBlock","src":"40356:51:20","statements":[{"nodeType":"YulAssignment","src":"40366:35:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40395:5:20"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"40377:17:20"},"nodeType":"YulFunctionCall","src":"40377:24:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"40366:7:20"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"40338:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"40348:7:20","type":""}],"src":"40311:96:20"},{"body":{"nodeType":"YulBlock","src":"40455:48:20","statements":[{"nodeType":"YulAssignment","src":"40465:32:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40490:5:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"40483:6:20"},"nodeType":"YulFunctionCall","src":"40483:13:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"40476:6:20"},"nodeType":"YulFunctionCall","src":"40476:21:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"40465:7:20"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"40437:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"40447:7:20","type":""}],"src":"40413:90:20"},{"body":{"nodeType":"YulBlock","src":"40553:105:20","statements":[{"nodeType":"YulAssignment","src":"40563:89:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40578:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"40585:66:20","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"40574:3:20"},"nodeType":"YulFunctionCall","src":"40574:78:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"40563:7:20"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"40535:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"40545:7:20","type":""}],"src":"40509:149:20"},{"body":{"nodeType":"YulBlock","src":"40720:77:20","statements":[{"nodeType":"YulAssignment","src":"40730:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"40741:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"40730:7:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40785:5:20"}],"functionName":{"name":"validator_assert_t_enum$_CardType_$22","nodeType":"YulIdentifier","src":"40747:37:20"},"nodeType":"YulFunctionCall","src":"40747:44:20"},"nodeType":"YulExpressionStatement","src":"40747:44:20"}]},"name":"cleanup_t_enum$_CardType_$22","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"40702:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"40712:7:20","type":""}],"src":"40664:133:20"},{"body":{"nodeType":"YulBlock","src":"40848:81:20","statements":[{"nodeType":"YulAssignment","src":"40858:65:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40873:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"40880:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"40869:3:20"},"nodeType":"YulFunctionCall","src":"40869:54:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"40858:7:20"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"40830:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"40840:7:20","type":""}],"src":"40803:126:20"},{"body":{"nodeType":"YulBlock","src":"40980:32:20","statements":[{"nodeType":"YulAssignment","src":"40990:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"41001:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"40990:7:20"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"40962:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"40972:7:20","type":""}],"src":"40935:77:20"},{"body":{"nodeType":"YulBlock","src":"41062:49:20","statements":[{"nodeType":"YulAssignment","src":"41072:33:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41087:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"41094:10:20","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"41083:3:20"},"nodeType":"YulFunctionCall","src":"41083:22:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"41072:7:20"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"41044:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"41054:7:20","type":""}],"src":"41018:93:20"},{"body":{"nodeType":"YulBlock","src":"41186:64:20","statements":[{"nodeType":"YulAssignment","src":"41196:48:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41238:5:20"}],"functionName":{"name":"cleanup_t_enum$_CardType_$22","nodeType":"YulIdentifier","src":"41209:28:20"},"nodeType":"YulFunctionCall","src":"41209:35:20"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"41196:9:20"}]}]},"name":"convert_t_enum$_CardType_$22_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"41166:5:20","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"41176:9:20","type":""}],"src":"41117:133:20"},{"body":{"nodeType":"YulBlock","src":"41307:103:20","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"41330:3:20"},{"name":"src","nodeType":"YulIdentifier","src":"41335:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"41340:6:20"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"41317:12:20"},"nodeType":"YulFunctionCall","src":"41317:30:20"},"nodeType":"YulExpressionStatement","src":"41317:30:20"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"41388:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"41393:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41384:3:20"},"nodeType":"YulFunctionCall","src":"41384:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"41402:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41377:6:20"},"nodeType":"YulFunctionCall","src":"41377:27:20"},"nodeType":"YulExpressionStatement","src":"41377:27:20"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"41289:3:20","type":""},{"name":"dst","nodeType":"YulTypedName","src":"41294:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"41299:6:20","type":""}],"src":"41256:154:20"},{"body":{"nodeType":"YulBlock","src":"41465:258:20","statements":[{"nodeType":"YulVariableDeclaration","src":"41475:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"41484:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"41479:1:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"41544:63:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"41569:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"41574:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41565:3:20"},"nodeType":"YulFunctionCall","src":"41565:11:20"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"41588:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"41593:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41584:3:20"},"nodeType":"YulFunctionCall","src":"41584:11:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"41578:5:20"},"nodeType":"YulFunctionCall","src":"41578:18:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41558:6:20"},"nodeType":"YulFunctionCall","src":"41558:39:20"},"nodeType":"YulExpressionStatement","src":"41558:39:20"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"41505:1:20"},{"name":"length","nodeType":"YulIdentifier","src":"41508:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"41502:2:20"},"nodeType":"YulFunctionCall","src":"41502:13:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"41516:19:20","statements":[{"nodeType":"YulAssignment","src":"41518:15:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"41527:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"41530:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41523:3:20"},"nodeType":"YulFunctionCall","src":"41523:10:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"41518:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"41498:3:20","statements":[]},"src":"41494:113:20"},{"body":{"nodeType":"YulBlock","src":"41641:76:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"41691:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"41696:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41687:3:20"},"nodeType":"YulFunctionCall","src":"41687:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"41705:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41680:6:20"},"nodeType":"YulFunctionCall","src":"41680:27:20"},"nodeType":"YulExpressionStatement","src":"41680:27:20"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"41622:1:20"},{"name":"length","nodeType":"YulIdentifier","src":"41625:6:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"41619:2:20"},"nodeType":"YulFunctionCall","src":"41619:13:20"},"nodeType":"YulIf","src":"41616:101:20"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"41447:3:20","type":""},{"name":"dst","nodeType":"YulTypedName","src":"41452:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"41457:6:20","type":""}],"src":"41416:307:20"},{"body":{"nodeType":"YulBlock","src":"41780:269:20","statements":[{"nodeType":"YulAssignment","src":"41790:22:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"41804:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"41810:1:20","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"41800:3:20"},"nodeType":"YulFunctionCall","src":"41800:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"41790:6:20"}]},{"nodeType":"YulVariableDeclaration","src":"41821:38:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"41851:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"41857:1:20","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"41847:3:20"},"nodeType":"YulFunctionCall","src":"41847:12:20"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"41825:18:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"41898:51:20","statements":[{"nodeType":"YulAssignment","src":"41912:27:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"41926:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"41934:4:20","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"41922:3:20"},"nodeType":"YulFunctionCall","src":"41922:17:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"41912:6:20"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"41878:18:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"41871:6:20"},"nodeType":"YulFunctionCall","src":"41871:26:20"},"nodeType":"YulIf","src":"41868:81:20"},{"body":{"nodeType":"YulBlock","src":"42001:42:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"42015:16:20"},"nodeType":"YulFunctionCall","src":"42015:18:20"},"nodeType":"YulExpressionStatement","src":"42015:18:20"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"41965:18:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"41988:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"41996:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"41985:2:20"},"nodeType":"YulFunctionCall","src":"41985:14:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"41962:2:20"},"nodeType":"YulFunctionCall","src":"41962:38:20"},"nodeType":"YulIf","src":"41959:84:20"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"41764:4:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"41773:6:20","type":""}],"src":"41729:320:20"},{"body":{"nodeType":"YulBlock","src":"42098:238:20","statements":[{"nodeType":"YulVariableDeclaration","src":"42108:58:20","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"42130:6:20"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"42160:4:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"42138:21:20"},"nodeType":"YulFunctionCall","src":"42138:27:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42126:3:20"},"nodeType":"YulFunctionCall","src":"42126:40:20"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"42112:10:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"42277:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"42279:16:20"},"nodeType":"YulFunctionCall","src":"42279:18:20"},"nodeType":"YulExpressionStatement","src":"42279:18:20"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"42220:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"42232:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"42217:2:20"},"nodeType":"YulFunctionCall","src":"42217:34:20"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"42256:10:20"},{"name":"memPtr","nodeType":"YulIdentifier","src":"42268:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"42253:2:20"},"nodeType":"YulFunctionCall","src":"42253:22:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"42214:2:20"},"nodeType":"YulFunctionCall","src":"42214:62:20"},"nodeType":"YulIf","src":"42211:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"42315:2:20","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"42319:10:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42308:6:20"},"nodeType":"YulFunctionCall","src":"42308:22:20"},"nodeType":"YulExpressionStatement","src":"42308:22:20"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"42084:6:20","type":""},{"name":"size","nodeType":"YulTypedName","src":"42092:4:20","type":""}],"src":"42055:281:20"},{"body":{"nodeType":"YulBlock","src":"42385:190:20","statements":[{"nodeType":"YulAssignment","src":"42395:33:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"42422:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"42404:17:20"},"nodeType":"YulFunctionCall","src":"42404:24:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"42395:5:20"}]},{"body":{"nodeType":"YulBlock","src":"42518:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"42520:16:20"},"nodeType":"YulFunctionCall","src":"42520:18:20"},"nodeType":"YulExpressionStatement","src":"42520:18:20"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"42443:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"42450:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"42440:2:20"},"nodeType":"YulFunctionCall","src":"42440:77:20"},"nodeType":"YulIf","src":"42437:103:20"},{"nodeType":"YulAssignment","src":"42549:20:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"42560:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"42567:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42556:3:20"},"nodeType":"YulFunctionCall","src":"42556:13:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"42549:3:20"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"42371:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"42381:3:20","type":""}],"src":"42342:233:20"},{"body":{"nodeType":"YulBlock","src":"42609:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"42626:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"42629:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42619:6:20"},"nodeType":"YulFunctionCall","src":"42619:88:20"},"nodeType":"YulExpressionStatement","src":"42619:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"42723:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"42726:4:20","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42716:6:20"},"nodeType":"YulFunctionCall","src":"42716:15:20"},"nodeType":"YulExpressionStatement","src":"42716:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"42747:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"42750:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"42740:6:20"},"nodeType":"YulFunctionCall","src":"42740:15:20"},"nodeType":"YulExpressionStatement","src":"42740:15:20"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"42581:180:20"},{"body":{"nodeType":"YulBlock","src":"42795:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"42812:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"42815:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42805:6:20"},"nodeType":"YulFunctionCall","src":"42805:88:20"},"nodeType":"YulExpressionStatement","src":"42805:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"42909:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"42912:4:20","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42902:6:20"},"nodeType":"YulFunctionCall","src":"42902:15:20"},"nodeType":"YulExpressionStatement","src":"42902:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"42933:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"42936:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"42926:6:20"},"nodeType":"YulFunctionCall","src":"42926:15:20"},"nodeType":"YulExpressionStatement","src":"42926:15:20"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"42767:180:20"},{"body":{"nodeType":"YulBlock","src":"42981:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"42998:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"43001:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42991:6:20"},"nodeType":"YulFunctionCall","src":"42991:88:20"},"nodeType":"YulExpressionStatement","src":"42991:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43095:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"43098:4:20","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43088:6:20"},"nodeType":"YulFunctionCall","src":"43088:15:20"},"nodeType":"YulExpressionStatement","src":"43088:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43119:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"43122:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"43112:6:20"},"nodeType":"YulFunctionCall","src":"43112:15:20"},"nodeType":"YulExpressionStatement","src":"43112:15:20"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"42953:180:20"},{"body":{"nodeType":"YulBlock","src":"43167:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43184:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"43187:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43177:6:20"},"nodeType":"YulFunctionCall","src":"43177:88:20"},"nodeType":"YulExpressionStatement","src":"43177:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43281:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"43284:4:20","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43274:6:20"},"nodeType":"YulFunctionCall","src":"43274:15:20"},"nodeType":"YulExpressionStatement","src":"43274:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43305:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"43308:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"43298:6:20"},"nodeType":"YulFunctionCall","src":"43298:15:20"},"nodeType":"YulExpressionStatement","src":"43298:15:20"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"43139:180:20"},{"body":{"nodeType":"YulBlock","src":"43353:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43370:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"43373:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43363:6:20"},"nodeType":"YulFunctionCall","src":"43363:88:20"},"nodeType":"YulExpressionStatement","src":"43363:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43467:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"43470:4:20","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43460:6:20"},"nodeType":"YulFunctionCall","src":"43460:15:20"},"nodeType":"YulExpressionStatement","src":"43460:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43491:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"43494:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"43484:6:20"},"nodeType":"YulFunctionCall","src":"43484:15:20"},"nodeType":"YulExpressionStatement","src":"43484:15:20"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"43325:180:20"},{"body":{"nodeType":"YulBlock","src":"43539:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43556:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"43559:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43549:6:20"},"nodeType":"YulFunctionCall","src":"43549:88:20"},"nodeType":"YulExpressionStatement","src":"43549:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43653:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"43656:4:20","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43646:6:20"},"nodeType":"YulFunctionCall","src":"43646:15:20"},"nodeType":"YulExpressionStatement","src":"43646:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43677:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"43680:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"43670:6:20"},"nodeType":"YulFunctionCall","src":"43670:15:20"},"nodeType":"YulExpressionStatement","src":"43670:15:20"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"43511:180:20"},{"body":{"nodeType":"YulBlock","src":"43725:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43742:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"43745:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43735:6:20"},"nodeType":"YulFunctionCall","src":"43735:88:20"},"nodeType":"YulExpressionStatement","src":"43735:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43839:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"43842:4:20","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43832:6:20"},"nodeType":"YulFunctionCall","src":"43832:15:20"},"nodeType":"YulExpressionStatement","src":"43832:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43863:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"43866:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"43856:6:20"},"nodeType":"YulFunctionCall","src":"43856:15:20"},"nodeType":"YulExpressionStatement","src":"43856:15:20"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"43697:180:20"},{"body":{"nodeType":"YulBlock","src":"43972:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43989:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"43992:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"43982:6:20"},"nodeType":"YulFunctionCall","src":"43982:12:20"},"nodeType":"YulExpressionStatement","src":"43982:12:20"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"43883:117:20"},{"body":{"nodeType":"YulBlock","src":"44095:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44112:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"44115:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"44105:6:20"},"nodeType":"YulFunctionCall","src":"44105:12:20"},"nodeType":"YulExpressionStatement","src":"44105:12:20"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"44006:117:20"},{"body":{"nodeType":"YulBlock","src":"44218:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44235:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"44238:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"44228:6:20"},"nodeType":"YulFunctionCall","src":"44228:12:20"},"nodeType":"YulExpressionStatement","src":"44228:12:20"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"44129:117:20"},{"body":{"nodeType":"YulBlock","src":"44341:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44358:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"44361:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"44351:6:20"},"nodeType":"YulFunctionCall","src":"44351:12:20"},"nodeType":"YulExpressionStatement","src":"44351:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"44252:117:20"},{"body":{"nodeType":"YulBlock","src":"44464:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44481:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"44484:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"44474:6:20"},"nodeType":"YulFunctionCall","src":"44474:12:20"},"nodeType":"YulExpressionStatement","src":"44474:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"44375:117:20"},{"body":{"nodeType":"YulBlock","src":"44546:54:20","statements":[{"nodeType":"YulAssignment","src":"44556:38:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"44574:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"44581:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44570:3:20"},"nodeType":"YulFunctionCall","src":"44570:14:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44590:2:20","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"44586:3:20"},"nodeType":"YulFunctionCall","src":"44586:7:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"44566:3:20"},"nodeType":"YulFunctionCall","src":"44566:28:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"44556:6:20"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"44529:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"44539:6:20","type":""}],"src":"44498:102:20"},{"body":{"nodeType":"YulBlock","src":"44712:126:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"44734:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"44742:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44730:3:20"},"nodeType":"YulFunctionCall","src":"44730:14:20"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"44746:34:20","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44723:6:20"},"nodeType":"YulFunctionCall","src":"44723:58:20"},"nodeType":"YulExpressionStatement","src":"44723:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"44802:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"44810:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44798:3:20"},"nodeType":"YulFunctionCall","src":"44798:15:20"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"44815:15:20","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44791:6:20"},"nodeType":"YulFunctionCall","src":"44791:40:20"},"nodeType":"YulExpressionStatement","src":"44791:40:20"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"44704:6:20","type":""}],"src":"44606:232:20"},{"body":{"nodeType":"YulBlock","src":"44950:124:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"44972:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"44980:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44968:3:20"},"nodeType":"YulFunctionCall","src":"44968:14:20"},{"hexValue":"455243373231456e756d657261626c653a206f776e657220696e646578206f75","kind":"string","nodeType":"YulLiteral","src":"44984:34:20","type":"","value":"ERC721Enumerable: owner index ou"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44961:6:20"},"nodeType":"YulFunctionCall","src":"44961:58:20"},"nodeType":"YulExpressionStatement","src":"44961:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45040:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"45048:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45036:3:20"},"nodeType":"YulFunctionCall","src":"45036:15:20"},{"hexValue":"74206f6620626f756e6473","kind":"string","nodeType":"YulLiteral","src":"45053:13:20","type":"","value":"t of bounds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45029:6:20"},"nodeType":"YulFunctionCall","src":"45029:38:20"},"nodeType":"YulExpressionStatement","src":"45029:38:20"}]},"name":"store_literal_in_memory_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"44942:6:20","type":""}],"src":"44844:230:20"},{"body":{"nodeType":"YulBlock","src":"45186:131:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45208:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"45216:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45204:3:20"},"nodeType":"YulFunctionCall","src":"45204:14:20"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"45220:34:20","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45197:6:20"},"nodeType":"YulFunctionCall","src":"45197:58:20"},"nodeType":"YulExpressionStatement","src":"45197:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45276:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"45284:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45272:3:20"},"nodeType":"YulFunctionCall","src":"45272:15:20"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"45289:20:20","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45265:6:20"},"nodeType":"YulFunctionCall","src":"45265:45:20"},"nodeType":"YulExpressionStatement","src":"45265:45:20"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"45178:6:20","type":""}],"src":"45080:237:20"},{"body":{"nodeType":"YulBlock","src":"45429:118:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45451:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"45459:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45447:3:20"},"nodeType":"YulFunctionCall","src":"45447:14:20"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"45463:34:20","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45440:6:20"},"nodeType":"YulFunctionCall","src":"45440:58:20"},"nodeType":"YulExpressionStatement","src":"45440:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45519:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"45527:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45515:3:20"},"nodeType":"YulFunctionCall","src":"45515:15:20"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"45532:7:20","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45508:6:20"},"nodeType":"YulFunctionCall","src":"45508:32:20"},"nodeType":"YulExpressionStatement","src":"45508:32:20"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"45421:6:20","type":""}],"src":"45323:224:20"},{"body":{"nodeType":"YulBlock","src":"45659:72:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45681:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"45689:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45677:3:20"},"nodeType":"YulFunctionCall","src":"45677:14:20"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"45693:30:20","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45670:6:20"},"nodeType":"YulFunctionCall","src":"45670:54:20"},"nodeType":"YulExpressionStatement","src":"45670:54:20"}]},"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"45651:6:20","type":""}],"src":"45553:178:20"},{"body":{"nodeType":"YulBlock","src":"45843:117:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45865:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"45873:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45861:3:20"},"nodeType":"YulFunctionCall","src":"45861:14:20"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"45877:34:20","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45854:6:20"},"nodeType":"YulFunctionCall","src":"45854:58:20"},"nodeType":"YulExpressionStatement","src":"45854:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45933:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"45941:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45929:3:20"},"nodeType":"YulFunctionCall","src":"45929:15:20"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"45946:6:20","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45922:6:20"},"nodeType":"YulFunctionCall","src":"45922:31:20"},"nodeType":"YulExpressionStatement","src":"45922:31:20"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"45835:6:20","type":""}],"src":"45737:223:20"},{"body":{"nodeType":"YulBlock","src":"46072:69:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46094:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"46102:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46090:3:20"},"nodeType":"YulFunctionCall","src":"46090:14:20"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"46106:27:20","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46083:6:20"},"nodeType":"YulFunctionCall","src":"46083:51:20"},"nodeType":"YulExpressionStatement","src":"46083:51:20"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"46064:6:20","type":""}],"src":"45966:175:20"},{"body":{"nodeType":"YulBlock","src":"46253:122:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46275:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"46283:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46271:3:20"},"nodeType":"YulFunctionCall","src":"46271:14:20"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"46287:34:20","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46264:6:20"},"nodeType":"YulFunctionCall","src":"46264:58:20"},"nodeType":"YulExpressionStatement","src":"46264:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46343:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"46351:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46339:3:20"},"nodeType":"YulFunctionCall","src":"46339:15:20"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"46356:11:20","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46332:6:20"},"nodeType":"YulFunctionCall","src":"46332:36:20"},"nodeType":"YulExpressionStatement","src":"46332:36:20"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"46245:6:20","type":""}],"src":"46147:228:20"},{"body":{"nodeType":"YulBlock","src":"46487:76:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46509:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"46517:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46505:3:20"},"nodeType":"YulFunctionCall","src":"46505:14:20"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"46521:34:20","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46498:6:20"},"nodeType":"YulFunctionCall","src":"46498:58:20"},"nodeType":"YulExpressionStatement","src":"46498:58:20"}]},"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"46479:6:20","type":""}],"src":"46381:182:20"},{"body":{"nodeType":"YulBlock","src":"46675:68:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46697:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"46705:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46693:3:20"},"nodeType":"YulFunctionCall","src":"46693:14:20"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"46709:26:20","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46686:6:20"},"nodeType":"YulFunctionCall","src":"46686:50:20"},"nodeType":"YulExpressionStatement","src":"46686:50:20"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"46667:6:20","type":""}],"src":"46569:174:20"},{"body":{"nodeType":"YulBlock","src":"46855:114:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46877:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"46885:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46873:3:20"},"nodeType":"YulFunctionCall","src":"46873:14:20"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"46889:34:20","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46866:6:20"},"nodeType":"YulFunctionCall","src":"46866:58:20"},"nodeType":"YulExpressionStatement","src":"46866:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46945:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"46953:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46941:3:20"},"nodeType":"YulFunctionCall","src":"46941:15:20"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"46958:3:20","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46934:6:20"},"nodeType":"YulFunctionCall","src":"46934:28:20"},"nodeType":"YulExpressionStatement","src":"46934:28:20"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"46847:6:20","type":""}],"src":"46749:220:20"},{"body":{"nodeType":"YulBlock","src":"47081:142:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"47103:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"47111:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47099:3:20"},"nodeType":"YulFunctionCall","src":"47099:14:20"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"47115:34:20","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47092:6:20"},"nodeType":"YulFunctionCall","src":"47092:58:20"},"nodeType":"YulExpressionStatement","src":"47092:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"47171:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"47179:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47167:3:20"},"nodeType":"YulFunctionCall","src":"47167:15:20"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"47184:31:20","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47160:6:20"},"nodeType":"YulFunctionCall","src":"47160:56:20"},"nodeType":"YulExpressionStatement","src":"47160:56:20"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"47073:6:20","type":""}],"src":"46975:248:20"},{"body":{"nodeType":"YulBlock","src":"47335:125:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"47357:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"47365:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47353:3:20"},"nodeType":"YulFunctionCall","src":"47353:14:20"},{"hexValue":"455243373231456e756d657261626c653a20676c6f62616c20696e646578206f","kind":"string","nodeType":"YulLiteral","src":"47369:34:20","type":"","value":"ERC721Enumerable: global index o"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47346:6:20"},"nodeType":"YulFunctionCall","src":"47346:58:20"},"nodeType":"YulExpressionStatement","src":"47346:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"47425:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"47433:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47421:3:20"},"nodeType":"YulFunctionCall","src":"47421:15:20"},{"hexValue":"7574206f6620626f756e6473","kind":"string","nodeType":"YulLiteral","src":"47438:14:20","type":"","value":"ut of bounds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47414:6:20"},"nodeType":"YulFunctionCall","src":"47414:39:20"},"nodeType":"YulExpressionStatement","src":"47414:39:20"}]},"name":"store_literal_in_memory_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"47327:6:20","type":""}],"src":"47229:231:20"},{"body":{"nodeType":"YulBlock","src":"47572:124:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"47594:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"47602:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47590:3:20"},"nodeType":"YulFunctionCall","src":"47590:14:20"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"47606:34:20","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47583:6:20"},"nodeType":"YulFunctionCall","src":"47583:58:20"},"nodeType":"YulExpressionStatement","src":"47583:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"47662:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"47670:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47658:3:20"},"nodeType":"YulFunctionCall","src":"47658:15:20"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"47675:13:20","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47651:6:20"},"nodeType":"YulFunctionCall","src":"47651:38:20"},"nodeType":"YulExpressionStatement","src":"47651:38:20"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"47564:6:20","type":""}],"src":"47466:230:20"},{"body":{"nodeType":"YulBlock","src":"47808:134:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"47830:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"47838:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47826:3:20"},"nodeType":"YulFunctionCall","src":"47826:14:20"},{"hexValue":"455243373231456e756d657261626c653a20636f6e7365637574697665207472","kind":"string","nodeType":"YulLiteral","src":"47842:34:20","type":"","value":"ERC721Enumerable: consecutive tr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47819:6:20"},"nodeType":"YulFunctionCall","src":"47819:58:20"},"nodeType":"YulExpressionStatement","src":"47819:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"47898:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"47906:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47894:3:20"},"nodeType":"YulFunctionCall","src":"47894:15:20"},{"hexValue":"616e7366657273206e6f7420737570706f72746564","kind":"string","nodeType":"YulLiteral","src":"47911:23:20","type":"","value":"ansfers not supported"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47887:6:20"},"nodeType":"YulFunctionCall","src":"47887:48:20"},"nodeType":"YulExpressionStatement","src":"47887:48:20"}]},"name":"store_literal_in_memory_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"47800:6:20","type":""}],"src":"47702:240:20"},{"body":{"nodeType":"YulBlock","src":"48002:62:20","statements":[{"body":{"nodeType":"YulBlock","src":"48036:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nodeType":"YulIdentifier","src":"48038:16:20"},"nodeType":"YulFunctionCall","src":"48038:18:20"},"nodeType":"YulExpressionStatement","src":"48038:18:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48025:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"48032:1:20","type":"","value":"2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"48022:2:20"},"nodeType":"YulFunctionCall","src":"48022:12:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"48015:6:20"},"nodeType":"YulFunctionCall","src":"48015:20:20"},"nodeType":"YulIf","src":"48012:46:20"}]},"name":"validator_assert_t_enum$_CardType_$22","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47995:5:20","type":""}],"src":"47948:116:20"},{"body":{"nodeType":"YulBlock","src":"48113:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"48170:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"48179:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"48182:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"48172:6:20"},"nodeType":"YulFunctionCall","src":"48172:12:20"},"nodeType":"YulExpressionStatement","src":"48172:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48136:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48161:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"48143:17:20"},"nodeType":"YulFunctionCall","src":"48143:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"48133:2:20"},"nodeType":"YulFunctionCall","src":"48133:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"48126:6:20"},"nodeType":"YulFunctionCall","src":"48126:43:20"},"nodeType":"YulIf","src":"48123:63:20"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48106:5:20","type":""}],"src":"48070:122:20"},{"body":{"nodeType":"YulBlock","src":"48238:76:20","statements":[{"body":{"nodeType":"YulBlock","src":"48292:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"48301:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"48304:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"48294:6:20"},"nodeType":"YulFunctionCall","src":"48294:12:20"},"nodeType":"YulExpressionStatement","src":"48294:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48261:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48283:5:20"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"48268:14:20"},"nodeType":"YulFunctionCall","src":"48268:21:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"48258:2:20"},"nodeType":"YulFunctionCall","src":"48258:32:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"48251:6:20"},"nodeType":"YulFunctionCall","src":"48251:40:20"},"nodeType":"YulIf","src":"48248:60:20"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48231:5:20","type":""}],"src":"48198:116:20"},{"body":{"nodeType":"YulBlock","src":"48362:78:20","statements":[{"body":{"nodeType":"YulBlock","src":"48418:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"48427:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"48430:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"48420:6:20"},"nodeType":"YulFunctionCall","src":"48420:12:20"},"nodeType":"YulExpressionStatement","src":"48420:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48385:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48409:5:20"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"48392:16:20"},"nodeType":"YulFunctionCall","src":"48392:23:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"48382:2:20"},"nodeType":"YulFunctionCall","src":"48382:34:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"48375:6:20"},"nodeType":"YulFunctionCall","src":"48375:42:20"},"nodeType":"YulIf","src":"48372:62:20"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48355:5:20","type":""}],"src":"48320:120:20"},{"body":{"nodeType":"YulBlock","src":"48489:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"48546:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"48555:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"48558:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"48548:6:20"},"nodeType":"YulFunctionCall","src":"48548:12:20"},"nodeType":"YulExpressionStatement","src":"48548:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48512:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48537:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"48519:17:20"},"nodeType":"YulFunctionCall","src":"48519:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"48509:2:20"},"nodeType":"YulFunctionCall","src":"48509:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"48502:6:20"},"nodeType":"YulFunctionCall","src":"48502:43:20"},"nodeType":"YulIf","src":"48499:63:20"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48482:5:20","type":""}],"src":"48446:122:20"}]},"contents":"{\n\n    // address[]\n    function abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_address_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_address(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    // address[]\n    function abi_decode_t_array$_t_address_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_address_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_address_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_address_to_t_address(value0, pos) -> updatedPos {\n        abi_encode_t_address_to_t_address(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr(value0, pos) -> updatedPos {\n        updatedPos := abi_encode_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr(value0, pos)\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    // address[] -> address[]\n    function abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_address_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_address_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_address_to_t_address(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_address_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    // struct BusinessCardBase.Card[] -> struct BusinessCardBase.Card[]\n    function abi_encode_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let headStart := pos\n        let tail := add(pos, mul(length, 0x20))\n        let baseRef := array_dataslot_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, sub(tail, headStart))\n            let elementValue0 := mload(srcPtr)\n            tail := abi_encodeUpdatedPos_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr(elementValue0, tail)\n            srcPtr := array_nextElement_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr(srcPtr)\n            pos := add(pos, 0x20)\n        }\n        pos := tail\n        end := pos\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_enum$_CardType_$22_to_t_uint8(value, pos) {\n        mstore(pos, convert_t_enum$_CardType_$22_to_t_uint8(value))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 53)\n        store_literal_in_memory_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314(pos)\n        end := add(pos, 64)\n    }\n\n    // struct BusinessCardBase.Card -> struct BusinessCardBase.Card\n    function abi_encode_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr(value, pos)  -> end  {\n        let tail := add(pos, 0xe0)\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x00))\n\n            mstore(add(pos, 0x00), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // email\n\n            let memberValue0 := mload(add(value, 0x20))\n\n            mstore(add(pos, 0x20), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // phone\n\n            let memberValue0 := mload(add(value, 0x40))\n\n            mstore(add(pos, 0x40), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // company\n\n            let memberValue0 := mload(add(value, 0x60))\n\n            mstore(add(pos, 0x60), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // cardType\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_enum$_CardType_$22_to_t_uint8(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // valueDesired\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xa0))\n        }\n\n        {\n            // owner\n\n            let memberValue0 := mload(add(value, 0xc0))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0xc0))\n        }\n\n        end := tail\n    }\n\n    // struct BusinessCardBase.Card -> struct BusinessCardBase.Card\n    function abi_encode_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr_fromStack(value, pos)  -> end  {\n        let tail := add(pos, 0xe0)\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x00))\n\n            mstore(add(pos, 0x00), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // email\n\n            let memberValue0 := mload(add(value, 0x20))\n\n            mstore(add(pos, 0x20), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // phone\n\n            let memberValue0 := mload(add(value, 0x40))\n\n            mstore(add(pos, 0x40), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // company\n\n            let memberValue0 := mload(add(value, 0x60))\n\n            mstore(add(pos, 0x60), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // cardType\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_enum$_CardType_$22_to_t_uint8(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // valueDesired\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xa0))\n        }\n\n        {\n            // owner\n\n            let memberValue0 := mload(add(value, 0xc0))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0xc0))\n        }\n\n        end := tail\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_uint32__to_t_array$_t_address_$dyn_memory_ptr_t_uint32__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value2,  tail)\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value3,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_address_to_t_address_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_struct$_Card_$87_memory_ptr__to_t_struct$_Card_$87_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_struct$_Card_$87_memory_ptr_to_t_struct$_Card_$87_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_string_memory_ptr__to_t_uint256_t_string_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_address_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_dataslot_t_array$_t_address_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function array_dataslot_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function array_length_t_array$_t_address_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_nextElement_t_array$_t_address_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_Card_$87_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_enum$_CardType_$22(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_CardType_$22(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function convert_t_enum$_CardType_$22_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_CardType_$22(value)\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x31() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function store_literal_in_memory_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721Enumerable: owner index ou\")\n\n        mstore(add(memPtr, 32), \"t of bounds\")\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: token already minted\")\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: mint to the zero address\")\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function store_literal_in_memory_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721Enumerable: global index o\")\n\n        mstore(add(memPtr, 32), \"ut of bounds\")\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function store_literal_in_memory_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721Enumerable: consecutive tr\")\n\n        mstore(add(memPtr, 32), \"ansfers not supported\")\n\n    }\n\n    function validator_assert_t_enum$_CardType_$22(value) {\n        if iszero(lt(value, 2)) { panic_error_0x21() }\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x61A53251 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xA2235934 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xB0DF9E53 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xB0DF9E53 EQ PUSH2 0x69F JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x6CA JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x6F3 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x730 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0xA2235934 EQ PUSH2 0x5E5 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x60E JUMPI DUP1 PUSH4 0xA4EF7031 EQ PUSH2 0x637 JUMPI DUP1 PUSH4 0xA7F93EBD EQ PUSH2 0x674 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x7D620130 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x7D620130 EQ PUSH2 0x515 JUMPI DUP1 PUSH4 0x9188D312 EQ PUSH2 0x540 JUMPI DUP1 PUSH4 0x95ACF987 EQ PUSH2 0x57D JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x5BA JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x61A53251 EQ PUSH2 0x470 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x49B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x4D8 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x185590E2 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x42842E0E GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x3B1 JUMPI DUP1 PUSH4 0x46F45B8D EQ PUSH2 0x3DA JUMPI DUP1 PUSH4 0x47C36B8C EQ PUSH2 0x40A JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x433 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x185590E2 EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x374 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x154308F0 EQ PUSH2 0x2B3 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2E3 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x22F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x404C JUMP JUMPDEST PUSH2 0x76D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x492A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x219 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x226 SWAP2 SWAP1 PUSH2 0x4945 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x256 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x251 SWAP2 SWAP1 PUSH2 0x41BE JUMP JUMPDEST PUSH2 0x879 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x263 SWAP2 SWAP1 PUSH2 0x4871 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28E SWAP2 SWAP1 PUSH2 0x400C JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29D PUSH2 0x9D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2AA SWAP2 SWAP1 PUSH2 0x492A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C8 SWAP2 SWAP1 PUSH2 0x41EB JUMP JUMPDEST PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DA SWAP2 SWAP1 PUSH2 0x492A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xE9C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x335 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x330 SWAP2 SWAP1 PUSH2 0x400C JUMP JUMPDEST PUSH2 0xEA9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x342 SWAP2 SWAP1 PUSH2 0x4BC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x372 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x36D SWAP2 SWAP1 PUSH2 0x3EF6 JUMP JUMPDEST PUSH2 0x11D2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x380 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x396 SWAP2 SWAP1 PUSH2 0x400C JUMP JUMPDEST PUSH2 0x1232 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A8 SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D3 SWAP2 SWAP1 PUSH2 0x3EF6 JUMP JUMPDEST PUSH2 0x12D7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3EF SWAP2 SWAP1 PUSH2 0x40A6 JUMP JUMPDEST PUSH2 0x12F7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x401 SWAP2 SWAP1 PUSH2 0x492A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x416 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x431 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x42C SWAP2 SWAP1 PUSH2 0x4247 JUMP JUMPDEST PUSH2 0x1439 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x455 SWAP2 SWAP1 PUSH2 0x41BE JUMP JUMPDEST PUSH2 0x14C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x467 SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x485 PUSH2 0x1538 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x492 SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4BD SWAP2 SWAP1 PUSH2 0x41BE JUMP JUMPDEST PUSH2 0x1542 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4CF SWAP2 SWAP1 PUSH2 0x4871 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4FF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4FA SWAP2 SWAP1 PUSH2 0x3E89 JUMP JUMPDEST PUSH2 0x15C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50C SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x52A PUSH2 0x1681 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x537 SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x567 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x562 SWAP2 SWAP1 PUSH2 0x41BE JUMP JUMPDEST PUSH2 0x168E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x574 SWAP2 SWAP1 PUSH2 0x4BC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x589 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x59F SWAP2 SWAP1 PUSH2 0x3E89 JUMP JUMPDEST PUSH2 0x19AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B1 SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5CF PUSH2 0x19BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5DC SWAP2 SWAP1 PUSH2 0x4945 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x60C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x607 SWAP2 SWAP1 PUSH2 0x40EF JUMP JUMPDEST PUSH2 0x1A51 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x61A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x635 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x630 SWAP2 SWAP1 PUSH2 0x3FCC JUMP JUMPDEST PUSH2 0x206D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x643 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x65E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x659 SWAP2 SWAP1 PUSH2 0x3E89 JUMP JUMPDEST PUSH2 0x2083 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66B SWAP2 SWAP1 PUSH2 0x4945 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x680 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x689 PUSH2 0x2154 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x696 SWAP2 SWAP1 PUSH2 0x4BE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6B4 PUSH2 0x215E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6C1 SWAP2 SWAP1 PUSH2 0x4908 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6EC SWAP2 SWAP1 PUSH2 0x3F49 JUMP JUMPDEST PUSH2 0x24A0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x715 SWAP2 SWAP1 PUSH2 0x41BE JUMP JUMPDEST PUSH2 0x2502 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x727 SWAP2 SWAP1 PUSH2 0x4945 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x757 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x752 SWAP2 SWAP1 PUSH2 0x3EB6 JUMP JUMPDEST PUSH2 0x256A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x764 SWAP2 SWAP1 PUSH2 0x492A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x780E9D6300000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x7E0 JUMPI POP PUSH2 0x7DF DUP3 PUSH2 0x25FE JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x65 DUP1 SLOAD PUSH2 0x7F6 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x822 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x86F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x844 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x86F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x852 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x884 DUP3 PUSH2 0x26E0 JUMP JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8CA DUP3 PUSH2 0x1542 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x93B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x932 SWAP1 PUSH2 0x4B24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x95A PUSH2 0x272B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x989 JUMPI POP PUSH2 0x988 DUP2 PUSH2 0x983 PUSH2 0x272B JUMP JUMPDEST PUSH2 0x256A JUMP JUMPDEST JUMPDEST PUSH2 0x9C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9BF SWAP1 PUSH2 0x4B44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9D2 DUP4 DUP4 PUSH2 0x2733 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xAFF JUMPI PUSH1 0xCC SLOAD CALLVALUE EQ PUSH2 0xA66 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7D604D0E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xCE PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xAF3 SWAP2 SWAP1 PUSH2 0x4DAA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xC1B JUMP JUMPDEST PUSH1 0xCB SLOAD CALLVALUE EQ PUSH2 0xB3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x7D604D0E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xCD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xA PUSH4 0xFFFFFFFF AND PUSH1 0xCE PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 ISZERO ISZERO PUSH1 0xD0 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0xCAE JUMPI PUSH1 0x40 MLOAD PUSH32 0xE11CD5BE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA PUSH4 0xFFFFFFFF AND DUP4 GT ISZERO PUSH2 0xCEF JUMPI PUSH1 0x40 MLOAD PUSH32 0x667D7A4800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0xCC SLOAD PUSH2 0xCFD SWAP2 SWAP1 PUSH2 0x4E00 JUMP JUMPDEST CALLVALUE EQ PUSH2 0xD35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7D604D0E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 MLOAD DUP4 EQ PUSH2 0xD6F JUMPI PUSH1 0x40 MLOAD PUSH32 0xA84927600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xE40 JUMPI PUSH1 0x1 PUSH1 0xCE PUSH1 0x0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD98 JUMPI PUSH2 0xD97 PUSH2 0x5110 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xE26 SWAP2 SWAP1 PUSH2 0x4DAA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0xE38 SWAP1 PUSH2 0x4FDC JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD77 JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6DF9081C5DED9CFF457E4B66EB4D5C66A49BF08DED297C2887204B850A135489 DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0xE89 SWAP3 SWAP2 SWAP1 PUSH2 0x48D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x99 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xEB1 PUSH2 0x3B9A JUMP JUMPDEST PUSH1 0xC9 PUSH2 0xEBD DUP5 DUP5 PUSH2 0x1232 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xECE JUMPI PUSH2 0xECD PUSH2 0x5110 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0xEF7 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF23 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF70 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF45 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF70 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF53 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0xF89 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFB5 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1002 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFD7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1002 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFE5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH2 0x101B SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1047 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1094 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1069 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1094 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1077 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x10AD SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x10D9 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1126 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x10FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1126 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1109 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1154 JUMPI PUSH2 0x1153 PUSH2 0x5083 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1166 JUMPI PUSH2 0x1165 PUSH2 0x5083 JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x11E3 PUSH2 0x11DD PUSH2 0x272B JUMP JUMPDEST DUP3 PUSH2 0x27EC JUMP JUMPDEST PUSH2 0x1222 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1219 SWAP1 PUSH2 0x49E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x122D DUP4 DUP4 DUP4 PUSH2 0x2881 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x123D DUP4 PUSH2 0x15C9 JUMP JUMPDEST DUP3 LT PUSH2 0x127E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1275 SWAP1 PUSH2 0x4A04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x97 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x12F2 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x24A0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCA SLOAD CALLVALUE EQ PUSH2 0x1334 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE11CD5BE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xD0 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0xD1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x13DF SWAP3 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x72D0050D8F1A0F19ACE5B1F50E8B5333308C60902442B7444A65CFFFBAD884E7 CALLVALUE DUP5 PUSH1 0x40 MLOAD PUSH2 0x1428 SWAP3 SWAP2 SWAP1 PUSH2 0x4C01 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14AD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x427573696E657373436172644261736500000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4243000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x28EC JUMP JUMPDEST DUP3 PUSH1 0xCB DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0xCC DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0xCA DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14D1 PUSH2 0xE9C JUMP JUMPDEST DUP3 LT PUSH2 0x1512 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1509 SWAP1 PUSH2 0x4B64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x99 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1526 JUMPI PUSH2 0x1525 PUSH2 0x5110 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCB SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x154E DUP4 PUSH2 0x2949 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x15C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15B7 SWAP1 PUSH2 0x4B04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x163A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1631 SWAP1 PUSH2 0x4AC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x68 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC9 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1696 PUSH2 0x3B9A JUMP JUMPDEST PUSH1 0xC9 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x16AA JUMPI PUSH2 0x16A9 PUSH2 0x5110 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x16D3 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x16FF SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x174C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1721 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x174C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x172F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x1765 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1791 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x17DE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x17B3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x17DE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x17C1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH2 0x17F7 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1823 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1870 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1845 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1870 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1853 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x1889 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x18B5 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1902 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x18D7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1902 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x18E5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1930 JUMPI PUSH2 0x192F PUSH2 0x5083 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1942 JUMPI PUSH2 0x1941 PUSH2 0x5083 JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B8 DUP3 PUSH2 0x15C9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x66 DUP1 SLOAD PUSH2 0x19CE SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x19FA SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1A47 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1A1C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1A47 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1A2A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCE PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x1B07 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5594523C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP5 MLOAD DUP7 MLOAD DUP9 MLOAD PUSH2 0x1B1A SWAP2 SWAP1 PUSH2 0x4E00 JUMP JUMPDEST PUSH2 0x1B24 SWAP2 SWAP1 PUSH2 0x4E00 JUMP JUMPDEST PUSH2 0x1B2E SWAP2 SWAP1 PUSH2 0x4E00 JUMP JUMPDEST EQ DUP1 PUSH2 0x1B66 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1B9D JUMPI PUSH1 0x40 MLOAD PUSH32 0xB73F7BA500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xCE PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x1C53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5594523C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xD1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x1CA0 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CCC SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1D19 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1CEE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1D19 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1CFC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x1D5B JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1D69 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x1D6E JUMP JUMPDEST PUSH1 0x1 SWAP2 POP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP5 MLOAD EQ PUSH2 0x1D9C JUMPI DUP4 PUSH2 0x1DD3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4E2F410000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1DEB JUMPI PUSH2 0x1DEA PUSH2 0x5083 JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP PUSH1 0xC9 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1E5A SWAP3 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1E77 SWAP3 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1E94 SWAP3 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1EB1 SWAP3 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1EDD JUMPI PUSH2 0x1EDC PUSH2 0x5083 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH1 0x0 PUSH1 0x1 PUSH1 0xC9 DUP1 SLOAD SWAP1 POP PUSH2 0x1F49 SWAP2 SWAP1 PUSH2 0x4E5A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0xCE PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1FD8 SWAP2 SWAP1 PUSH2 0x4E5A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1FE9 CALLER DUP3 PUSH2 0x2986 JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x1FFC JUMPI PUSH2 0x1FFB PUSH2 0x5083 JUMP JUMPDEST JUMPDEST DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x200F JUMPI PUSH2 0x200E PUSH2 0x5083 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x2020 JUMPI PUSH2 0x201F DUP7 DUP3 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH32 0x114AB4DF1FFB6B5225040178874680842D3203BF8CE3F59FC3A9937291066A3C DUP11 DUP11 DUP11 DUP8 DUP11 CALLER PUSH1 0x40 MLOAD PUSH2 0x205A SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4967 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x207F PUSH2 0x2078 PUSH2 0x272B JUMP JUMPDEST DUP4 DUP4 PUSH2 0x29A4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xD1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x20CF SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x20FB SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2148 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x211D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2148 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x212B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCC SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xC9 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x2497 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x21B5 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x21E1 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x222E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2203 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x222E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2211 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x2247 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2273 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x22C0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2295 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x22C0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x22A3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH2 0x22D9 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2305 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2352 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2327 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2352 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2335 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x236B SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2397 SWAP1 PUSH2 0x4F79 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x23E4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x23B9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x23E4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x23C7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2412 JUMPI PUSH2 0x2411 PUSH2 0x5083 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2424 JUMPI PUSH2 0x2423 PUSH2 0x5083 JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2182 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x24B1 PUSH2 0x24AB PUSH2 0x272B JUMP JUMPDEST DUP4 PUSH2 0x27EC JUMP JUMPDEST PUSH2 0x24F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24E7 SWAP1 PUSH2 0x49E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x24FC DUP5 DUP5 DUP5 DUP5 PUSH2 0x2B11 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x250D DUP3 PUSH2 0x26E0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2517 PUSH2 0x2B6D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x2537 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2562 JUMP JUMPDEST DUP1 PUSH2 0x2541 DUP5 PUSH2 0x2B84 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2552 SWAP3 SWAP2 SWAP1 PUSH2 0x484D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x26C9 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x26D9 JUMPI POP PUSH2 0x26D8 DUP3 PUSH2 0x2C5C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26E9 DUP2 PUSH2 0x2CC6 JUMP JUMPDEST PUSH2 0x2728 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x271F SWAP1 PUSH2 0x4B04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x69 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x27A6 DUP4 PUSH2 0x1542 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x27F8 DUP4 PUSH2 0x1542 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x283A JUMPI POP PUSH2 0x2839 DUP2 DUP6 PUSH2 0x256A JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2878 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2860 DUP5 PUSH2 0x879 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x288C DUP4 DUP4 DUP4 PUSH2 0x2D07 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH32 0xA39C1232E046AB0AD1C4221E11516A35AD636B4EB5A7ACAABBFD44EACA8FE007 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x293B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2932 SWAP1 PUSH2 0x4B84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2945 DUP3 DUP3 PUSH2 0x3001 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x29A0 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x3082 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2A13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A0A SWAP1 PUSH2 0x4AA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6A PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x2B04 SWAP2 SWAP1 PUSH2 0x492A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x2B1C DUP5 DUP5 DUP5 PUSH2 0x2881 JUMP JUMPDEST PUSH2 0x2B28 DUP5 DUP5 DUP5 DUP5 PUSH2 0x30DD JUMP JUMPDEST PUSH2 0x2B67 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B5E SWAP1 PUSH2 0x4A24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x2B93 DUP5 PUSH2 0x3274 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BB2 JUMPI PUSH2 0x2BB1 PUSH2 0x513F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2BE4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x2C51 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2C3B JUMPI PUSH2 0x2C3A PUSH2 0x5054 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x2C4C JUMPI PUSH2 0x2C51 JUMP JUMPDEST PUSH2 0x2BF2 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2CE8 DUP4 PUSH2 0x2949 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2D27 DUP3 PUSH2 0x1542 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2D7D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D74 SWAP1 PUSH2 0x4A44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2DED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DE4 SWAP1 PUSH2 0x4A84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2DFA DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x33C7 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2E1A DUP3 PUSH2 0x1542 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2E70 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E67 SWAP1 PUSH2 0x4A44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x68 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x68 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x67 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2FFC DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x3527 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3050 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3047 SWAP1 PUSH2 0x4B84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x65 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x3066 SWAP3 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST POP DUP1 PUSH1 0x66 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x307D SWAP3 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x308C DUP4 DUP4 PUSH2 0x352D JUMP JUMPDEST PUSH2 0x3099 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x30DD JUMP JUMPDEST PUSH2 0x30D8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30CF SWAP1 PUSH2 0x4A24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30FE DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x374B JUMP JUMPDEST ISZERO PUSH2 0x3267 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x3127 PUSH2 0x272B JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3149 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x488C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x3194 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3191 SWAP2 SWAP1 PUSH2 0x4079 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3217 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x31C4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x31C9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x320F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3206 SWAP1 PUSH2 0x4A24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x326C JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x32D2 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x32C8 JUMPI PUSH2 0x32C7 PUSH2 0x5054 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x330F JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x3305 JUMPI PUSH2 0x3304 PUSH2 0x5054 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x333E JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x3334 JUMPI PUSH2 0x3333 PUSH2 0x5054 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x3367 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x335D JUMPI PUSH2 0x335C PUSH2 0x5054 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x338C JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x3382 JUMPI PUSH2 0x3381 PUSH2 0x5054 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x33AF JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x33A5 JUMPI PUSH2 0x33A4 PUSH2 0x5054 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x33BE JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33D3 DUP5 DUP5 DUP5 DUP5 PUSH2 0x376E JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3417 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x340E SWAP1 PUSH2 0x4BA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x345F JUMPI PUSH2 0x345A DUP2 PUSH2 0x3894 JUMP JUMPDEST PUSH2 0x349E JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x349D JUMPI PUSH2 0x349C DUP6 DUP3 PUSH2 0x38DD JUMP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x34E1 JUMPI PUSH2 0x34DC DUP2 PUSH2 0x3A4A JUMP JUMPDEST PUSH2 0x3520 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x351F JUMPI PUSH2 0x351E DUP5 DUP3 PUSH2 0x3B1B JUMP JUMPDEST JUMPDEST JUMPDEST POP POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x359D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3594 SWAP1 PUSH2 0x4AE4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x35A6 DUP2 PUSH2 0x2CC6 JUMP JUMPDEST ISZERO PUSH2 0x35E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x35DD SWAP1 PUSH2 0x4A64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x35F4 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x33C7 JUMP JUMPDEST PUSH2 0x35FD DUP2 PUSH2 0x2CC6 JUMP JUMPDEST ISZERO PUSH2 0x363D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3634 SWAP1 PUSH2 0x4A64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x68 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x67 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x3747 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x3527 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x388E JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3802 JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x37FA SWAP2 SWAP1 PUSH2 0x4E5A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x388D JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3885 SWAP2 SWAP1 PUSH2 0x4DAA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x99 DUP1 SLOAD SWAP1 POP PUSH1 0x9A PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x99 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x38EA DUP5 PUSH2 0x15C9 JUMP JUMPDEST PUSH2 0x38F4 SWAP2 SWAP1 PUSH2 0x4E5A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x98 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 EQ PUSH2 0x39D9 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 PUSH1 0x97 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x98 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x98 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x97 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x99 DUP1 SLOAD SWAP1 POP PUSH2 0x3A5E SWAP2 SWAP1 PUSH2 0x4E5A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x9A PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x99 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3A8E JUMPI PUSH2 0x3A8D PUSH2 0x5110 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0x99 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3AB0 JUMPI PUSH2 0x3AAF PUSH2 0x5110 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x9A PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x9A PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x99 DUP1 SLOAD DUP1 PUSH2 0x3AFF JUMPI PUSH2 0x3AFE PUSH2 0x50E1 JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B26 DUP4 PUSH2 0x15C9 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x98 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3BD5 JUMPI PUSH2 0x3BD4 PUSH2 0x5083 JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x3C0B SWAP1 PUSH2 0x4F79 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x3C2D JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x3C74 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x3C46 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x3C74 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x3C74 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x3C73 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x3C58 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x3C81 SWAP2 SWAP1 PUSH2 0x3C85 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x3C9E JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x3C86 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB5 PUSH2 0x3CB0 DUP5 PUSH2 0x4C56 JUMP JUMPDEST PUSH2 0x4C31 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x3CD8 JUMPI PUSH2 0x3CD7 PUSH2 0x5173 JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3D08 JUMPI DUP2 PUSH2 0x3CEE DUP9 DUP3 PUSH2 0x3D96 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3CDB JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D25 PUSH2 0x3D20 DUP5 PUSH2 0x4C82 JUMP JUMPDEST PUSH2 0x4C31 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x3D41 JUMPI PUSH2 0x3D40 PUSH2 0x5178 JUMP JUMPDEST JUMPDEST PUSH2 0x3D4C DUP5 DUP3 DUP6 PUSH2 0x4F37 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D67 PUSH2 0x3D62 DUP5 PUSH2 0x4CB3 JUMP JUMPDEST PUSH2 0x4C31 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x3D83 JUMPI PUSH2 0x3D82 PUSH2 0x5178 JUMP JUMPDEST JUMPDEST PUSH2 0x3D8E DUP5 DUP3 DUP6 PUSH2 0x4F37 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3DA5 DUP2 PUSH2 0x55B5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3DC0 JUMPI PUSH2 0x3DBF PUSH2 0x516E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3DD0 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3CA2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3DE8 DUP2 PUSH2 0x55CC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3DFD DUP2 PUSH2 0x55E3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3E12 DUP2 PUSH2 0x55E3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3E2D JUMPI PUSH2 0x3E2C PUSH2 0x516E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3E3D DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3D12 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3E5B JUMPI PUSH2 0x3E5A PUSH2 0x516E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3E6B DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3D54 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3E83 DUP2 PUSH2 0x55FA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E9F JUMPI PUSH2 0x3E9E PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3EAD DUP5 DUP3 DUP6 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3ECD JUMPI PUSH2 0x3ECC PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3EDB DUP6 DUP3 DUP7 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3EEC DUP6 DUP3 DUP7 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3F0F JUMPI PUSH2 0x3F0E PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F1D DUP7 DUP3 DUP8 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3F2E DUP7 DUP3 DUP8 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3F3F DUP7 DUP3 DUP8 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3F63 JUMPI PUSH2 0x3F62 PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F71 DUP8 DUP3 DUP9 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x3F82 DUP8 DUP3 DUP9 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x3F93 DUP8 DUP3 DUP9 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3FB4 JUMPI PUSH2 0x3FB3 PUSH2 0x517D JUMP JUMPDEST JUMPDEST PUSH2 0x3FC0 DUP8 DUP3 DUP9 ADD PUSH2 0x3E18 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3FE3 JUMPI PUSH2 0x3FE2 PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3FF1 DUP6 DUP3 DUP7 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x4002 DUP6 DUP3 DUP7 ADD PUSH2 0x3DD9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4023 JUMPI PUSH2 0x4022 PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4031 DUP6 DUP3 DUP7 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x4042 DUP6 DUP3 DUP7 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4062 JUMPI PUSH2 0x4061 PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4070 DUP5 DUP3 DUP6 ADD PUSH2 0x3DEE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x408F JUMPI PUSH2 0x408E PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x409D DUP5 DUP3 DUP6 ADD PUSH2 0x3E03 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x40BC JUMPI PUSH2 0x40BB PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x40DA JUMPI PUSH2 0x40D9 PUSH2 0x517D JUMP JUMPDEST JUMPDEST PUSH2 0x40E6 DUP5 DUP3 DUP6 ADD PUSH2 0x3E46 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x410B JUMPI PUSH2 0x410A PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4129 JUMPI PUSH2 0x4128 PUSH2 0x517D JUMP JUMPDEST JUMPDEST PUSH2 0x4135 DUP9 DUP3 DUP10 ADD PUSH2 0x3E46 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4156 JUMPI PUSH2 0x4155 PUSH2 0x517D JUMP JUMPDEST JUMPDEST PUSH2 0x4162 DUP9 DUP3 DUP10 ADD PUSH2 0x3E46 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4183 JUMPI PUSH2 0x4182 PUSH2 0x517D JUMP JUMPDEST JUMPDEST PUSH2 0x418F DUP9 DUP3 DUP10 ADD PUSH2 0x3E46 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x41A0 DUP9 DUP3 DUP10 ADD PUSH2 0x3D96 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x41B1 DUP9 DUP3 DUP10 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x41D4 JUMPI PUSH2 0x41D3 PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x41E2 DUP5 DUP3 DUP6 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4202 JUMPI PUSH2 0x4201 PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4210 DUP6 DUP3 DUP7 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4231 JUMPI PUSH2 0x4230 PUSH2 0x517D JUMP JUMPDEST JUMPDEST PUSH2 0x423D DUP6 DUP3 DUP7 ADD PUSH2 0x3DAB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4260 JUMPI PUSH2 0x425F PUSH2 0x5182 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x426E DUP7 DUP3 DUP8 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x427F DUP7 DUP3 DUP8 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x4290 DUP7 DUP3 DUP8 ADD PUSH2 0x3E74 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42A6 DUP4 DUP4 PUSH2 0x42C6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42BE DUP4 DUP4 PUSH2 0x46BE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x42CF DUP2 PUSH2 0x4E8E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x42DE DUP2 PUSH2 0x4E8E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42EF DUP3 PUSH2 0x4D04 JUMP JUMPDEST PUSH2 0x42F9 DUP2 DUP6 PUSH2 0x4D4A JUMP JUMPDEST SWAP4 POP PUSH2 0x4304 DUP4 PUSH2 0x4CE4 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4335 JUMPI DUP2 MLOAD PUSH2 0x431C DUP9 DUP3 PUSH2 0x429A JUMP JUMPDEST SWAP8 POP PUSH2 0x4327 DUP4 PUSH2 0x4D30 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x4308 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x434D DUP3 PUSH2 0x4D0F JUMP JUMPDEST PUSH2 0x4357 DUP2 DUP6 PUSH2 0x4D5B JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x4369 DUP6 PUSH2 0x4CF4 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x43A5 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x4386 DUP6 DUP3 PUSH2 0x42B2 JUMP JUMPDEST SWAP5 POP PUSH2 0x4391 DUP4 PUSH2 0x4D3D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x436D JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x43C0 DUP2 PUSH2 0x4EA0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43D1 DUP3 PUSH2 0x4D1A JUMP JUMPDEST PUSH2 0x43DB DUP2 DUP6 PUSH2 0x4D6C JUMP JUMPDEST SWAP4 POP PUSH2 0x43EB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4F46 JUMP JUMPDEST PUSH2 0x43F4 DUP2 PUSH2 0x5187 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4408 DUP2 PUSH2 0x4F25 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4419 DUP3 PUSH2 0x4D25 JUMP JUMPDEST PUSH2 0x4423 DUP2 DUP6 PUSH2 0x4D7D JUMP JUMPDEST SWAP4 POP PUSH2 0x4433 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4F46 JUMP JUMPDEST PUSH2 0x443C DUP2 PUSH2 0x5187 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4452 DUP3 PUSH2 0x4D25 JUMP JUMPDEST PUSH2 0x445C DUP2 DUP6 PUSH2 0x4D8E JUMP JUMPDEST SWAP4 POP PUSH2 0x446C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4F46 JUMP JUMPDEST PUSH2 0x4475 DUP2 PUSH2 0x5187 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x448B DUP3 PUSH2 0x4D25 JUMP JUMPDEST PUSH2 0x4495 DUP2 DUP6 PUSH2 0x4D9F JUMP JUMPDEST SWAP4 POP PUSH2 0x44A5 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4F46 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44BE PUSH1 0x2D DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x44C9 DUP3 PUSH2 0x5198 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44E1 PUSH1 0x2B DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x44EC DUP3 PUSH2 0x51E7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4504 PUSH1 0x32 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x450F DUP3 PUSH2 0x5236 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4527 PUSH1 0x25 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x4532 DUP3 PUSH2 0x5285 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x454A PUSH1 0x1C DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x4555 DUP3 PUSH2 0x52D4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x456D PUSH1 0x24 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x4578 DUP3 PUSH2 0x52FD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4590 PUSH1 0x19 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x459B DUP3 PUSH2 0x534C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45B3 PUSH1 0x29 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x45BE DUP3 PUSH2 0x5375 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45D6 PUSH1 0x20 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x45E1 DUP3 PUSH2 0x53C4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45F9 PUSH1 0x18 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x4604 DUP3 PUSH2 0x53ED JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x461C PUSH1 0x21 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x4627 DUP3 PUSH2 0x5416 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x463F PUSH1 0x3D DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x464A DUP3 PUSH2 0x5465 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4662 PUSH1 0x2C DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x466D DUP3 PUSH2 0x54B4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4685 PUSH1 0x2B DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x4690 DUP3 PUSH2 0x5503 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46A8 PUSH1 0x35 DUP4 PUSH2 0x4D8E JUMP JUMPDEST SWAP2 POP PUSH2 0x46B3 DUP3 PUSH2 0x5552 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x0 DUP7 ADD MSTORE PUSH2 0x46DB DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x46F5 DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x470F DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x4729 DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x473E PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x43FF JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x4751 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x4820 JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x4764 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x42C6 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x0 DUP7 ADD MSTORE PUSH2 0x478C DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x47A6 DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x47C0 DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x47DA DUP3 DUP3 PUSH2 0x440E JUMP JUMPDEST SWAP2 POP POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x47EF PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x43FF JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x4802 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x4820 JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x4815 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x42C6 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4829 DUP2 PUSH2 0x4F0B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4838 DUP2 PUSH2 0x4F0B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4847 DUP2 PUSH2 0x4F15 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4859 DUP3 DUP6 PUSH2 0x4480 JUMP JUMPDEST SWAP2 POP PUSH2 0x4865 DUP3 DUP5 PUSH2 0x4480 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4886 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x42D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x48A1 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x42D5 JUMP JUMPDEST PUSH2 0x48AE PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x42D5 JUMP JUMPDEST PUSH2 0x48BB PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x482F JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x48CD DUP2 DUP5 PUSH2 0x43C6 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x48F2 DUP2 DUP6 PUSH2 0x42E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x4901 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x483E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4922 DUP2 DUP5 PUSH2 0x4342 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x493F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x43B7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x495F DUP2 DUP5 PUSH2 0x4447 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4981 DUP2 DUP10 PUSH2 0x4447 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4995 DUP2 DUP9 PUSH2 0x4447 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x49A9 DUP2 DUP8 PUSH2 0x4447 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x49BD DUP2 DUP7 PUSH2 0x4447 JUMP JUMPDEST SWAP1 POP PUSH2 0x49CC PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x482F JUMP JUMPDEST PUSH2 0x49D9 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x42D5 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x49FD DUP2 PUSH2 0x44B1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4A1D DUP2 PUSH2 0x44D4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4A3D DUP2 PUSH2 0x44F7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4A5D DUP2 PUSH2 0x451A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4A7D DUP2 PUSH2 0x453D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4A9D DUP2 PUSH2 0x4560 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4ABD DUP2 PUSH2 0x4583 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4ADD DUP2 PUSH2 0x45A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4AFD DUP2 PUSH2 0x45C9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B1D DUP2 PUSH2 0x45EC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B3D DUP2 PUSH2 0x460F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B5D DUP2 PUSH2 0x4632 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B7D DUP2 PUSH2 0x4655 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B9D DUP2 PUSH2 0x4678 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4BBD DUP2 PUSH2 0x469B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4BDE DUP2 DUP5 PUSH2 0x476F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4BFB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x482F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x4C16 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x482F JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4C28 DUP2 DUP5 PUSH2 0x4447 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C3B PUSH2 0x4C4C JUMP JUMPDEST SWAP1 POP PUSH2 0x4C47 DUP3 DUP3 PUSH2 0x4FAB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4C71 JUMPI PUSH2 0x4C70 PUSH2 0x513F JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4C9D JUMPI PUSH2 0x4C9C PUSH2 0x513F JUMP JUMPDEST JUMPDEST PUSH2 0x4CA6 DUP3 PUSH2 0x5187 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4CCE JUMPI PUSH2 0x4CCD PUSH2 0x513F JUMP JUMPDEST JUMPDEST PUSH2 0x4CD7 DUP3 PUSH2 0x5187 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DB5 DUP3 PUSH2 0x4F0B JUMP JUMPDEST SWAP2 POP PUSH2 0x4DC0 DUP4 PUSH2 0x4F0B JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x4DF5 JUMPI PUSH2 0x4DF4 PUSH2 0x5025 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E0B DUP3 PUSH2 0x4F0B JUMP JUMPDEST SWAP2 POP PUSH2 0x4E16 DUP4 PUSH2 0x4F0B JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x4E4F JUMPI PUSH2 0x4E4E PUSH2 0x5025 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E65 DUP3 PUSH2 0x4F0B JUMP JUMPDEST SWAP2 POP PUSH2 0x4E70 DUP4 PUSH2 0x4F0B JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x4E83 JUMPI PUSH2 0x4E82 PUSH2 0x5025 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E99 DUP3 PUSH2 0x4EEB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x4EE6 DUP3 PUSH2 0x55A1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F30 DUP3 PUSH2 0x4ED8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4F64 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4F49 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x4F73 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x4F91 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x4FA5 JUMPI PUSH2 0x4FA4 PUSH2 0x50B2 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4FB4 DUP3 PUSH2 0x5187 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x4FD3 JUMPI PUSH2 0x4FD2 PUSH2 0x513F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4FE7 DUP3 PUSH2 0x4F0B JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x501A JUMPI PUSH2 0x5019 PUSH2 0x5025 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x455243373231456E756D657261626C653A206F776E657220696E646578206F75 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x74206F6620626F756E6473000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x455243373231456E756D657261626C653A20676C6F62616C20696E646578206F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7574206F6620626F756E64730000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x455243373231456E756D657261626C653A20636F6E7365637574697665207472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616E7366657273206E6F7420737570706F727465640000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x55B2 JUMPI PUSH2 0x55B1 PUSH2 0x5083 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0x55BE DUP2 PUSH2 0x4E8E JUMP JUMPDEST DUP2 EQ PUSH2 0x55C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x55D5 DUP2 PUSH2 0x4EA0 JUMP JUMPDEST DUP2 EQ PUSH2 0x55E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x55EC DUP2 PUSH2 0x4EAC JUMP JUMPDEST DUP2 EQ PUSH2 0x55F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x5603 DUP2 PUSH2 0x4F0B JUMP JUMPDEST DUP2 EQ PUSH2 0x560E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASLIMIT PUSH20 0x7210133578917325BF5BAF7128C2AC7EBB158BC9 PUSH29 0xFEBE7560B6166C91DA64736F6C63430008070033000000000000000000 ","sourceMap":"436:6503:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1264:269:2;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2946:98:3;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4421:167;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3943:417;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2574:592:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4981:819;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1947:111:2;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6627:158:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5098:296:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1612:264:2;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5460:149:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4615:360:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2295:273;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2130:241:2;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6006:99:0;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2665:219:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2404:204;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6405:92:0;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6299:100;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6503:118;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3108:102:3;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3172:1437:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4655:153:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6791:146:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6111:89;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6206:87;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5675:276:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3276;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4874:162;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1264:269:2;1402:4;1440:46;1425:61;;;:11;:61;;;;:101;;;;1490:36;1514:11;1490:23;:36::i;:::-;1425:101;1418:108;;1264:269;;;:::o;2946:98:3:-;3000:13;3032:5;3025:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2946:98;:::o;4421:167::-;4497:7;4516:23;4531:7;4516:14;:23::i;:::-;4557:15;:24;4573:7;4557:24;;;;;;;;;;;;;;;;;;;;;4550:31;;4421:167;;;:::o;3943:417::-;4023:13;4039:34;4065:7;4039:25;:34::i;:::-;4023:50;;4097:5;4091:11;;:2;:11;;;;4083:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;4188:5;4172:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;4197:37;4214:5;4221:12;:10;:12::i;:::-;4197:16;:37::i;:::-;4172:62;4151:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;4332:21;4341:2;4345:7;4332:8;:21::i;:::-;4013:347;3943:417;;:::o;2574:592:0:-;2614:12;2642:11;:23;2654:10;2642:23;;;;;;;;;;;;;;;;;;;;;;;;;2638:500;;;2698:9;;2685;:22;2681:108;;2734:40;;;;;;;;;;;;;;2681:108;2857:1;2802:27;:39;2830:10;2802:39;;;;;;;;;;;;;;;:51;2842:10;2802:51;;;;;;;;;;;;;;;;:56;;;;;;;:::i;:::-;;;;;;;;2638:500;;;2906:14;;2893:9;:27;2889:113;;2947:40;;;;;;;;;;;;;;2889:113;3041:4;3015:11;:23;3027:10;3015:23;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;698:2;3059:68;;:27;:39;3087:10;3059:39;;;;;;;;;;;;;;;:51;3099:10;3059:51;;;;;;;;;;;;;;;:68;;;;2638:500;3155:4;3148:11;;2574:592;:::o;4981:819::-;5119:12;2203:5;2169:39;;:18;:30;2188:10;2169:30;;;;;;;;;;;;;;;;;;;;;;;;;:39;;;2165:106;;;2231:29;;;;;;;;;;;;;;2165:106;738:2:::1;5147:30;;:14;:30;5143:102;;;5200:34;;;;;;;;;;;;;;5143:102;5283:14;5271:9;;:26;;;;:::i;:::-;5258:9;:39;5254:117;;5320:40;;;;;;;;;;;;;;5254:117;5402:17;:24;5384:14;:42;5380:117;;5449:37;;;;;;;;;;;;;;5380:117;5507:22;5532:10;5507:35;;5557:9;5552:140;5576:14;5572:1;:18;5552:140;;;5680:1;5611:27;:49;5639:17;5657:1;5639:20;;;;;;;;:::i;:::-;;;;;;;;5611:49;;;;;;;;;;;;;;;:65;5661:14;5611:65;;;;;;;;;;;;;;;;:70;;;;;;;:::i;:::-;;;;;;;;5592:3;;;;;:::i;:::-;;;;5552:140;;;;5717:10;5707:64;;;5729:17;5755:14;5707:64;;;;;;;:::i;:::-;;;;;;;;5789:4;5782:11;;;4981:819:::0;;;;:::o;1947:111:2:-;2008:7;2034:10;:17;;;;2027:24;;1947:111;:::o;6627:158:0:-;6706:11;;:::i;:::-;6736:5;6742:35;6762:6;6770;6742:19;:35::i;:::-;6736:42;;;;;;;;:::i;:::-;;;;;;;;;;;;6729:49;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6627:158;;;;:::o;5098:296:3:-;5257:41;5276:12;:10;:12::i;:::-;5290:7;5257:18;:41::i;:::-;5249:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5359:28;5369:4;5375:2;5379:7;5359:9;:28::i;:::-;5098:296;;;:::o;1612:264:2:-;1709:7;1744:34;1772:5;1744:27;:34::i;:::-;1736:5;:42;1728:98;;;;;;;;;;;;:::i;:::-;;;;;;;;;1843:12;:19;1856:5;1843:19;;;;;;;;;;;;;;;:26;1863:5;1843:26;;;;;;;;;;;;1836:33;;1612:264;;;;:::o;5460:149:3:-;5563:39;5580:4;5586:2;5590:7;5563:39;;;;;;;;;;;;:16;:39::i;:::-;5460:149;;;:::o;4615:360:0:-;4678:12;4719:10;;4706:9;:23;4702:90;;4752:29;;;;;;;;;;;;;;4702:90;4835:4;4802:18;:30;4821:10;4802:30;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;4884:8;4849:20;:32;4870:10;4849:32;;;;;;;;;;;;;;;:43;;;;;;;;;;;;:::i;:::-;;4914:10;4908:38;;;4926:9;4937:8;4908:38;;;;;;;:::i;:::-;;;;;;;;4964:4;4957:11;;4615:360;;;:::o;2295:273::-;2414:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:13;:39::i;:::-;2480:15;2463:14;:32;;;;2517:10;2505:9;:22;;;;2550:11;2537:10;:24;;;;2295:273;;;:::o;2130:241:2:-;2205:7;2240:41;:39;:41::i;:::-;2232:5;:49;2224:106;;;;;;;;;;;;:::i;:::-;;;;;;;;;2347:10;2358:5;2347:17;;;;;;;;:::i;:::-;;;;;;;;;;2340:24;;2130:241;;;:::o;6006:99:0:-;6058:7;6084:14;;6077:21;;6006:99;:::o;2665:219:3:-;2737:7;2756:13;2772:17;2781:7;2772:8;:17::i;:::-;2756:33;;2824:1;2807:19;;:5;:19;;;;2799:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2872:5;2865:12;;;2665:219;;;:::o;2404:204::-;2476:7;2520:1;2503:19;;:5;:19;;;;2495:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2585:9;:16;2595:5;2585:16;;;;;;;;;;;;;;;;2578:23;;2404:204;;;:::o;6405:92:0:-;6452:7;6478:5;:12;;;;6471:19;;6405:92;:::o;6299:100::-;6352:11;;:::i;:::-;6382:5;6388:3;6382:10;;;;;;;;:::i;:::-;;;;;;;;;;;;6375:17;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6299:100;;;:::o;6503:118::-;6571:7;6597:17;6607:6;6597:9;:17::i;:::-;6590:24;;6503:118;;;:::o;3108:102:3:-;3164:13;3196:7;3189:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3108:102;:::o;3172:1437:0:-;2044:1;1989:27;:39;2017:10;1989:39;;;;;;;;;;;;;;;:51;2029:10;1989:51;;;;;;;;;;;;;;;;:56;1985:125;;2068:31;;;;;;;;;;;;;;1985:125;3475:1:::1;3459:12;3442:6;3436:20;3419:6;3413:20;3397:5;3391:19;:42;;;;:::i;:::-;:65;;;;:::i;:::-;:80;;;;:::i;:::-;:85;:111;;;;3500:1;3480:22;;:8;:22;;;3391:111;3374:204;;;3534:33;;;;;;;;;;;;;;3374:204;3644:1;3591:27;:39;3619:10;3591:39;;;;;;;;;;;;;;;:49;3631:8;3591:49;;;;;;;;;;;;;;;;:54;3587:123;;3668:31;;;;;;;;;;;;;;3587:123;3720:17;3747:21:::0;3771:20:::1;:30;3792:8;3771:30;;;;;;;;;;;;;;;3747:54;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3840:1;3821:7;3815:21;:26;:54;;;;3860:8;3846:22;;:10;:22;;;3815:54;3811:172;;;3896:17;3885:28;;3811:172;;;3955:17;3944:28;;3811:172;3993:16;4012:265;;;;;;;;4037:5;4012:265;;;;4063:6;4012:265;;;;4090:6;4012:265;;;;4144:1;4125:7;4119:21;:26;:44;;4156:7;4119:44;;;;;;;;;;;;;;;;;;;::::0;::::1;4012:265;;;;4187:8;4012:265;;;;;;;;:::i;:::-;;;;;;4223:12;4012:265;;;;4256:10;4012:265;;;;::::0;3993:284:::1;;4288:5;4299:4;4288:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4314:11;4343:1;4328:5;:12;;;;:16;;;;:::i;:::-;4314:30;;4409:1;4354:27;:39;4382:10;4354:39;;;;;;;;;;;;;;;:51;4394:10;4354:51;;;;;;;;;;;;;;;;:56;;;;;;;:::i;:::-;;;;;;;;4420:26;4430:10;4442:3;4420:9;:26::i;:::-;4472:17;4460:29:::0;::::1;;;;;;;:::i;:::-;;:8;:29;;;;;;;;:::i;:::-;;;4456:57;;;4491:22;4499:8;4509:3;4491:7;:22::i;:::-;4456:57;4540:3;4528:74;4545:5;4552:6;4560;4568:7;4577:12;4591:10;4528:74;;;;;;;;;;;:::i;:::-;;;;;;;;3364:1245;;;;3172:1437:::0;;;;;:::o;4655:153:3:-;4749:52;4768:12;:10;:12::i;:::-;4782:8;4792;4749:18;:52::i;:::-;4655:153;;:::o;6791:146:0:-;6862:13;6894:20;:36;6915:14;6894:36;;;;;;;;;;;;;;;6887:43;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6791:146;;;:::o;6111:89::-;6158:7;6184:9;;6177:16;;6111:89;:::o;6206:87::-;6249:13;6281:5;6274:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6206:87;:::o;5675:276:3:-;5805:41;5824:12;:10;:12::i;:::-;5838:7;5805:18;:41::i;:::-;5797:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5906:38;5920:4;5926:2;5930:7;5939:4;5906:13;:38::i;:::-;5675:276;;;;:::o;3276:::-;3349:13;3374:23;3389:7;3374:14;:23::i;:::-;3408:21;3432:10;:8;:10::i;:::-;3408:34;;3483:1;3465:7;3459:21;:25;:86;;;;;;;;;;;;;;;;;3511:7;3520:18;:7;:16;:18::i;:::-;3494:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3459:86;3452:93;;;3276:276;;;:::o;4874:162::-;4971:4;4994:18;:25;5013:5;4994:25;;;;;;;;;;;;;;;:35;5020:8;4994:35;;;;;;;;;;;;;;;;;;;;;;;;;4987:42;;4874:162;;;;:::o;1987:358::-;2125:4;2175:36;2160:51;;;:11;:51;;;;:126;;;;2242:44;2227:59;;;:11;:59;;;;2160:126;:178;;;;2302:36;2326:11;2302:23;:36::i;:::-;2160:178;2141:197;;1987:358;;;:::o;13758:133::-;13839:16;13847:7;13839;:16::i;:::-;13831:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13758:133;:::o;841:96:13:-;894:7;920:10;913:17;;841:96;:::o;13079:182:3:-;13180:2;13153:15;:24;13169:7;13153:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;13246:7;13242:2;13197:57;;13206:34;13232:7;13206:25;:34::i;:::-;13197:57;;;;;;;;;;;;13079:182;;:::o;7890:272::-;7983:4;7999:13;8015:34;8041:7;8015:25;:34::i;:::-;7999:50;;8078:5;8067:16;;:7;:16;;;:52;;;;8087:32;8104:5;8111:7;8087:16;:32::i;:::-;8067:52;:87;;;;8147:7;8123:31;;:20;8135:7;8123:11;:20::i;:::-;:31;;;8067:87;8059:96;;;7890:272;;;;:::o;5806:194:0:-;5907:37;5923:5;5930:3;5935:8;5907:15;:37::i;:::-;5989:3;5959:34;;5982:5;5959:34;;5972:8;5959:34;;;;;;;;;;5806:194;;;:::o;1605:149:3:-;5374:13:10;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1708:39:3::1;1732:5;1739:7;1708:23;:39::i;:::-;1605:149:::0;;:::o;7188:115::-;7254:7;7280;:16;7288:7;7280:16;;;;;;;;;;;;;;;;;;;;;7273:23;;7188:115;;;:::o;8492:108::-;8567:26;8577:2;8581:7;8567:26;;;;;;;;;;;;:9;:26::i;:::-;8492:108;;:::o;13397:277::-;13517:8;13508:17;;:5;:17;;;;13500:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13603:8;13565:18;:25;13584:5;13565:25;;;;;;;;;;;;;;;:35;13591:8;13565:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13648:8;13626:41;;13641:5;13626:41;;;13658:8;13626:41;;;;;;:::i;:::-;;;;;;;;13397:277;;;:::o;6812:267::-;6924:28;6934:4;6940:2;6944:7;6924:9;:28::i;:::-;6970:47;6993:4;6999:2;7003:7;7012:4;6970:22;:47::i;:::-;6962:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6812:267;;;;:::o;3794:92::-;3845:13;3870:9;;;;;;;;;;;;;;3794:92;:::o;480:707:14:-;536:13;585:14;633:1;602:28;624:5;602:21;:28::i;:::-;:32;585:49;;648:20;682:6;671:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;648:41;;703:11;829:6;825:2;821:15;813:6;809:28;802:35;;864:280;871:4;864:280;;;895:5;;;;;;;;1034:8;1029:2;1022:5;1018:14;1013:30;1008:3;1000:44;1088:2;1079:11;;;;;;:::i;:::-;;;;;1121:1;1112:5;:10;1108:21;;;1124:5;;1108:21;864:280;;;1164:6;1157:13;;;;;480:707;;;:::o;1051:166:15:-;1136:4;1174:36;1159:51;;;:11;:51;;;;1152:58;;1051:166;;;:::o;7606:126:3:-;7671:4;7723:1;7694:31;;:17;7703:7;7694:8;:17::i;:::-;:31;;;;7687:38;;7606:126;;;:::o;11742:1225::-;11877:4;11839:42;;:34;11865:7;11839:25;:34::i;:::-;:42;;;11831:92;;;;;;;;;;;;:::i;:::-;;;;;;;;;11955:1;11941:16;;:2;:16;;;;11933:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;12009:42;12030:4;12036:2;12040:7;12049:1;12009:20;:42::i;:::-;12189:4;12151:42;;:34;12177:7;12151:25;:34::i;:::-;:42;;;12143:92;;;;;;;;;;;;:::i;:::-;;;;;;;;;12304:15;:24;12320:7;12304:24;;;;;;;;;;;;12297:31;;;;;;;;;;;12791:1;12772:9;:15;12782:4;12772:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12823:1;12806:9;:13;12816:2;12806:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12863:2;12844:7;:16;12852:7;12844:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12900:7;12896:2;12881:27;;12890:4;12881:27;;;;;;;;;;;;12919:41;12939:4;12945:2;12949:7;12958:1;12919:19;:41::i;:::-;11742:1225;;;:::o;1760:160::-;5374:13:10;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1881:5:3::1;1873;:13;;;;;;;;;;;;:::i;:::-;;1906:7;1896;:17;;;;;;;;;;;;:::i;:::-;;1760:160:::0;;:::o;8821:245::-;8915:18;8921:2;8925:7;8915:5;:18::i;:::-;8951:53;8982:1;8986:2;8990:7;8999:4;8951:22;:53::i;:::-;8943:116;;;;;;;;;;;;:::i;:::-;;;;;;;;;8821:245;;;:::o;14443:815::-;14554:4;14574:15;:2;:13;;;:15::i;:::-;14570:682;;;14636:2;14609:47;;;14657:12;:10;:12::i;:::-;14671:4;14677:7;14686:4;14609:82;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14605:595;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14886:1;14869:6;:13;:18;14865:321;;;14911:60;;;;;;;;;;:::i;:::-;;;;;;;;14865:321;15138:6;15132:13;15123:6;15119:2;15115:15;15108:38;14605:595;14751:52;;;14741:62;;;:6;:62;;;;14734:69;;;;;14570:682;15237:4;15230:11;;14443:815;;;;;;;:::o;9857:916:18:-;9910:7;9929:14;9946:1;9929:18;;9994:8;9985:5;:17;9981:103;;10031:8;10022:17;;;;;;:::i;:::-;;;;;10067:2;10057:12;;;;9981:103;10110:8;10101:5;:17;10097:103;;10147:8;10138:17;;;;;;:::i;:::-;;;;;10183:2;10173:12;;;;10097:103;10226:8;10217:5;:17;10213:103;;10263:8;10254:17;;;;;;:::i;:::-;;;;;10299:2;10289:12;;;;10213:103;10342:7;10333:5;:16;10329:100;;10378:7;10369:16;;;;;;:::i;:::-;;;;;10413:1;10403:11;;;;10329:100;10455:7;10446:5;:16;10442:100;;10491:7;10482:16;;;;;;:::i;:::-;;;;;10526:1;10516:11;;;;10442:100;10568:7;10559:5;:16;10555:100;;10604:7;10595:16;;;;;;:::i;:::-;;;;;10639:1;10629:11;;;;10555:100;10681:7;10672:5;:16;10668:66;;10718:1;10708:11;;;;10668:66;10760:6;10753:13;;;9857:916;;;:::o;2440:890:2:-;2611:61;2638:4;2644:2;2648:12;2662:9;2611:26;:61::i;:::-;2699:1;2687:9;:13;2683:219;;;2828:63;;;;;;;;;;:::i;:::-;;;;;;;;2683:219;2912:15;2930:12;2912:30;;2973:1;2957:18;;:4;:18;;;2953:183;;;2991:40;3023:7;2991:31;:40::i;:::-;2953:183;;;3060:2;3052:10;;:4;:10;;;3048:88;;3078:47;3111:4;3117:7;3078:32;:47::i;:::-;3048:88;2953:183;3163:1;3149:16;;:2;:16;;;3145:179;;;3181:45;3218:7;3181:36;:45::i;:::-;3145:179;;;3253:4;3247:10;;:2;:10;;;3243:81;;3273:40;3301:2;3305:7;3273:27;:40::i;:::-;3243:81;3145:179;2601:729;2440:890;;;;:::o;17038:115:3:-;;;;;:::o;9388:920::-;9481:1;9467:16;;:2;:16;;;;9459:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;9539:16;9547:7;9539;:16::i;:::-;9538:17;9530:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9599:48;9628:1;9632:2;9636:7;9645:1;9599:20;:48::i;:::-;9743:16;9751:7;9743;:16::i;:::-;9742:17;9734:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;10151:1;10134:9;:13;10144:2;10134:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;10192:2;10173:7;:16;10181:7;10173:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;10235:7;10231:2;10210:33;;10227:1;10210:33;;;;;;;;;;;;10254:47;10282:1;10286:2;10290:7;10299:1;10254:19;:47::i;:::-;9388:920;;:::o;1423:320:11:-;1483:4;1735:1;1713:7;:19;;;:23;1706:30;;1423:320;;;:::o;15974:358:3:-;16120:1;16108:9;:13;16104:222;;;16157:1;16141:18;;:4;:18;;;16137:85;;16198:9;16179;:15;16189:4;16179:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;16137:85;16253:1;16239:16;;:2;:16;;;16235:81;;16292:9;16275;:13;16285:2;16275:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;16235:81;16104:222;15974:358;;;;:::o;4047:161:2:-;4150:10;:17;;;;4123:15;:24;4139:7;4123:24;;;;;;;;;;;:44;;;;4177:10;4193:7;4177:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4047:161;:::o;4825:981::-;5087:22;5148:1;5112:33;5140:4;5112:27;:33::i;:::-;:37;;;;:::i;:::-;5087:62;;5159:18;5180:17;:26;5198:7;5180:26;;;;;;;;;;;;5159:47;;5324:14;5310:10;:28;5306:323;;5354:19;5376:12;:18;5389:4;5376:18;;;;;;;;;;;;;;;:34;5395:14;5376:34;;;;;;;;;;;;5354:56;;5458:11;5425:12;:18;5438:4;5425:18;;;;;;;;;;;;;;;:30;5444:10;5425:30;;;;;;;;;;;:44;;;;5574:10;5541:17;:30;5559:11;5541:30;;;;;;;;;;;:43;;;;5340:289;5306:323;5722:17;:26;5740:7;5722:26;;;;;;;;;;;5715:33;;;5765:12;:18;5778:4;5765:18;;;;;;;;;;;;;;;:34;5784:14;5765:34;;;;;;;;;;;5758:41;;;4906:900;;4825:981;;:::o;6094:1061::-;6343:22;6388:1;6368:10;:17;;;;:21;;;;:::i;:::-;6343:46;;6399:18;6420:15;:24;6436:7;6420:24;;;;;;;;;;;;6399:45;;6766:19;6788:10;6799:14;6788:26;;;;;;;;:::i;:::-;;;;;;;;;;6766:48;;6850:11;6825:10;6836;6825:22;;;;;;;;:::i;:::-;;;;;;;;;:36;;;;6960:10;6929:15;:28;6945:11;6929:28;;;;;;;;;;;:41;;;;7098:15;:24;7114:7;7098:24;;;;;;;;;;;7091:31;;;7132:10;:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6165:990;;;6094:1061;:::o;3624:228::-;3708:14;3725:31;3753:2;3725:27;:31::i;:::-;3708:48;;3793:7;3766:12;:16;3779:2;3766:16;;;;;;;;;;;;;;;:24;3783:6;3766:24;;;;;;;;;;;:34;;;;3839:6;3810:17;:26;3828:7;3810:26;;;;;;;;;;;:35;;;;3698:154;3624:228;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;24:722:20:-;120:5;145:81;161:64;218:6;161:64;:::i;:::-;145:81;:::i;:::-;136:90;;246:5;275:6;268:5;261:21;309:4;302:5;298:16;291:23;;335:6;385:3;377:4;369:6;365:17;360:3;356:27;353:36;350:143;;;404:79;;:::i;:::-;350:143;517:1;502:238;527:6;524:1;521:13;502:238;;;595:3;624:37;657:3;645:10;624:37;:::i;:::-;619:3;612:50;691:4;686:3;682:14;675:21;;725:4;720:3;716:14;709:21;;562:178;549:1;546;542:9;537:14;;502:238;;;506:14;126:620;;24:722;;;;;:::o;752:410::-;829:5;854:65;870:48;911:6;870:48;:::i;:::-;854:65;:::i;:::-;845:74;;942:6;935:5;928:21;980:4;973:5;969:16;1018:3;1009:6;1004:3;1000:16;997:25;994:112;;;1025:79;;:::i;:::-;994:112;1115:41;1149:6;1144:3;1139;1115:41;:::i;:::-;835:327;752:410;;;;;:::o;1168:412::-;1246:5;1271:66;1287:49;1329:6;1287:49;:::i;:::-;1271:66;:::i;:::-;1262:75;;1360:6;1353:5;1346:21;1398:4;1391:5;1387:16;1436:3;1427:6;1422:3;1418:16;1415:25;1412:112;;;1443:79;;:::i;:::-;1412:112;1533:41;1567:6;1562:3;1557;1533:41;:::i;:::-;1252:328;1168:412;;;;;:::o;1586:139::-;1632:5;1670:6;1657:20;1648:29;;1686:33;1713:5;1686:33;:::i;:::-;1586:139;;;;:::o;1748:370::-;1819:5;1868:3;1861:4;1853:6;1849:17;1845:27;1835:122;;1876:79;;:::i;:::-;1835:122;1993:6;1980:20;2018:94;2108:3;2100:6;2093:4;2085:6;2081:17;2018:94;:::i;:::-;2009:103;;1825:293;1748:370;;;;:::o;2124:133::-;2167:5;2205:6;2192:20;2183:29;;2221:30;2245:5;2221:30;:::i;:::-;2124:133;;;;:::o;2263:137::-;2308:5;2346:6;2333:20;2324:29;;2362:32;2388:5;2362:32;:::i;:::-;2263:137;;;;:::o;2406:141::-;2462:5;2493:6;2487:13;2478:22;;2509:32;2535:5;2509:32;:::i;:::-;2406:141;;;;:::o;2566:338::-;2621:5;2670:3;2663:4;2655:6;2651:17;2647:27;2637:122;;2678:79;;:::i;:::-;2637:122;2795:6;2782:20;2820:78;2894:3;2886:6;2879:4;2871:6;2867:17;2820:78;:::i;:::-;2811:87;;2627:277;2566:338;;;;:::o;2924:340::-;2980:5;3029:3;3022:4;3014:6;3010:17;3006:27;2996:122;;3037:79;;:::i;:::-;2996:122;3154:6;3141:20;3179:79;3254:3;3246:6;3239:4;3231:6;3227:17;3179:79;:::i;:::-;3170:88;;2986:278;2924:340;;;;:::o;3270:139::-;3316:5;3354:6;3341:20;3332:29;;3370:33;3397:5;3370:33;:::i;:::-;3270:139;;;;:::o;3415:329::-;3474:6;3523:2;3511:9;3502:7;3498:23;3494:32;3491:119;;;3529:79;;:::i;:::-;3491:119;3649:1;3674:53;3719:7;3710:6;3699:9;3695:22;3674:53;:::i;:::-;3664:63;;3620:117;3415:329;;;;:::o;3750:474::-;3818:6;3826;3875:2;3863:9;3854:7;3850:23;3846:32;3843:119;;;3881:79;;:::i;:::-;3843:119;4001:1;4026:53;4071:7;4062:6;4051:9;4047:22;4026:53;:::i;:::-;4016:63;;3972:117;4128:2;4154:53;4199:7;4190:6;4179:9;4175:22;4154:53;:::i;:::-;4144:63;;4099:118;3750:474;;;;;:::o;4230:619::-;4307:6;4315;4323;4372:2;4360:9;4351:7;4347:23;4343:32;4340:119;;;4378:79;;:::i;:::-;4340:119;4498:1;4523:53;4568:7;4559:6;4548:9;4544:22;4523:53;:::i;:::-;4513:63;;4469:117;4625:2;4651:53;4696:7;4687:6;4676:9;4672:22;4651:53;:::i;:::-;4641:63;;4596:118;4753:2;4779:53;4824:7;4815:6;4804:9;4800:22;4779:53;:::i;:::-;4769:63;;4724:118;4230:619;;;;;:::o;4855:943::-;4950:6;4958;4966;4974;5023:3;5011:9;5002:7;4998:23;4994:33;4991:120;;;5030:79;;:::i;:::-;4991:120;5150:1;5175:53;5220:7;5211:6;5200:9;5196:22;5175:53;:::i;:::-;5165:63;;5121:117;5277:2;5303:53;5348:7;5339:6;5328:9;5324:22;5303:53;:::i;:::-;5293:63;;5248:118;5405:2;5431:53;5476:7;5467:6;5456:9;5452:22;5431:53;:::i;:::-;5421:63;;5376:118;5561:2;5550:9;5546:18;5533:32;5592:18;5584:6;5581:30;5578:117;;;5614:79;;:::i;:::-;5578:117;5719:62;5773:7;5764:6;5753:9;5749:22;5719:62;:::i;:::-;5709:72;;5504:287;4855:943;;;;;;;:::o;5804:468::-;5869:6;5877;5926:2;5914:9;5905:7;5901:23;5897:32;5894:119;;;5932:79;;:::i;:::-;5894:119;6052:1;6077:53;6122:7;6113:6;6102:9;6098:22;6077:53;:::i;:::-;6067:63;;6023:117;6179:2;6205:50;6247:7;6238:6;6227:9;6223:22;6205:50;:::i;:::-;6195:60;;6150:115;5804:468;;;;;:::o;6278:474::-;6346:6;6354;6403:2;6391:9;6382:7;6378:23;6374:32;6371:119;;;6409:79;;:::i;:::-;6371:119;6529:1;6554:53;6599:7;6590:6;6579:9;6575:22;6554:53;:::i;:::-;6544:63;;6500:117;6656:2;6682:53;6727:7;6718:6;6707:9;6703:22;6682:53;:::i;:::-;6672:63;;6627:118;6278:474;;;;;:::o;6758:327::-;6816:6;6865:2;6853:9;6844:7;6840:23;6836:32;6833:119;;;6871:79;;:::i;:::-;6833:119;6991:1;7016:52;7060:7;7051:6;7040:9;7036:22;7016:52;:::i;:::-;7006:62;;6962:116;6758:327;;;;:::o;7091:349::-;7160:6;7209:2;7197:9;7188:7;7184:23;7180:32;7177:119;;;7215:79;;:::i;:::-;7177:119;7335:1;7360:63;7415:7;7406:6;7395:9;7391:22;7360:63;:::i;:::-;7350:73;;7306:127;7091:349;;;;:::o;7446:509::-;7515:6;7564:2;7552:9;7543:7;7539:23;7535:32;7532:119;;;7570:79;;:::i;:::-;7532:119;7718:1;7707:9;7703:17;7690:31;7748:18;7740:6;7737:30;7734:117;;;7770:79;;:::i;:::-;7734:117;7875:63;7930:7;7921:6;7910:9;7906:22;7875:63;:::i;:::-;7865:73;;7661:287;7446:509;;;;:::o;7961:1451::-;8086:6;8094;8102;8110;8118;8167:3;8155:9;8146:7;8142:23;8138:33;8135:120;;;8174:79;;:::i;:::-;8135:120;8322:1;8311:9;8307:17;8294:31;8352:18;8344:6;8341:30;8338:117;;;8374:79;;:::i;:::-;8338:117;8479:63;8534:7;8525:6;8514:9;8510:22;8479:63;:::i;:::-;8469:73;;8265:287;8619:2;8608:9;8604:18;8591:32;8650:18;8642:6;8639:30;8636:117;;;8672:79;;:::i;:::-;8636:117;8777:63;8832:7;8823:6;8812:9;8808:22;8777:63;:::i;:::-;8767:73;;8562:288;8917:2;8906:9;8902:18;8889:32;8948:18;8940:6;8937:30;8934:117;;;8970:79;;:::i;:::-;8934:117;9075:63;9130:7;9121:6;9110:9;9106:22;9075:63;:::i;:::-;9065:73;;8860:288;9187:2;9213:53;9258:7;9249:6;9238:9;9234:22;9213:53;:::i;:::-;9203:63;;9158:118;9315:3;9342:53;9387:7;9378:6;9367:9;9363:22;9342:53;:::i;:::-;9332:63;;9286:119;7961:1451;;;;;;;;:::o;9418:329::-;9477:6;9526:2;9514:9;9505:7;9501:23;9497:32;9494:119;;;9532:79;;:::i;:::-;9494:119;9652:1;9677:53;9722:7;9713:6;9702:9;9698:22;9677:53;:::i;:::-;9667:63;;9623:117;9418:329;;;;:::o;9753:684::-;9846:6;9854;9903:2;9891:9;9882:7;9878:23;9874:32;9871:119;;;9909:79;;:::i;:::-;9871:119;10029:1;10054:53;10099:7;10090:6;10079:9;10075:22;10054:53;:::i;:::-;10044:63;;10000:117;10184:2;10173:9;10169:18;10156:32;10215:18;10207:6;10204:30;10201:117;;;10237:79;;:::i;:::-;10201:117;10342:78;10412:7;10403:6;10392:9;10388:22;10342:78;:::i;:::-;10332:88;;10127:303;9753:684;;;;;:::o;10443:619::-;10520:6;10528;10536;10585:2;10573:9;10564:7;10560:23;10556:32;10553:119;;;10591:79;;:::i;:::-;10553:119;10711:1;10736:53;10781:7;10772:6;10761:9;10757:22;10736:53;:::i;:::-;10726:63;;10682:117;10838:2;10864:53;10909:7;10900:6;10889:9;10885:22;10864:53;:::i;:::-;10854:63;;10809:118;10966:2;10992:53;11037:7;11028:6;11017:9;11013:22;10992:53;:::i;:::-;10982:63;;10937:118;10443:619;;;;;:::o;11068:179::-;11137:10;11158:46;11200:3;11192:6;11158:46;:::i;:::-;11236:4;11231:3;11227:14;11213:28;;11068:179;;;;:::o;11253:236::-;11362:10;11397:86;11479:3;11471:6;11397:86;:::i;:::-;11383:100;;11253:236;;;;:::o;11495:108::-;11572:24;11590:5;11572:24;:::i;:::-;11567:3;11560:37;11495:108;;:::o;11609:118::-;11696:24;11714:5;11696:24;:::i;:::-;11691:3;11684:37;11609:118;;:::o;11763:732::-;11882:3;11911:54;11959:5;11911:54;:::i;:::-;11981:86;12060:6;12055:3;11981:86;:::i;:::-;11974:93;;12091:56;12141:5;12091:56;:::i;:::-;12170:7;12201:1;12186:284;12211:6;12208:1;12205:13;12186:284;;;12287:6;12281:13;12314:63;12373:3;12358:13;12314:63;:::i;:::-;12307:70;;12400:60;12453:6;12400:60;:::i;:::-;12390:70;;12246:224;12233:1;12230;12226:9;12221:14;;12186:284;;;12190:14;12486:3;12479:10;;11887:608;;;11763:732;;;;:::o;12573:1071::-;12732:3;12761:74;12829:5;12761:74;:::i;:::-;12851:106;12950:6;12945:3;12851:106;:::i;:::-;12844:113;;12983:3;13028:4;13020:6;13016:17;13011:3;13007:27;13058:76;13128:5;13058:76;:::i;:::-;13157:7;13188:1;13173:426;13198:6;13195:1;13192:13;13173:426;;;13269:9;13263:4;13259:20;13254:3;13247:33;13320:6;13314:13;13348:104;13447:4;13432:13;13348:104;:::i;:::-;13340:112;;13475:80;13548:6;13475:80;:::i;:::-;13465:90;;13584:4;13579:3;13575:14;13568:21;;13233:366;13220:1;13217;13213:9;13208:14;;13173:426;;;13177:14;13615:4;13608:11;;13635:3;13628:10;;12737:907;;;;;12573:1071;;;;:::o;13650:109::-;13731:21;13746:5;13731:21;:::i;:::-;13726:3;13719:34;13650:109;;:::o;13765:360::-;13851:3;13879:38;13911:5;13879:38;:::i;:::-;13933:70;13996:6;13991:3;13933:70;:::i;:::-;13926:77;;14012:52;14057:6;14052:3;14045:4;14038:5;14034:16;14012:52;:::i;:::-;14089:29;14111:6;14089:29;:::i;:::-;14084:3;14080:39;14073:46;;13855:270;13765:360;;;;:::o;14131:139::-;14217:46;14257:5;14217:46;:::i;:::-;14212:3;14205:59;14131:139;;:::o;14276:344::-;14354:3;14382:39;14415:5;14382:39;:::i;:::-;14437:61;14491:6;14486:3;14437:61;:::i;:::-;14430:68;;14507:52;14552:6;14547:3;14540:4;14533:5;14529:16;14507:52;:::i;:::-;14584:29;14606:6;14584:29;:::i;:::-;14579:3;14575:39;14568:46;;14358:262;14276:344;;;;:::o;14626:364::-;14714:3;14742:39;14775:5;14742:39;:::i;:::-;14797:71;14861:6;14856:3;14797:71;:::i;:::-;14790:78;;14877:52;14922:6;14917:3;14910:4;14903:5;14899:16;14877:52;:::i;:::-;14954:29;14976:6;14954:29;:::i;:::-;14949:3;14945:39;14938:46;;14718:272;14626:364;;;;:::o;14996:377::-;15102:3;15130:39;15163:5;15130:39;:::i;:::-;15185:89;15267:6;15262:3;15185:89;:::i;:::-;15178:96;;15283:52;15328:6;15323:3;15316:4;15309:5;15305:16;15283:52;:::i;:::-;15360:6;15355:3;15351:16;15344:23;;15106:267;14996:377;;;;:::o;15379:366::-;15521:3;15542:67;15606:2;15601:3;15542:67;:::i;:::-;15535:74;;15618:93;15707:3;15618:93;:::i;:::-;15736:2;15731:3;15727:12;15720:19;;15379:366;;;:::o;15751:::-;15893:3;15914:67;15978:2;15973:3;15914:67;:::i;:::-;15907:74;;15990:93;16079:3;15990:93;:::i;:::-;16108:2;16103:3;16099:12;16092:19;;15751:366;;;:::o;16123:::-;16265:3;16286:67;16350:2;16345:3;16286:67;:::i;:::-;16279:74;;16362:93;16451:3;16362:93;:::i;:::-;16480:2;16475:3;16471:12;16464:19;;16123:366;;;:::o;16495:::-;16637:3;16658:67;16722:2;16717:3;16658:67;:::i;:::-;16651:74;;16734:93;16823:3;16734:93;:::i;:::-;16852:2;16847:3;16843:12;16836:19;;16495:366;;;:::o;16867:::-;17009:3;17030:67;17094:2;17089:3;17030:67;:::i;:::-;17023:74;;17106:93;17195:3;17106:93;:::i;:::-;17224:2;17219:3;17215:12;17208:19;;16867:366;;;:::o;17239:::-;17381:3;17402:67;17466:2;17461:3;17402:67;:::i;:::-;17395:74;;17478:93;17567:3;17478:93;:::i;:::-;17596:2;17591:3;17587:12;17580:19;;17239:366;;;:::o;17611:::-;17753:3;17774:67;17838:2;17833:3;17774:67;:::i;:::-;17767:74;;17850:93;17939:3;17850:93;:::i;:::-;17968:2;17963:3;17959:12;17952:19;;17611:366;;;:::o;17983:::-;18125:3;18146:67;18210:2;18205:3;18146:67;:::i;:::-;18139:74;;18222:93;18311:3;18222:93;:::i;:::-;18340:2;18335:3;18331:12;18324:19;;17983:366;;;:::o;18355:::-;18497:3;18518:67;18582:2;18577:3;18518:67;:::i;:::-;18511:74;;18594:93;18683:3;18594:93;:::i;:::-;18712:2;18707:3;18703:12;18696:19;;18355:366;;;:::o;18727:::-;18869:3;18890:67;18954:2;18949:3;18890:67;:::i;:::-;18883:74;;18966:93;19055:3;18966:93;:::i;:::-;19084:2;19079:3;19075:12;19068:19;;18727:366;;;:::o;19099:::-;19241:3;19262:67;19326:2;19321:3;19262:67;:::i;:::-;19255:74;;19338:93;19427:3;19338:93;:::i;:::-;19456:2;19451:3;19447:12;19440:19;;19099:366;;;:::o;19471:::-;19613:3;19634:67;19698:2;19693:3;19634:67;:::i;:::-;19627:74;;19710:93;19799:3;19710:93;:::i;:::-;19828:2;19823:3;19819:12;19812:19;;19471:366;;;:::o;19843:::-;19985:3;20006:67;20070:2;20065:3;20006:67;:::i;:::-;19999:74;;20082:93;20171:3;20082:93;:::i;:::-;20200:2;20195:3;20191:12;20184:19;;19843:366;;;:::o;20215:::-;20357:3;20378:67;20442:2;20437:3;20378:67;:::i;:::-;20371:74;;20454:93;20543:3;20454:93;:::i;:::-;20572:2;20567:3;20563:12;20556:19;;20215:366;;;:::o;20587:::-;20729:3;20750:67;20814:2;20809:3;20750:67;:::i;:::-;20743:74;;20826:93;20915:3;20826:93;:::i;:::-;20944:2;20939:3;20935:12;20928:19;;20587:366;;;:::o;21027:1696::-;21126:3;21162:4;21157:3;21153:14;21249:4;21242:5;21238:16;21232:23;21302:3;21296:4;21292:14;21285:4;21280:3;21276:14;21269:38;21328:73;21396:4;21382:12;21328:73;:::i;:::-;21320:81;;21177:235;21495:4;21488:5;21484:16;21478:23;21548:3;21542:4;21538:14;21531:4;21526:3;21522:14;21515:38;21574:73;21642:4;21628:12;21574:73;:::i;:::-;21566:81;;21422:236;21741:4;21734:5;21730:16;21724:23;21794:3;21788:4;21784:14;21777:4;21772:3;21768:14;21761:38;21820:73;21888:4;21874:12;21820:73;:::i;:::-;21812:81;;21668:236;21989:4;21982:5;21978:16;21972:23;22042:3;22036:4;22032:14;22025:4;22020:3;22016:14;22009:38;22068:73;22136:4;22122:12;22068:73;:::i;:::-;22060:81;;21914:238;22238:4;22231:5;22227:16;22221:23;22257:72;22323:4;22318:3;22314:14;22300:12;22257:72;:::i;:::-;22162:177;22429:4;22422:5;22418:16;22412:23;22448:63;22505:4;22500:3;22496:14;22482:12;22448:63;:::i;:::-;22349:172;22604:4;22597:5;22593:16;22587:23;22623:63;22680:4;22675:3;22671:14;22657:12;22623:63;:::i;:::-;22531:165;22713:4;22706:11;;21131:1592;21027:1696;;;;:::o;22797:1706::-;22906:3;22942:4;22937:3;22933:14;23029:4;23022:5;23018:16;23012:23;23082:3;23076:4;23072:14;23065:4;23060:3;23056:14;23049:38;23108:73;23176:4;23162:12;23108:73;:::i;:::-;23100:81;;22957:235;23275:4;23268:5;23264:16;23258:23;23328:3;23322:4;23318:14;23311:4;23306:3;23302:14;23295:38;23354:73;23422:4;23408:12;23354:73;:::i;:::-;23346:81;;23202:236;23521:4;23514:5;23510:16;23504:23;23574:3;23568:4;23564:14;23557:4;23552:3;23548:14;23541:38;23600:73;23668:4;23654:12;23600:73;:::i;:::-;23592:81;;23448:236;23769:4;23762:5;23758:16;23752:23;23822:3;23816:4;23812:14;23805:4;23800:3;23796:14;23789:38;23848:73;23916:4;23902:12;23848:73;:::i;:::-;23840:81;;23694:238;24018:4;24011:5;24007:16;24001:23;24037:72;24103:4;24098:3;24094:14;24080:12;24037:72;:::i;:::-;23942:177;24209:4;24202:5;24198:16;24192:23;24228:63;24285:4;24280:3;24276:14;24262:12;24228:63;:::i;:::-;24129:172;24384:4;24377:5;24373:16;24367:23;24403:63;24460:4;24455:3;24451:14;24437:12;24403:63;:::i;:::-;24311:165;24493:4;24486:11;;22911:1592;22797:1706;;;;:::o;24509:108::-;24586:24;24604:5;24586:24;:::i;:::-;24581:3;24574:37;24509:108;;:::o;24623:118::-;24710:24;24728:5;24710:24;:::i;:::-;24705:3;24698:37;24623:118;;:::o;24747:115::-;24832:23;24849:5;24832:23;:::i;:::-;24827:3;24820:36;24747:115;;:::o;24868:435::-;25048:3;25070:95;25161:3;25152:6;25070:95;:::i;:::-;25063:102;;25182:95;25273:3;25264:6;25182:95;:::i;:::-;25175:102;;25294:3;25287:10;;24868:435;;;;;:::o;25309:222::-;25402:4;25440:2;25429:9;25425:18;25417:26;;25453:71;25521:1;25510:9;25506:17;25497:6;25453:71;:::i;:::-;25309:222;;;;:::o;25537:640::-;25732:4;25770:3;25759:9;25755:19;25747:27;;25784:71;25852:1;25841:9;25837:17;25828:6;25784:71;:::i;:::-;25865:72;25933:2;25922:9;25918:18;25909:6;25865:72;:::i;:::-;25947;26015:2;26004:9;26000:18;25991:6;25947:72;:::i;:::-;26066:9;26060:4;26056:20;26051:2;26040:9;26036:18;26029:48;26094:76;26165:4;26156:6;26094:76;:::i;:::-;26086:84;;25537:640;;;;;;;:::o;26183:479::-;26352:4;26390:2;26379:9;26375:18;26367:26;;26439:9;26433:4;26429:20;26425:1;26414:9;26410:17;26403:47;26467:108;26570:4;26561:6;26467:108;:::i;:::-;26459:116;;26585:70;26651:2;26640:9;26636:18;26627:6;26585:70;:::i;:::-;26183:479;;;;;:::o;26668:453::-;26851:4;26889:2;26878:9;26874:18;26866:26;;26938:9;26932:4;26928:20;26924:1;26913:9;26909:17;26902:47;26966:148;27109:4;27100:6;26966:148;:::i;:::-;26958:156;;26668:453;;;;:::o;27127:210::-;27214:4;27252:2;27241:9;27237:18;27229:26;;27265:65;27327:1;27316:9;27312:17;27303:6;27265:65;:::i;:::-;27127:210;;;;:::o;27343:313::-;27456:4;27494:2;27483:9;27479:18;27471:26;;27543:9;27537:4;27533:20;27529:1;27518:9;27514:17;27507:47;27571:78;27644:4;27635:6;27571:78;:::i;:::-;27563:86;;27343:313;;;;:::o;27662:1139::-;27975:4;28013:3;28002:9;27998:19;27990:27;;28063:9;28057:4;28053:20;28049:1;28038:9;28034:17;28027:47;28091:78;28164:4;28155:6;28091:78;:::i;:::-;28083:86;;28216:9;28210:4;28206:20;28201:2;28190:9;28186:18;28179:48;28244:78;28317:4;28308:6;28244:78;:::i;:::-;28236:86;;28369:9;28363:4;28359:20;28354:2;28343:9;28339:18;28332:48;28397:78;28470:4;28461:6;28397:78;:::i;:::-;28389:86;;28522:9;28516:4;28512:20;28507:2;28496:9;28492:18;28485:48;28550:78;28623:4;28614:6;28550:78;:::i;:::-;28542:86;;28638:73;28706:3;28695:9;28691:19;28682:6;28638:73;:::i;:::-;28721;28789:3;28778:9;28774:19;28765:6;28721:73;:::i;:::-;27662:1139;;;;;;;;;:::o;28807:419::-;28973:4;29011:2;29000:9;28996:18;28988:26;;29060:9;29054:4;29050:20;29046:1;29035:9;29031:17;29024:47;29088:131;29214:4;29088:131;:::i;:::-;29080:139;;28807:419;;;:::o;29232:::-;29398:4;29436:2;29425:9;29421:18;29413:26;;29485:9;29479:4;29475:20;29471:1;29460:9;29456:17;29449:47;29513:131;29639:4;29513:131;:::i;:::-;29505:139;;29232:419;;;:::o;29657:::-;29823:4;29861:2;29850:9;29846:18;29838:26;;29910:9;29904:4;29900:20;29896:1;29885:9;29881:17;29874:47;29938:131;30064:4;29938:131;:::i;:::-;29930:139;;29657:419;;;:::o;30082:::-;30248:4;30286:2;30275:9;30271:18;30263:26;;30335:9;30329:4;30325:20;30321:1;30310:9;30306:17;30299:47;30363:131;30489:4;30363:131;:::i;:::-;30355:139;;30082:419;;;:::o;30507:::-;30673:4;30711:2;30700:9;30696:18;30688:26;;30760:9;30754:4;30750:20;30746:1;30735:9;30731:17;30724:47;30788:131;30914:4;30788:131;:::i;:::-;30780:139;;30507:419;;;:::o;30932:::-;31098:4;31136:2;31125:9;31121:18;31113:26;;31185:9;31179:4;31175:20;31171:1;31160:9;31156:17;31149:47;31213:131;31339:4;31213:131;:::i;:::-;31205:139;;30932:419;;;:::o;31357:::-;31523:4;31561:2;31550:9;31546:18;31538:26;;31610:9;31604:4;31600:20;31596:1;31585:9;31581:17;31574:47;31638:131;31764:4;31638:131;:::i;:::-;31630:139;;31357:419;;;:::o;31782:::-;31948:4;31986:2;31975:9;31971:18;31963:26;;32035:9;32029:4;32025:20;32021:1;32010:9;32006:17;31999:47;32063:131;32189:4;32063:131;:::i;:::-;32055:139;;31782:419;;;:::o;32207:::-;32373:4;32411:2;32400:9;32396:18;32388:26;;32460:9;32454:4;32450:20;32446:1;32435:9;32431:17;32424:47;32488:131;32614:4;32488:131;:::i;:::-;32480:139;;32207:419;;;:::o;32632:::-;32798:4;32836:2;32825:9;32821:18;32813:26;;32885:9;32879:4;32875:20;32871:1;32860:9;32856:17;32849:47;32913:131;33039:4;32913:131;:::i;:::-;32905:139;;32632:419;;;:::o;33057:::-;33223:4;33261:2;33250:9;33246:18;33238:26;;33310:9;33304:4;33300:20;33296:1;33285:9;33281:17;33274:47;33338:131;33464:4;33338:131;:::i;:::-;33330:139;;33057:419;;;:::o;33482:::-;33648:4;33686:2;33675:9;33671:18;33663:26;;33735:9;33729:4;33725:20;33721:1;33710:9;33706:17;33699:47;33763:131;33889:4;33763:131;:::i;:::-;33755:139;;33482:419;;;:::o;33907:::-;34073:4;34111:2;34100:9;34096:18;34088:26;;34160:9;34154:4;34150:20;34146:1;34135:9;34131:17;34124:47;34188:131;34314:4;34188:131;:::i;:::-;34180:139;;33907:419;;;:::o;34332:::-;34498:4;34536:2;34525:9;34521:18;34513:26;;34585:9;34579:4;34575:20;34571:1;34560:9;34556:17;34549:47;34613:131;34739:4;34613:131;:::i;:::-;34605:139;;34332:419;;;:::o;34757:::-;34923:4;34961:2;34950:9;34946:18;34938:26;;35010:9;35004:4;35000:20;34996:1;34985:9;34981:17;34974:47;35038:131;35164:4;35038:131;:::i;:::-;35030:139;;34757:419;;;:::o;35182:353::-;35315:4;35353:2;35342:9;35338:18;35330:26;;35402:9;35396:4;35392:20;35388:1;35377:9;35373:17;35366:47;35430:98;35523:4;35514:6;35430:98;:::i;:::-;35422:106;;35182:353;;;;:::o;35541:222::-;35634:4;35672:2;35661:9;35657:18;35649:26;;35685:71;35753:1;35742:9;35738:17;35729:6;35685:71;:::i;:::-;35541:222;;;;:::o;35769:423::-;35910:4;35948:2;35937:9;35933:18;35925:26;;35961:71;36029:1;36018:9;36014:17;36005:6;35961:71;:::i;:::-;36079:9;36073:4;36069:20;36064:2;36053:9;36049:18;36042:48;36107:78;36180:4;36171:6;36107:78;:::i;:::-;36099:86;;35769:423;;;;;:::o;36198:129::-;36232:6;36259:20;;:::i;:::-;36249:30;;36288:33;36316:4;36308:6;36288:33;:::i;:::-;36198:129;;;:::o;36333:75::-;36366:6;36399:2;36393:9;36383:19;;36333:75;:::o;36414:311::-;36491:4;36581:18;36573:6;36570:30;36567:56;;;36603:18;;:::i;:::-;36567:56;36653:4;36645:6;36641:17;36633:25;;36713:4;36707;36703:15;36695:23;;36414:311;;;:::o;36731:307::-;36792:4;36882:18;36874:6;36871:30;36868:56;;;36904:18;;:::i;:::-;36868:56;36942:29;36964:6;36942:29;:::i;:::-;36934:37;;37026:4;37020;37016:15;37008:23;;36731:307;;;:::o;37044:308::-;37106:4;37196:18;37188:6;37185:30;37182:56;;;37218:18;;:::i;:::-;37182:56;37256:29;37278:6;37256:29;:::i;:::-;37248:37;;37340:4;37334;37330:15;37322:23;;37044:308;;;:::o;37358:132::-;37425:4;37448:3;37440:11;;37478:4;37473:3;37469:14;37461:22;;37358:132;;;:::o;37496:152::-;37583:4;37606:3;37598:11;;37636:4;37631:3;37627:14;37619:22;;37496:152;;;:::o;37654:114::-;37721:6;37755:5;37749:12;37739:22;;37654:114;;;:::o;37774:134::-;37861:6;37895:5;37889:12;37879:22;;37774:134;;;:::o;37914:98::-;37965:6;37999:5;37993:12;37983:22;;37914:98;;;:::o;38018:99::-;38070:6;38104:5;38098:12;38088:22;;38018:99;;;:::o;38123:113::-;38193:4;38225;38220:3;38216:14;38208:22;;38123:113;;;:::o;38242:133::-;38332:4;38364;38359:3;38355:14;38347:22;;38242:133;;;:::o;38381:184::-;38480:11;38514:6;38509:3;38502:19;38554:4;38549:3;38545:14;38530:29;;38381:184;;;;:::o;38571:204::-;38690:11;38724:6;38719:3;38712:19;38764:4;38759:3;38755:14;38740:29;;38571:204;;;;:::o;38781:168::-;38864:11;38898:6;38893:3;38886:19;38938:4;38933:3;38929:14;38914:29;;38781:168;;;;:::o;38955:159::-;39029:11;39063:6;39058:3;39051:19;39103:4;39098:3;39094:14;39079:29;;38955:159;;;;:::o;39120:169::-;39204:11;39238:6;39233:3;39226:19;39278:4;39273:3;39269:14;39254:29;;39120:169;;;;:::o;39295:148::-;39397:11;39434:3;39419:18;;39295:148;;;;:::o;39449:305::-;39489:3;39508:20;39526:1;39508:20;:::i;:::-;39503:25;;39542:20;39560:1;39542:20;:::i;:::-;39537:25;;39696:1;39628:66;39624:74;39621:1;39618:81;39615:107;;;39702:18;;:::i;:::-;39615:107;39746:1;39743;39739:9;39732:16;;39449:305;;;;:::o;39760:348::-;39800:7;39823:20;39841:1;39823:20;:::i;:::-;39818:25;;39857:20;39875:1;39857:20;:::i;:::-;39852:25;;40045:1;39977:66;39973:74;39970:1;39967:81;39962:1;39955:9;39948:17;39944:105;39941:131;;;40052:18;;:::i;:::-;39941:131;40100:1;40097;40093:9;40082:20;;39760:348;;;;:::o;40114:191::-;40154:4;40174:20;40192:1;40174:20;:::i;:::-;40169:25;;40208:20;40226:1;40208:20;:::i;:::-;40203:25;;40247:1;40244;40241:8;40238:34;;;40252:18;;:::i;:::-;40238:34;40297:1;40294;40290:9;40282:17;;40114:191;;;;:::o;40311:96::-;40348:7;40377:24;40395:5;40377:24;:::i;:::-;40366:35;;40311:96;;;:::o;40413:90::-;40447:7;40490:5;40483:13;40476:21;40465:32;;40413:90;;;:::o;40509:149::-;40545:7;40585:66;40578:5;40574:78;40563:89;;40509:149;;;:::o;40664:133::-;40712:7;40741:5;40730:16;;40747:44;40785:5;40747:44;:::i;:::-;40664:133;;;:::o;40803:126::-;40840:7;40880:42;40873:5;40869:54;40858:65;;40803:126;;;:::o;40935:77::-;40972:7;41001:5;40990:16;;40935:77;;;:::o;41018:93::-;41054:7;41094:10;41087:5;41083:22;41072:33;;41018:93;;;:::o;41117:133::-;41176:9;41209:35;41238:5;41209:35;:::i;:::-;41196:48;;41117:133;;;:::o;41256:154::-;41340:6;41335:3;41330;41317:30;41402:1;41393:6;41388:3;41384:16;41377:27;41256:154;;;:::o;41416:307::-;41484:1;41494:113;41508:6;41505:1;41502:13;41494:113;;;41593:1;41588:3;41584:11;41578:18;41574:1;41569:3;41565:11;41558:39;41530:2;41527:1;41523:10;41518:15;;41494:113;;;41625:6;41622:1;41619:13;41616:101;;;41705:1;41696:6;41691:3;41687:16;41680:27;41616:101;41465:258;41416:307;;;:::o;41729:320::-;41773:6;41810:1;41804:4;41800:12;41790:22;;41857:1;41851:4;41847:12;41878:18;41868:81;;41934:4;41926:6;41922:17;41912:27;;41868:81;41996:2;41988:6;41985:14;41965:18;41962:38;41959:84;;;42015:18;;:::i;:::-;41959:84;41780:269;41729:320;;;:::o;42055:281::-;42138:27;42160:4;42138:27;:::i;:::-;42130:6;42126:40;42268:6;42256:10;42253:22;42232:18;42220:10;42217:34;42214:62;42211:88;;;42279:18;;:::i;:::-;42211:88;42319:10;42315:2;42308:22;42098:238;42055:281;;:::o;42342:233::-;42381:3;42404:24;42422:5;42404:24;:::i;:::-;42395:33;;42450:66;42443:5;42440:77;42437:103;;;42520:18;;:::i;:::-;42437:103;42567:1;42560:5;42556:13;42549:20;;42342:233;;;:::o;42581:180::-;42629:77;42626:1;42619:88;42726:4;42723:1;42716:15;42750:4;42747:1;42740:15;42767:180;42815:77;42812:1;42805:88;42912:4;42909:1;42902:15;42936:4;42933:1;42926:15;42953:180;43001:77;42998:1;42991:88;43098:4;43095:1;43088:15;43122:4;43119:1;43112:15;43139:180;43187:77;43184:1;43177:88;43284:4;43281:1;43274:15;43308:4;43305:1;43298:15;43325:180;43373:77;43370:1;43363:88;43470:4;43467:1;43460:15;43494:4;43491:1;43484:15;43511:180;43559:77;43556:1;43549:88;43656:4;43653:1;43646:15;43680:4;43677:1;43670:15;43697:180;43745:77;43742:1;43735:88;43842:4;43839:1;43832:15;43866:4;43863:1;43856:15;43883:117;43992:1;43989;43982:12;44006:117;44115:1;44112;44105:12;44129:117;44238:1;44235;44228:12;44252:117;44361:1;44358;44351:12;44375:117;44484:1;44481;44474:12;44498:102;44539:6;44590:2;44586:7;44581:2;44574:5;44570:14;44566:28;44556:38;;44498:102;;;:::o;44606:232::-;44746:34;44742:1;44734:6;44730:14;44723:58;44815:15;44810:2;44802:6;44798:15;44791:40;44606:232;:::o;44844:230::-;44984:34;44980:1;44972:6;44968:14;44961:58;45053:13;45048:2;45040:6;45036:15;45029:38;44844:230;:::o;45080:237::-;45220:34;45216:1;45208:6;45204:14;45197:58;45289:20;45284:2;45276:6;45272:15;45265:45;45080:237;:::o;45323:224::-;45463:34;45459:1;45451:6;45447:14;45440:58;45532:7;45527:2;45519:6;45515:15;45508:32;45323:224;:::o;45553:178::-;45693:30;45689:1;45681:6;45677:14;45670:54;45553:178;:::o;45737:223::-;45877:34;45873:1;45865:6;45861:14;45854:58;45946:6;45941:2;45933:6;45929:15;45922:31;45737:223;:::o;45966:175::-;46106:27;46102:1;46094:6;46090:14;46083:51;45966:175;:::o;46147:228::-;46287:34;46283:1;46275:6;46271:14;46264:58;46356:11;46351:2;46343:6;46339:15;46332:36;46147:228;:::o;46381:182::-;46521:34;46517:1;46509:6;46505:14;46498:58;46381:182;:::o;46569:174::-;46709:26;46705:1;46697:6;46693:14;46686:50;46569:174;:::o;46749:220::-;46889:34;46885:1;46877:6;46873:14;46866:58;46958:3;46953:2;46945:6;46941:15;46934:28;46749:220;:::o;46975:248::-;47115:34;47111:1;47103:6;47099:14;47092:58;47184:31;47179:2;47171:6;47167:15;47160:56;46975:248;:::o;47229:231::-;47369:34;47365:1;47357:6;47353:14;47346:58;47438:14;47433:2;47425:6;47421:15;47414:39;47229:231;:::o;47466:230::-;47606:34;47602:1;47594:6;47590:14;47583:58;47675:13;47670:2;47662:6;47658:15;47651:38;47466:230;:::o;47702:240::-;47842:34;47838:1;47830:6;47826:14;47819:58;47911:23;47906:2;47898:6;47894:15;47887:48;47702:240;:::o;47948:116::-;48032:1;48025:5;48022:12;48012:46;;48038:18;;:::i;:::-;48012:46;47948:116;:::o;48070:122::-;48143:24;48161:5;48143:24;:::i;:::-;48136:5;48133:35;48123:63;;48182:1;48179;48172:12;48123:63;48070:122;:::o;48198:116::-;48268:21;48283:5;48268:21;:::i;:::-;48261:5;48258:32;48248:60;;48304:1;48301;48294:12;48248:60;48198:116;:::o;48320:120::-;48392:23;48409:5;48392:23;:::i;:::-;48385:5;48382:34;48372:62;;48430:1;48427;48420:12;48372:62;48320:120;:::o;48446:122::-;48519:24;48537:5;48519:24;:::i;:::-;48512:5;48509:35;48499:63;;48558:1;48555;48548:12;48499:63;48446:122;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"4417400","executionCost":"5129","totalCost":"4422529"},"external":{"__BusinessCardBase__init(uint256,uint256,uint256)":"infinite","_mint(string,string,string,address,uint256)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"2969","getApproved(uint256)":"5323","getCard(uint256)":"infinite","getCardByOwner(address,uint256)":"infinite","getCardCount()":"2490","getCardCountByOwner(address)":"3011","getCards()":"infinite","getCompanyName(address)":"infinite","getFirstMintPrice()":"2483","getMintPrice()":"2548","isApprovedForAll(address,address)":"infinite","mint()":"infinite","name()":"infinite","ownerOf(uint256)":"3070","partyMint(uint256,address[])":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","stake(string)":"infinite","supportsInterface(bytes4)":"909","symbol()":"infinite","tokenByIndex(uint256)":"infinite","tokenOfOwnerByIndex(address,uint256)":"infinite","tokenURI(uint256)":"3489","totalSupply()":"2557","transferFrom(address,address,uint256)":"infinite"},"internal":{"_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"__BusinessCardBase__init(uint256,uint256,uint256)":"47c36b8c","_mint(string,string,string,address,uint256)":"a2235934","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","getCard(uint256)":"9188d312","getCardByOwner(address,uint256)":"185590e2","getCardCount()":"7d620130","getCardCountByOwner(address)":"95acf987","getCards()":"b0df9e53","getCompanyName(address)":"a4ef7031","getFirstMintPrice()":"61a53251","getMintPrice()":"a7f93ebd","isApprovedForAll(address,address)":"e985e9c5","mint()":"1249c58b","name()":"06fdde03","ownerOf(uint256)":"6352211e","partyMint(uint256,address[])":"154308f0","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","stake(string)":"46f45b8d","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BusinessCardBase__ExceededPeople\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BusinessCardBase__InvalidArrayCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BusinessCardBase__InvalidETHAmountSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BusinessCardBase__InvalidString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BusinessCardBase__NotMintable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BusinessCardBase__NotStaked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"company\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDesired\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CardCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CardTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"employeeAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"employeeCount\",\"type\":\"uint32\"}],\"name\":\"PartyMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"companyName\",\"type\":\"string\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstMintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakePrice\",\"type\":\"uint256\"}],\"name\":\"__BusinessCardBase__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_phone\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_company\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueDesired\",\"type\":\"uint256\"}],\"name\":\"_mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCard\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"company\",\"type\":\"string\"},{\"internalType\":\"enum BusinessCardBase.CardType\",\"name\":\"cardType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"valueDesired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct BusinessCardBase.Card\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCardByOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"company\",\"type\":\"string\"},{\"internalType\":\"enum BusinessCardBase.CardType\",\"name\":\"cardType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"valueDesired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct BusinessCardBase.Card\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getCardCountByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCards\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"company\",\"type\":\"string\"},{\"internalType\":\"enum BusinessCardBase.CardType\",\"name\":\"cardType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"valueDesired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct BusinessCardBase.Card[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"}],\"name\":\"getCompanyName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFirstMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_employeeCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"employeeAddresses\",\"type\":\"address[]\"}],\"name\":\"partyMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_company\",\"type\":\"string\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BusinessCardBase.sol\":\"BusinessCardBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BusinessCardBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"./access/Ownable.sol\\\";\\n\\n// Errors\\nerror BusinessCardBase__NotFirstMint();\\nerror BusinessCardBase__InvalidString();\\nerror BusinessCardBase__InvalidETHAmountSent();\\nerror BusinessCardBase__NotMintable();\\nerror BusinessCardBase__NotStaked();\\nerror BusinessCardBase__ExceededPeople();\\nerror BusinessCardBase__InvalidArrayCount();\\n\\ncontract BusinessCardBase is ERC721EnumerableUpgradeable {\\n    enum CardType {\\n        Personal,\\n        Business\\n    }\\n    // State Variables\\n    Card[] private cards;\\n    uint32 internal constant MAX_CARDS = 1000;\\n    uint32 internal constant MAX_FIRST_MINT = 10;\\n    uint32 constant MAX_EMPLOYEES = 10;\\n    uint32 constant MAX_DECIMALS = 10 ^ 18;\\n    uint256 internal stakePrice;\\n    uint256 internal firstMintPrice;\\n    uint256 internal mintPrice;\\n    uint256 constant STAKE_TIME = 180 days;\\n\\n    // Mappings\\n    mapping(address => bool) internal firstMinted;\\n    mapping(address => mapping(address => uint256)) internal addressToDivisionToMintable;\\n    mapping(address => uint256) internal stakedTime;\\n    mapping(address => bool) internal successfullyStaked;\\n    mapping(address => string) internal addressToCompanyName;\\n\\n    struct Card {\\n        string name;\\n        string email;\\n        string phone;\\n        string company;\\n        CardType cardType;\\n        uint256 valueDesired;\\n        address owner;\\n    }\\n\\n    // Events\\n    event CardCreated(\\n        uint256 indexed id,\\n        string name,\\n        string email,\\n        string phone,\\n        string company,\\n        uint256 valueDesired,\\n        address owner\\n    );\\n    event CardTransfer(uint256 indexed id, address indexed from, address indexed to);\\n    event Stake(address indexed staker, uint256 amount, string companyName);\\n    event PartyMint(address indexed company, address[] employeeAddresses, uint32 employeeCount);\\n\\n    // Functions\\n    modifier isMintable() {\\n        if (addressToDivisionToMintable[msg.sender][msg.sender] <= 0) {\\n            revert BusinessCardBase__NotMintable();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyStaked() {\\n        if (successfullyStaked[msg.sender] == false) {\\n            revert BusinessCardBase__NotStaked();\\n        }\\n\\n        _;\\n    }\\n\\n    function __BusinessCardBase__init(uint256 _firstMintPrice, uint256 _mintPrice, uint256 _stakePrice) external {\\n        __ERC721_init(\\\"BusinessCardBase\\\", \\\"BC\\\");\\n        firstMintPrice = _firstMintPrice;\\n        mintPrice = _mintPrice;\\n        stakePrice = _stakePrice;\\n    }\\n\\n    function mint() public payable returns (bool success) {\\n        if (firstMinted[msg.sender]) {\\n            if (msg.value != mintPrice) {\\n                revert BusinessCardBase__InvalidETHAmountSent();\\n            }\\n            addressToDivisionToMintable[msg.sender][msg.sender] += 1;\\n        } else {\\n            if (msg.value != firstMintPrice) {\\n                revert BusinessCardBase__InvalidETHAmountSent();\\n            }\\n            firstMinted[msg.sender] = true;\\n            addressToDivisionToMintable[msg.sender][msg.sender] = MAX_FIRST_MINT;\\n        }\\n\\n        return true;\\n    }\\n\\n    function _mint(\\n        string memory _name,\\n        string memory _email,\\n        string memory _phone,\\n        address _company,\\n        uint256 valueDesired\\n    ) public virtual isMintable {\\n        if (\\n            bytes(_name).length * bytes(_email).length * bytes(_phone).length * valueDesired == 0 || _company == address(0)\\n        ) {\\n            revert BusinessCardBase__InvalidString();\\n        }\\n        if (addressToDivisionToMintable[msg.sender][_company] <= 0) {\\n            revert BusinessCardBase__NotMintable();\\n        }\\n\\n        CardType cardType;\\n        string memory company = addressToCompanyName[_company];\\n        if (bytes(company).length == 0 || (msg.sender == _company)) {\\n            cardType = CardType.Personal;\\n        } else {\\n            cardType = CardType.Business;\\n        }\\n\\n        Card memory card = Card({\\n            name: _name,\\n            email: _email,\\n            phone: _phone,\\n            company: bytes(company).length == 0 ? \\\"N/A\\\" : company,\\n            cardType: cardType,\\n            valueDesired: valueDesired,\\n            owner: msg.sender\\n        });\\n\\n        cards.push(card);\\n        uint256 _id = cards.length - 1;\\n        addressToDivisionToMintable[msg.sender][msg.sender] -= 1;\\n        _safeMint(msg.sender, _id);\\n        if (cardType == CardType.Business) approve(_company, _id);\\n        emit CardCreated(_id, _name, _email, _phone, company, valueDesired, msg.sender);\\n    }\\n\\n    function stake(string memory _company) public payable returns (bool success) {\\n        if (msg.value != stakePrice) {\\n            revert BusinessCardBase__NotStaked();\\n        }\\n\\n        successfullyStaked[msg.sender] = true;\\n        addressToCompanyName[msg.sender] = _company;\\n\\n        emit Stake(msg.sender, msg.value, _company);\\n\\n        return true;\\n    }\\n\\n    function partyMint(\\n        uint256 _employeeCount,\\n        address[] memory employeeAddresses\\n    ) external payable onlyStaked returns (bool success) {\\n        if (_employeeCount > MAX_EMPLOYEES) {\\n            revert BusinessCardBase__ExceededPeople();\\n        }\\n        if (msg.value != mintPrice * _employeeCount) {\\n            revert BusinessCardBase__InvalidETHAmountSent();\\n        }\\n        if (_employeeCount != employeeAddresses.length) {\\n            revert BusinessCardBase__InvalidArrayCount();\\n        }\\n\\n        address companyAddress = msg.sender;\\n        for (uint256 i = 0; i < _employeeCount; i++) {\\n            addressToDivisionToMintable[employeeAddresses[i]][companyAddress] += 1;\\n        }\\n\\n        emit PartyMint(msg.sender, employeeAddresses, uint32(_employeeCount));\\n\\n        return true;\\n    }\\n\\n    function _transfer(address _from, address _to, uint256 _tokenId) internal virtual override {\\n        super._transfer(_from, _to, _tokenId);\\n        emit CardTransfer(_tokenId, _from, _to);\\n    }\\n\\n    function getFirstMintPrice() external view returns (uint256) {\\n        return firstMintPrice;\\n    }\\n\\n    function getMintPrice() external view returns (uint256) {\\n        return mintPrice;\\n    }\\n\\n    function getCards() external view returns (Card[] memory) {\\n        return cards;\\n    }\\n\\n    function getCard(uint256 _id) external view returns (Card memory) {\\n        return cards[_id];\\n    }\\n\\n    function getCardCount() external view returns (uint256) {\\n        return cards.length;\\n    }\\n\\n    function getCardCountByOwner(address _owner) external view returns (uint256) {\\n        return balanceOf(_owner);\\n    }\\n\\n    function getCardByOwner(address _owner, uint256 _index) external view returns (Card memory) {\\n        return cards[tokenOfOwnerByIndex(_owner, _index)];\\n    }\\n\\n    function getCompanyName(address companyAddress) external view returns (string memory) {\\n        return addressToCompanyName[companyAddress];\\n    }\\n}\\n\",\"keccak256\":\"0xb2faf802119c8008e4220746e4fb9cc8a9d29c54e9a921536c52cf25765bec96\",\"license\":\"MIT\"},\"contracts/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"./proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {}\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {}\\n\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x60daab8ac6fafab6fc0acb4dceac9af25c87e149839319a3760f1ebc9472c6fb\",\"license\":\"MIT\"},\"contracts/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"./utils/AddressUpgradeable.sol\\\";\\nimport \\\"./utils/ContextUpgradeable.sol\\\";\\nimport \\\"./utils/StringsUpgradeable.sol\\\";\\nimport \\\"./utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"./proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC721Upgradeable,\\n    IERC721MetadataUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 /* firstTokenId */, uint256 batchSize) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xf2bf05a6cccace5e6db8073df92e341623302a582a7e31f524f4fe9888627388\",\"license\":\"MIT\"},\"contracts/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x37f8b3bc6b4c6dbae5b16746296071ba43cd4cb4b0c41957298ca42395aa4c87\",\"license\":\"MIT\"},\"contracts/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"contracts/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x22833f657ec750aa0058f0127af6b319f0ede114337fa9e32f416ba042bed861\",\"license\":\"MIT\"},\"contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6ffea652401e324aaed987e7bd28f560078de8a6647deb1bb6a5359f000dff37\",\"license\":\"MIT\"},\"contracts/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x055fe4c1e942d42899298a11a5501ed8757b5247d914f500d902fd308f4a169f\",\"license\":\"MIT\"},\"contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf75ca4468e9d5395f6810130e622b0c130e44b72ab4de678f34cf93423d980ab\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {}\\n\\n    function __Context_init_unchained() internal onlyInitializing {}\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8d195f4fb42b15464ab01ae3fb99b6f5c88526ae9b4187f0774741ad0dc6d3d2\",\"license\":\"MIT\"},\"contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xef702737c98b0296899e4439c17c4a1c96b8dcef7e176805275e782612fce9c7\",\"license\":\"MIT\"},\"contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {}\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xaae49561857f45b234927e952b0be026fa85f05b7fa073212e20b4130d73b917\",\"license\":\"MIT\"},\"contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05d5d914a129f8a74b1cae41b212965882aed82683efc0888665c4b26cd60e54\",\"license\":\"MIT\"},\"contracts/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2817,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":2820,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3326,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3599,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":1448,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"_name","offset":0,"slot":"101","type":"t_string_storage"},{"astId":1450,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"_symbol","offset":0,"slot":"102","type":"t_string_storage"},{"astId":1454,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"_owners","offset":0,"slot":"103","type":"t_mapping(t_uint256,t_address)"},{"astId":1458,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"_balances","offset":0,"slot":"104","type":"t_mapping(t_address,t_uint256)"},{"astId":1462,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"_tokenApprovals","offset":0,"slot":"105","type":"t_mapping(t_uint256,t_address)"},{"astId":1468,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"_operatorApprovals","offset":0,"slot":"106","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2388,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"__gap","offset":0,"slot":"107","type":"t_array(t_uint256)44_storage"},{"astId":1075,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"_ownedTokens","offset":0,"slot":"151","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":1079,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"_ownedTokensIndex","offset":0,"slot":"152","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1082,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"_allTokens","offset":0,"slot":"153","type":"t_array(t_uint256)dyn_storage"},{"astId":1086,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"_allTokensIndex","offset":0,"slot":"154","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1418,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"__gap","offset":0,"slot":"155","type":"t_array(t_uint256)46_storage"},{"astId":26,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"cards","offset":0,"slot":"201","type":"t_array(t_struct(Card)87_storage)dyn_storage"},{"astId":42,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"stakePrice","offset":0,"slot":"202","type":"t_uint256"},{"astId":44,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"firstMintPrice","offset":0,"slot":"203","type":"t_uint256"},{"astId":46,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"mintPrice","offset":0,"slot":"204","type":"t_uint256"},{"astId":53,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"firstMinted","offset":0,"slot":"205","type":"t_mapping(t_address,t_bool)"},{"astId":59,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"addressToDivisionToMintable","offset":0,"slot":"206","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":63,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"stakedTime","offset":0,"slot":"207","type":"t_mapping(t_address,t_uint256)"},{"astId":67,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"successfullyStaked","offset":0,"slot":"208","type":"t_mapping(t_address,t_bool)"},{"astId":71,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"addressToCompanyName","offset":0,"slot":"209","type":"t_mapping(t_address,t_string_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Card)87_storage)dyn_storage":{"base":"t_struct(Card)87_storage","encoding":"dynamic_array","label":"struct BusinessCardBase.Card[]","numberOfBytes":"32"},"t_array(t_uint256)44_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[44]","numberOfBytes":"1408"},"t_array(t_uint256)46_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[46]","numberOfBytes":"1472"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_enum(CardType)22":{"encoding":"inplace","label":"enum BusinessCardBase.CardType","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_string_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Card)87_storage":{"encoding":"inplace","label":"struct BusinessCardBase.Card","members":[{"astId":73,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":75,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"email","offset":0,"slot":"1","type":"t_string_storage"},{"astId":77,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"phone","offset":0,"slot":"2","type":"t_string_storage"},{"astId":79,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"company","offset":0,"slot":"3","type":"t_string_storage"},{"astId":82,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"cardType","offset":0,"slot":"4","type":"t_enum(CardType)22"},{"astId":84,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"valueDesired","offset":0,"slot":"5","type":"t_uint256"},{"astId":86,"contract":"contracts/BusinessCardBase.sol:BusinessCardBase","label":"owner","offset":0,"slot":"6","type":"t_address"}],"numberOfBytes":"224"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BusinessCardMarketplace.sol":{"BusinessCardMarketplace":{"abi":[{"inputs":[],"name":"BusinessCardMarketplace__AlreadyListed","type":"error"},{"inputs":[],"name":"BusinessCardMarketplace__ApproveNotCleared","type":"error"},{"inputs":[],"name":"BusinessCardMarketplace__InvalidPrice","type":"error"},{"inputs":[],"name":"BusinessCardMarketplace__NotApproved","type":"error"},{"inputs":[],"name":"BusinessCardMarketplace__NotListed","type":"error"},{"inputs":[],"name":"BusinessCardMarketplace__OnlyOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"cardId","type":"uint256"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"},{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"ListingBought","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"cardId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":true,"internalType":"address","name":"seller","type":"address"}],"name":"ListingListed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"cardId","type":"uint256"},{"indexed":true,"internalType":"address","name":"seller","type":"address"}],"name":"ListingRemoved","type":"event"},{"inputs":[{"internalType":"address","name":"_nftAddress","type":"address"},{"internalType":"uint256","name":"_cardId","type":"uint256"}],"name":"buyCard","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_nftAddress","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_cardId","type":"uint256"}],"name":"createListing","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_nftAddress","type":"address"},{"internalType":"uint256","name":"_cardId","type":"uint256"}],"name":"removeListing","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_nftAddress","type":"address"},{"internalType":"uint256","name":"_cardId","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"updateListing","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50611373806100206000396000f3fe60806040526004361061003f5760003560e01c806324780c561461004457806359edbe711461006d5780637dd9f84614610096578063f772adf1146100b2575b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906111e2565b6100db565b005b34801561007957600080fd5b50610094600480360381019061008f91906111a2565b6105d4565b005b6100b060048036038101906100ab91906111a2565b610a2c565b005b3480156100be57600080fd5b506100d960048036038101906100d491906111e2565b610e26565b005b82813373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161012d91906112b3565b60206040518083038186803b15801561014557600080fd5b505afa158015610159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017d9190611175565b73ffffffffffffffffffffffffffffffffffffffff16146101ca576040517f59bd4d1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8483600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415806102cd575060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015414155b15610304576040517f5197cefd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000861161033e576040517f54b036a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330876040518363ffffffff1660e01b815260040161037992919061128a565b600060405180830381600087803b15801561039357600080fd5b505af11580156103a7573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1663081812fc876040518263ffffffff1660e01b81526004016103fb91906112b3565b60206040518083038186803b15801561041357600080fd5b505afa158015610427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044b9190611175565b73ffffffffffffffffffffffffffffffffffffffff1614610498576040517fe45ac74b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180606001604052808781526020018881526020013373ffffffffffffffffffffffffffffffffffffffff168152509050806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff16867f5c10eb54e7b66711529cfcc35f98f53c3aeaa6dc143c27e0381d0fd913213229896040516105c291906112b3565b60405180910390a35050505050505050565b81813373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161062691906112b3565b60206040518083038186803b15801561063e57600080fd5b505afa158015610652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106769190611175565b73ffffffffffffffffffffffffffffffffffffffff16146106c3576040517f59bd4d1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8383600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806107c4575060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010154145b156107fb576040517fffeb22e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663095ea7b36000876040518363ffffffff1660e01b815260040161083792919061128a565b600060405180830381600087803b15801561085157600080fd5b505af1158015610865573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1663081812fc876040518263ffffffff1660e01b81526004016108ba91906112b3565b60206040518083038186803b1580156108d257600080fd5b505afa1580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a9190611175565b73ffffffffffffffffffffffffffffffffffffffff1614610957576040517ff198223e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550503373ffffffffffffffffffffffffffffffffffffffff16857f58b0852506006c4be6c7ae72afcd195d9e64d7f5d8947905e914b778e47b7cf360405160405180910390a3505050505050565b8181600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610b2d575060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010154145b15610b64576040517fffeb22e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060200151341015610c6a576040517f54b036a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806040015173ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610cb4573d6000803e3d6000fd5b508473ffffffffffffffffffffffffffffffffffffffff166342842e0e826040015133876040518463ffffffff1660e01b8152600401610cf693929190611253565b600060405180830381600087803b158015610d1057600080fd5b505af1158015610d24573d6000803e3d6000fd5b505050506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050806040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16857facc22b2c51e2c9b31c108c993cebdcd72470cf6f43ed3f5590daf770462332558460200151604051610e1791906112b3565b60405180910390a45050505050565b82823373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401610e7891906112b3565b60206040518083038186803b158015610e9057600080fd5b505afa158015610ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec89190611175565b73ffffffffffffffffffffffffffffffffffffffff1614610f15576040517f59bd4d1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8484600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611016575060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010154145b1561104d576040517fffeb22e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008511611087576040517f54b036a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888152602001908152602001600020600101819055503373ffffffffffffffffffffffffffffffffffffffff16867f5c10eb54e7b66711529cfcc35f98f53c3aeaa6dc143c27e0381d0fd9132132298760405161112591906112b3565b60405180910390a350505050505050565b6000813590506111458161130f565b92915050565b60008151905061115a8161130f565b92915050565b60008135905061116f81611326565b92915050565b60006020828403121561118b5761118a61130a565b5b60006111998482850161114b565b91505092915050565b600080604083850312156111b9576111b861130a565b5b60006111c785828601611136565b92505060206111d885828601611160565b9150509250929050565b6000806000606084860312156111fb576111fa61130a565b5b600061120986828701611136565b935050602061121a86828701611160565b925050604061122b86828701611160565b9150509250925092565b61123e816112ce565b82525050565b61124d81611300565b82525050565b60006060820190506112686000830186611235565b6112756020830185611235565b6112826040830184611244565b949350505050565b600060408201905061129f6000830185611235565b6112ac6020830184611244565b9392505050565b60006020820190506112c86000830184611244565b92915050565b60006112d9826112e0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b611318816112ce565b811461132357600080fd5b50565b61132f81611300565b811461133a57600080fd5b5056fea26469706673582212209ce8a6e19a928a957ac3634dacda77c05bc56a10a9907595b59942eba31e198364736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1373 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x24780C56 EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x59EDBE71 EQ PUSH2 0x6D JUMPI DUP1 PUSH4 0x7DD9F846 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0xF772ADF1 EQ PUSH2 0xB2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x11E2 JUMP JUMPDEST PUSH2 0xDB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x94 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x8F SWAP2 SWAP1 PUSH2 0x11A2 JUMP JUMPDEST PUSH2 0x5D4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAB SWAP2 SWAP1 PUSH2 0x11A2 JUMP JUMPDEST PUSH2 0xA2C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD4 SWAP2 SWAP1 PUSH2 0x11E2 JUMP JUMPDEST PUSH2 0xE26 JUMP JUMPDEST STOP JUMPDEST DUP3 DUP2 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12D SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x159 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1CA JUMPI PUSH1 0x40 MLOAD PUSH32 0x59BD4D1B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 PUSH2 0x2CD JUMPI POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 0x304 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5197CEFD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 GT PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH32 0x54B036A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 ADDRESS DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x379 SWAP3 SWAP2 SWAP1 PUSH2 0x128A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x81812FC DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FB SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x427 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x44B SWAP2 SWAP1 PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x498 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE45AC74B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP DUP1 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH32 0x5C10EB54E7B66711529CFCC35F98F53C3AEAA6DC143C27E0381D0FD913213229 DUP10 PUSH1 0x40 MLOAD PUSH2 0x5C2 SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x626 SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x63E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x652 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x676 SWAP2 SWAP1 PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x59BD4D1B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x7C4 JUMPI POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0x7FB JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFEB22E200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 PUSH1 0x0 DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x837 SWAP3 SWAP2 SWAP1 PUSH2 0x128A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x851 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x865 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x81812FC DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8BA SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x90A SWAP2 SWAP1 PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x957 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF198223E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH32 0x58B0852506006C4BE6C7AE72AFCD195D9E64D7F5D8947905E914B778E47B7CF3 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB2D JUMPI POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0xB64 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFEB22E200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD CALLVALUE LT ISZERO PUSH2 0xC6A JUMPI PUSH1 0x40 MLOAD PUSH32 0x54B036A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC CALLVALUE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xCB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E DUP3 PUSH1 0x40 ADD MLOAD CALLER DUP8 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCF6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD24 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH32 0xACC22B2C51E2C9B31C108C993CEBDCD72470CF6F43ED3F5590DAF77046233255 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xE17 SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP3 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE78 SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEA4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEC8 SWAP2 SWAP1 PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xF15 JUMPI PUSH1 0x40 MLOAD PUSH32 0x59BD4D1B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP5 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1016 JUMPI POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0x104D JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFEB22E200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP6 GT PUSH2 0x1087 JUMPI PUSH1 0x40 MLOAD PUSH32 0x54B036A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x0 DUP1 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH32 0x5C10EB54E7B66711529CFCC35F98F53C3AEAA6DC143C27E0381D0FD913213229 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1125 SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1145 DUP2 PUSH2 0x130F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x115A DUP2 PUSH2 0x130F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x116F DUP2 PUSH2 0x1326 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x118B JUMPI PUSH2 0x118A PUSH2 0x130A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1199 DUP5 DUP3 DUP6 ADD PUSH2 0x114B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11B9 JUMPI PUSH2 0x11B8 PUSH2 0x130A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x11C7 DUP6 DUP3 DUP7 ADD PUSH2 0x1136 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x11D8 DUP6 DUP3 DUP7 ADD PUSH2 0x1160 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11FB JUMPI PUSH2 0x11FA PUSH2 0x130A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1209 DUP7 DUP3 DUP8 ADD PUSH2 0x1136 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x121A DUP7 DUP3 DUP8 ADD PUSH2 0x1160 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x122B DUP7 DUP3 DUP8 ADD PUSH2 0x1160 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x123E DUP2 PUSH2 0x12CE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x124D DUP2 PUSH2 0x1300 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1268 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1235 JUMP JUMPDEST PUSH2 0x1275 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1235 JUMP JUMPDEST PUSH2 0x1282 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1244 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x129F PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1235 JUMP JUMPDEST PUSH2 0x12AC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1244 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x12C8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1244 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12D9 DUP3 PUSH2 0x12E0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1318 DUP2 PUSH2 0x12CE JUMP JUMPDEST DUP2 EQ PUSH2 0x1323 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x132F DUP2 PUSH2 0x1300 JUMP JUMPDEST DUP2 EQ PUSH2 0x133A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 0xE8 0xA6 0xE1 SWAP11 SWAP3 DUP11 SWAP6 PUSH27 0xC3634DACDA77C05BC56A10A9907595B59942EBA31E198364736F6C PUSH4 0x43000807 STOP CALLER ","sourceMap":"374:3380:1:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@buyCard_1002":{"entryPoint":2604,"id":1002,"parameterSlots":2,"returnSlots":0},"@createListing_876":{"entryPoint":219,"id":876,"parameterSlots":3,"returnSlots":0},"@removeListing_933":{"entryPoint":1492,"id":933,"parameterSlots":2,"returnSlots":0},"@updateListing_1044":{"entryPoint":3622,"id":1044,"parameterSlots":3,"returnSlots":0},"abi_decode_t_address":{"entryPoint":4406,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":4427,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":4448,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":4469,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":4514,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_uint256":{"entryPoint":4578,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":4661,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":4676,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":4691,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":4746,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":4787,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":4814,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":4832,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":4864,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":4874,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":4879,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":4902,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4067:20","statements":[{"body":{"nodeType":"YulBlock","src":"59:87:20","statements":[{"nodeType":"YulAssignment","src":"69:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"91:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"78:12:20"},"nodeType":"YulFunctionCall","src":"78:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"69:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"134:5:20"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"107:26:20"},"nodeType":"YulFunctionCall","src":"107:33:20"},"nodeType":"YulExpressionStatement","src":"107:33:20"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"37:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"45:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:20","type":""}],"src":"7:139:20"},{"body":{"nodeType":"YulBlock","src":"215:80:20","statements":[{"nodeType":"YulAssignment","src":"225:22:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"240:6:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"234:5:20"},"nodeType":"YulFunctionCall","src":"234:13:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"225:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"283:5:20"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"256:26:20"},"nodeType":"YulFunctionCall","src":"256:33:20"},"nodeType":"YulExpressionStatement","src":"256:33:20"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"193:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"201:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"209:5:20","type":""}],"src":"152:143:20"},{"body":{"nodeType":"YulBlock","src":"353:87:20","statements":[{"nodeType":"YulAssignment","src":"363:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"385:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"372:12:20"},"nodeType":"YulFunctionCall","src":"372:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"363:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"428:5:20"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"401:26:20"},"nodeType":"YulFunctionCall","src":"401:33:20"},"nodeType":"YulExpressionStatement","src":"401:33:20"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"331:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"339:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"347:5:20","type":""}],"src":"301:139:20"},{"body":{"nodeType":"YulBlock","src":"523:274:20","statements":[{"body":{"nodeType":"YulBlock","src":"569:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"571:77:20"},"nodeType":"YulFunctionCall","src":"571:79:20"},"nodeType":"YulExpressionStatement","src":"571:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"544:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"553:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"540:3:20"},"nodeType":"YulFunctionCall","src":"540:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"565:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"536:3:20"},"nodeType":"YulFunctionCall","src":"536:32:20"},"nodeType":"YulIf","src":"533:119:20"},{"nodeType":"YulBlock","src":"662:128:20","statements":[{"nodeType":"YulVariableDeclaration","src":"677:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"691:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"681:6:20","type":""}]},{"nodeType":"YulAssignment","src":"706:74:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"752:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"763:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"748:3:20"},"nodeType":"YulFunctionCall","src":"748:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"772:7:20"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"716:31:20"},"nodeType":"YulFunctionCall","src":"716:64:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"706:6:20"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"493:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"504:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"516:6:20","type":""}],"src":"446:351:20"},{"body":{"nodeType":"YulBlock","src":"886:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"932:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"934:77:20"},"nodeType":"YulFunctionCall","src":"934:79:20"},"nodeType":"YulExpressionStatement","src":"934:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"907:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"916:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"903:3:20"},"nodeType":"YulFunctionCall","src":"903:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"928:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"899:3:20"},"nodeType":"YulFunctionCall","src":"899:32:20"},"nodeType":"YulIf","src":"896:119:20"},{"nodeType":"YulBlock","src":"1025:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"1040:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"1054:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1044:6:20","type":""}]},{"nodeType":"YulAssignment","src":"1069:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1104:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"1115:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1100:3:20"},"nodeType":"YulFunctionCall","src":"1100:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1124:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1079:20:20"},"nodeType":"YulFunctionCall","src":"1079:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1069:6:20"}]}]},{"nodeType":"YulBlock","src":"1152:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"1167:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"1181:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1171:6:20","type":""}]},{"nodeType":"YulAssignment","src":"1197:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1232:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"1243:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1228:3:20"},"nodeType":"YulFunctionCall","src":"1228:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1252:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1207:20:20"},"nodeType":"YulFunctionCall","src":"1207:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1197:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"848:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"859:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"871:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"879:6:20","type":""}],"src":"803:474:20"},{"body":{"nodeType":"YulBlock","src":"1383:519:20","statements":[{"body":{"nodeType":"YulBlock","src":"1429:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1431:77:20"},"nodeType":"YulFunctionCall","src":"1431:79:20"},"nodeType":"YulExpressionStatement","src":"1431:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1404:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"1413:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1400:3:20"},"nodeType":"YulFunctionCall","src":"1400:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"1425:2:20","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1396:3:20"},"nodeType":"YulFunctionCall","src":"1396:32:20"},"nodeType":"YulIf","src":"1393:119:20"},{"nodeType":"YulBlock","src":"1522:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"1537:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"1551:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1541:6:20","type":""}]},{"nodeType":"YulAssignment","src":"1566:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1601:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"1612:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1597:3:20"},"nodeType":"YulFunctionCall","src":"1597:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1621:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1576:20:20"},"nodeType":"YulFunctionCall","src":"1576:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1566:6:20"}]}]},{"nodeType":"YulBlock","src":"1649:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"1664:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"1678:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1668:6:20","type":""}]},{"nodeType":"YulAssignment","src":"1694:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1729:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"1740:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1725:3:20"},"nodeType":"YulFunctionCall","src":"1725:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1749:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1704:20:20"},"nodeType":"YulFunctionCall","src":"1704:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1694:6:20"}]}]},{"nodeType":"YulBlock","src":"1777:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"1792:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"1806:2:20","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1796:6:20","type":""}]},{"nodeType":"YulAssignment","src":"1822:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1857:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"1868:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1853:3:20"},"nodeType":"YulFunctionCall","src":"1853:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1877:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1832:20:20"},"nodeType":"YulFunctionCall","src":"1832:53:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1822:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1337:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1348:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1360:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1368:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1376:6:20","type":""}],"src":"1283:619:20"},{"body":{"nodeType":"YulBlock","src":"1973:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1990:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2013:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1995:17:20"},"nodeType":"YulFunctionCall","src":"1995:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1983:6:20"},"nodeType":"YulFunctionCall","src":"1983:37:20"},"nodeType":"YulExpressionStatement","src":"1983:37:20"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1961:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1968:3:20","type":""}],"src":"1908:118:20"},{"body":{"nodeType":"YulBlock","src":"2097:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2114:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2137:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2119:17:20"},"nodeType":"YulFunctionCall","src":"2119:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2107:6:20"},"nodeType":"YulFunctionCall","src":"2107:37:20"},"nodeType":"YulExpressionStatement","src":"2107:37:20"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2085:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2092:3:20","type":""}],"src":"2032:118:20"},{"body":{"nodeType":"YulBlock","src":"2310:288:20","statements":[{"nodeType":"YulAssignment","src":"2320:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2332:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2343:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2328:3:20"},"nodeType":"YulFunctionCall","src":"2328:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2320:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2400:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2413:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2424:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2409:3:20"},"nodeType":"YulFunctionCall","src":"2409:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"2356:43:20"},"nodeType":"YulFunctionCall","src":"2356:71:20"},"nodeType":"YulExpressionStatement","src":"2356:71:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2481:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2494:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2505:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2490:3:20"},"nodeType":"YulFunctionCall","src":"2490:18:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"2437:43:20"},"nodeType":"YulFunctionCall","src":"2437:72:20"},"nodeType":"YulExpressionStatement","src":"2437:72:20"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"2563:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2576:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2587:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2572:3:20"},"nodeType":"YulFunctionCall","src":"2572:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"2519:43:20"},"nodeType":"YulFunctionCall","src":"2519:72:20"},"nodeType":"YulExpressionStatement","src":"2519:72:20"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2266:9:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2278:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2286:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2294:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2305:4:20","type":""}],"src":"2156:442:20"},{"body":{"nodeType":"YulBlock","src":"2730:206:20","statements":[{"nodeType":"YulAssignment","src":"2740:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2752:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2763:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2748:3:20"},"nodeType":"YulFunctionCall","src":"2748:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2740:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2820:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2833:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2844:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2829:3:20"},"nodeType":"YulFunctionCall","src":"2829:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"2776:43:20"},"nodeType":"YulFunctionCall","src":"2776:71:20"},"nodeType":"YulExpressionStatement","src":"2776:71:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2901:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2914:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2925:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2910:3:20"},"nodeType":"YulFunctionCall","src":"2910:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"2857:43:20"},"nodeType":"YulFunctionCall","src":"2857:72:20"},"nodeType":"YulExpressionStatement","src":"2857:72:20"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2694:9:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2706:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2714:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2725:4:20","type":""}],"src":"2604:332:20"},{"body":{"nodeType":"YulBlock","src":"3040:124:20","statements":[{"nodeType":"YulAssignment","src":"3050:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3062:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3073:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3058:3:20"},"nodeType":"YulFunctionCall","src":"3058:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3050:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3130:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3143:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3154:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3139:3:20"},"nodeType":"YulFunctionCall","src":"3139:17:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3086:43:20"},"nodeType":"YulFunctionCall","src":"3086:71:20"},"nodeType":"YulExpressionStatement","src":"3086:71:20"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3012:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3024:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3035:4:20","type":""}],"src":"2942:222:20"},{"body":{"nodeType":"YulBlock","src":"3210:35:20","statements":[{"nodeType":"YulAssignment","src":"3220:19:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3236:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3230:5:20"},"nodeType":"YulFunctionCall","src":"3230:9:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3220:6:20"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3203:6:20","type":""}],"src":"3170:75:20"},{"body":{"nodeType":"YulBlock","src":"3296:51:20","statements":[{"nodeType":"YulAssignment","src":"3306:35:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3335:5:20"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3317:17:20"},"nodeType":"YulFunctionCall","src":"3317:24:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3306:7:20"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3278:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3288:7:20","type":""}],"src":"3251:96:20"},{"body":{"nodeType":"YulBlock","src":"3398:81:20","statements":[{"nodeType":"YulAssignment","src":"3408:65:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3423:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"3430:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3419:3:20"},"nodeType":"YulFunctionCall","src":"3419:54:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3408:7:20"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3380:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3390:7:20","type":""}],"src":"3353:126:20"},{"body":{"nodeType":"YulBlock","src":"3530:32:20","statements":[{"nodeType":"YulAssignment","src":"3540:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"3551:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3540:7:20"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3512:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3522:7:20","type":""}],"src":"3485:77:20"},{"body":{"nodeType":"YulBlock","src":"3657:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3674:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3677:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3667:6:20"},"nodeType":"YulFunctionCall","src":"3667:12:20"},"nodeType":"YulExpressionStatement","src":"3667:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"3568:117:20"},{"body":{"nodeType":"YulBlock","src":"3780:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3797:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3800:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3790:6:20"},"nodeType":"YulFunctionCall","src":"3790:12:20"},"nodeType":"YulExpressionStatement","src":"3790:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"3691:117:20"},{"body":{"nodeType":"YulBlock","src":"3857:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"3914:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3923:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3926:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3916:6:20"},"nodeType":"YulFunctionCall","src":"3916:12:20"},"nodeType":"YulExpressionStatement","src":"3916:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3880:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3905:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3887:17:20"},"nodeType":"YulFunctionCall","src":"3887:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3877:2:20"},"nodeType":"YulFunctionCall","src":"3877:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3870:6:20"},"nodeType":"YulFunctionCall","src":"3870:43:20"},"nodeType":"YulIf","src":"3867:63:20"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3850:5:20","type":""}],"src":"3814:122:20"},{"body":{"nodeType":"YulBlock","src":"3985:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"4042:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4051:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4054:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4044:6:20"},"nodeType":"YulFunctionCall","src":"4044:12:20"},"nodeType":"YulExpressionStatement","src":"4044:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4008:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4033:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4015:17:20"},"nodeType":"YulFunctionCall","src":"4015:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4005:2:20"},"nodeType":"YulFunctionCall","src":"4005:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3998:6:20"},"nodeType":"YulFunctionCall","src":"3998:43:20"},"nodeType":"YulIf","src":"3995:63:20"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3978:5:20","type":""}],"src":"3942:122:20"}]},"contents":"{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061003f5760003560e01c806324780c561461004457806359edbe711461006d5780637dd9f84614610096578063f772adf1146100b2575b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906111e2565b6100db565b005b34801561007957600080fd5b50610094600480360381019061008f91906111a2565b6105d4565b005b6100b060048036038101906100ab91906111a2565b610a2c565b005b3480156100be57600080fd5b506100d960048036038101906100d491906111e2565b610e26565b005b82813373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161012d91906112b3565b60206040518083038186803b15801561014557600080fd5b505afa158015610159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017d9190611175565b73ffffffffffffffffffffffffffffffffffffffff16146101ca576040517f59bd4d1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8483600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415806102cd575060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015414155b15610304576040517f5197cefd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000861161033e576040517f54b036a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330876040518363ffffffff1660e01b815260040161037992919061128a565b600060405180830381600087803b15801561039357600080fd5b505af11580156103a7573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1663081812fc876040518263ffffffff1660e01b81526004016103fb91906112b3565b60206040518083038186803b15801561041357600080fd5b505afa158015610427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044b9190611175565b73ffffffffffffffffffffffffffffffffffffffff1614610498576040517fe45ac74b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180606001604052808781526020018881526020013373ffffffffffffffffffffffffffffffffffffffff168152509050806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff16867f5c10eb54e7b66711529cfcc35f98f53c3aeaa6dc143c27e0381d0fd913213229896040516105c291906112b3565b60405180910390a35050505050505050565b81813373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161062691906112b3565b60206040518083038186803b15801561063e57600080fd5b505afa158015610652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106769190611175565b73ffffffffffffffffffffffffffffffffffffffff16146106c3576040517f59bd4d1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8383600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806107c4575060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010154145b156107fb576040517fffeb22e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663095ea7b36000876040518363ffffffff1660e01b815260040161083792919061128a565b600060405180830381600087803b15801561085157600080fd5b505af1158015610865573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1663081812fc876040518263ffffffff1660e01b81526004016108ba91906112b3565b60206040518083038186803b1580156108d257600080fd5b505afa1580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a9190611175565b73ffffffffffffffffffffffffffffffffffffffff1614610957576040517ff198223e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550503373ffffffffffffffffffffffffffffffffffffffff16857f58b0852506006c4be6c7ae72afcd195d9e64d7f5d8947905e914b778e47b7cf360405160405180910390a3505050505050565b8181600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610b2d575060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010154145b15610b64576040517fffeb22e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060200151341015610c6a576040517f54b036a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806040015173ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610cb4573d6000803e3d6000fd5b508473ffffffffffffffffffffffffffffffffffffffff166342842e0e826040015133876040518463ffffffff1660e01b8152600401610cf693929190611253565b600060405180830381600087803b158015610d1057600080fd5b505af1158015610d24573d6000803e3d6000fd5b505050506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050806040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16857facc22b2c51e2c9b31c108c993cebdcd72470cf6f43ed3f5590daf770462332558460200151604051610e1791906112b3565b60405180910390a45050505050565b82823373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401610e7891906112b3565b60206040518083038186803b158015610e9057600080fd5b505afa158015610ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec89190611175565b73ffffffffffffffffffffffffffffffffffffffff1614610f15576040517f59bd4d1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8484600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611016575060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010154145b1561104d576040517fffeb22e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008511611087576040517f54b036a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888152602001908152602001600020600101819055503373ffffffffffffffffffffffffffffffffffffffff16867f5c10eb54e7b66711529cfcc35f98f53c3aeaa6dc143c27e0381d0fd9132132298760405161112591906112b3565b60405180910390a350505050505050565b6000813590506111458161130f565b92915050565b60008151905061115a8161130f565b92915050565b60008135905061116f81611326565b92915050565b60006020828403121561118b5761118a61130a565b5b60006111998482850161114b565b91505092915050565b600080604083850312156111b9576111b861130a565b5b60006111c785828601611136565b92505060206111d885828601611160565b9150509250929050565b6000806000606084860312156111fb576111fa61130a565b5b600061120986828701611136565b935050602061121a86828701611160565b925050604061122b86828701611160565b9150509250925092565b61123e816112ce565b82525050565b61124d81611300565b82525050565b60006060820190506112686000830186611235565b6112756020830185611235565b6112826040830184611244565b949350505050565b600060408201905061129f6000830185611235565b6112ac6020830184611244565b9392505050565b60006020820190506112c86000830184611244565b92915050565b60006112d9826112e0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b611318816112ce565b811461132357600080fd5b50565b61132f81611300565b811461133a57600080fd5b5056fea26469706673582212209ce8a6e19a928a957ac3634dacda77c05bc56a10a9907595b59942eba31e198364736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x24780C56 EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x59EDBE71 EQ PUSH2 0x6D JUMPI DUP1 PUSH4 0x7DD9F846 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0xF772ADF1 EQ PUSH2 0xB2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x11E2 JUMP JUMPDEST PUSH2 0xDB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x94 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x8F SWAP2 SWAP1 PUSH2 0x11A2 JUMP JUMPDEST PUSH2 0x5D4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAB SWAP2 SWAP1 PUSH2 0x11A2 JUMP JUMPDEST PUSH2 0xA2C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD4 SWAP2 SWAP1 PUSH2 0x11E2 JUMP JUMPDEST PUSH2 0xE26 JUMP JUMPDEST STOP JUMPDEST DUP3 DUP2 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12D SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x159 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1CA JUMPI PUSH1 0x40 MLOAD PUSH32 0x59BD4D1B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 PUSH2 0x2CD JUMPI POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 0x304 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5197CEFD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 GT PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH32 0x54B036A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 ADDRESS DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x379 SWAP3 SWAP2 SWAP1 PUSH2 0x128A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x81812FC DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FB SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x427 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x44B SWAP2 SWAP1 PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x498 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE45AC74B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP DUP1 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH32 0x5C10EB54E7B66711529CFCC35F98F53C3AEAA6DC143C27E0381D0FD913213229 DUP10 PUSH1 0x40 MLOAD PUSH2 0x5C2 SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x626 SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x63E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x652 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x676 SWAP2 SWAP1 PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x59BD4D1B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x7C4 JUMPI POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0x7FB JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFEB22E200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 PUSH1 0x0 DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x837 SWAP3 SWAP2 SWAP1 PUSH2 0x128A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x851 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x865 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x81812FC DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8BA SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x90A SWAP2 SWAP1 PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x957 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF198223E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH32 0x58B0852506006C4BE6C7AE72AFCD195D9E64D7F5D8947905E914B778E47B7CF3 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB2D JUMPI POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0xB64 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFEB22E200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD CALLVALUE LT ISZERO PUSH2 0xC6A JUMPI PUSH1 0x40 MLOAD PUSH32 0x54B036A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC CALLVALUE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xCB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E DUP3 PUSH1 0x40 ADD MLOAD CALLER DUP8 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCF6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD24 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH32 0xACC22B2C51E2C9B31C108C993CEBDCD72470CF6F43ED3F5590DAF77046233255 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xE17 SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP3 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE78 SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEA4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEC8 SWAP2 SWAP1 PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xF15 JUMPI PUSH1 0x40 MLOAD PUSH32 0x59BD4D1B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP5 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1016 JUMPI POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0x104D JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFEB22E200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP6 GT PUSH2 0x1087 JUMPI PUSH1 0x40 MLOAD PUSH32 0x54B036A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x0 DUP1 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH32 0x5C10EB54E7B66711529CFCC35F98F53C3AEAA6DC143C27E0381D0FD913213229 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1125 SWAP2 SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1145 DUP2 PUSH2 0x130F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x115A DUP2 PUSH2 0x130F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x116F DUP2 PUSH2 0x1326 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x118B JUMPI PUSH2 0x118A PUSH2 0x130A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1199 DUP5 DUP3 DUP6 ADD PUSH2 0x114B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11B9 JUMPI PUSH2 0x11B8 PUSH2 0x130A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x11C7 DUP6 DUP3 DUP7 ADD PUSH2 0x1136 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x11D8 DUP6 DUP3 DUP7 ADD PUSH2 0x1160 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11FB JUMPI PUSH2 0x11FA PUSH2 0x130A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1209 DUP7 DUP3 DUP8 ADD PUSH2 0x1136 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x121A DUP7 DUP3 DUP8 ADD PUSH2 0x1160 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x122B DUP7 DUP3 DUP8 ADD PUSH2 0x1160 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x123E DUP2 PUSH2 0x12CE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x124D DUP2 PUSH2 0x1300 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1268 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1235 JUMP JUMPDEST PUSH2 0x1275 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1235 JUMP JUMPDEST PUSH2 0x1282 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1244 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x129F PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1235 JUMP JUMPDEST PUSH2 0x12AC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1244 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x12C8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1244 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12D9 DUP3 PUSH2 0x12E0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1318 DUP2 PUSH2 0x12CE JUMP JUMPDEST DUP2 EQ PUSH2 0x1323 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x132F DUP2 PUSH2 0x1300 JUMP JUMPDEST DUP2 EQ PUSH2 0x133A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 0xE8 0xA6 0xE1 SWAP11 SWAP3 DUP11 SWAP6 PUSH27 0xC3634DACDA77C05BC56A10A9907595B59942EBA31E198364736F6C PUSH4 0x43000807 STOP CALLER ","sourceMap":"374:3380:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1664:667;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2337:462;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2805:548;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3359:393;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1664:667;1790:11;1803:7;1040:10;999:51;;1007:11;999:28;;;1028:7;999:37;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:51;;;995:125;;1073:36;;;;;;;;;;;;;;995:125;1822:11:::1;1835:7;1263:1;1214:51;;:8;:21:::0;1223:11:::1;1214:21;;;;;;;;;;;;;;;:30;1236:7;1214:30;;;;;;;;;;;:37;;;;;;;;;;;;:51;;;;:96;;;;1309:1;1269:8:::0;:21:::1;1278:11;1269:21;;;;;;;;;;;;;;;:30;1291:7;1269:30;;;;;;;;;;;:36;;;:41;;1214:96;1210:174;;;1333:40;;;;;;;;;;;;;;1210:174;1868:1:::2;1858:6;:11;1854:88;;1892:39;;;;;;;;;;;;;;1854:88;1959:11;1951:28;;;1988:4;1995:7;1951:52;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;2070:4;2017:58;;2025:11;2017:32;;;2050:7;2017:41;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:58;;;2013:134;;2098:38;;;;;;;;;;;;;;2013:134;2157:22;2182:36;;;;;;;;2190:7;2182:36;;;;2199:6;2182:36;;;;2207:10;2182:36;;;;::::0;2157:61:::2;;2260:7;2228:8;:20:::0;2237:10:::2;2228:20;;;;;;;;;;;;;;;:29;2249:7;2228:29;;;;;;;;;;;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2313:10;2282:42;;2296:7;2282:42;2305:6;2282:42;;;;;;:::i;:::-;;;;;;;;1844:487;1129:1:::1;;1664:667:::0;;;;;:::o;2337:462::-;2439:11;2452:7;1040:10;999:51;;1007:11;999:28;;;1028:7;999:37;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:51;;;995:125;;1073:36;;;;;;;;;;;;;;995:125;2468:11:::1;2481:7;1524:1;1475:51;;:8;:21:::0;1484:11:::1;1475:21;;;;;;;;;;;;;;;:30;1497:7;1475:30;;;;;;;;;;;:37;;;;;;;;;;;;:51;;;:96;;;;1570:1;1530:8:::0;:21:::1;1539:11;1530:21;;;;;;;;;;;;;;;:30;1552:7;1530:30;;;;;;;;;;;:36;;;:41;1475:96;1471:170;;;1594:36;;;;;;;;;;;;;;1471:170;2508:11:::2;2500:28;;;2537:1;2541:7;2500:49;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;2616:1;2563:55;;2571:11;2563:32;;;2596:7;2563:41;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:55;;;2559:137;;2641:44;;;;;;;;;;;;;;2559:137;2713:8;:20:::0;2722:10:::2;2713:20;;;;;;;;;;;;;;;:29;2734:7;2713:29;;;;;;;;;;;;2706:36:::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;2781:10;2757:35;;2772:7;2757:35;;;;;;;;;;1129:1:::1;;2337:462:::0;;;;:::o;2805:548::-;2884:11;2897:7;1524:1;1475:51;;:8;:21;1484:11;1475:21;;;;;;;;;;;;;;;:30;1497:7;1475:30;;;;;;;;;;;:37;;;;;;;;;;;;:51;;;:96;;;;1570:1;1530:8;:21;1539:11;1530:21;;;;;;;;;;;;;;;:30;1552:7;1530:30;;;;;;;;;;;:36;;;:41;1475:96;1471:170;;;1594:36;;;;;;;;;;;;;;1471:170;2916:22:::1;2941:8:::0;:21:::1;2950:11;2941:21;;;;;;;;;;;;;;;:30;2963:7;2941:30;;;;;;;;;;;2916:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;2997:7;:13;;;2985:9;:25;2981:102;;;3033:39;;;;;;;;;;;;;;2981:102;3100:7;:14;;;3092:32;;:43;3125:9;3092:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;3153:11;3145:37;;;3183:7;:14;;;3199:10;3211:7;3145:74;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;3236:8;:21:::0;3245:11:::1;3236:21;;;;;;;;;;;;;;;:30;3258:7;3236:30;;;;;;;;;;;;3229:37:::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;3316:7;:14;;;3281:65;;3304:10;3281:65;;3295:7;3281:65;3332:7;:13;;;3281:65;;;;;;:::i;:::-;;;;;;;;2906:447;2805:548:::0;;;;:::o;3359:393::-;3485:11;3498:7;1040:10;999:51;;1007:11;999:28;;;1028:7;999:37;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:51;;;995:125;;1073:36;;;;;;;;;;;;;;995:125;3514:11:::1;3527:7;1524:1;1475:51;;:8;:21:::0;1484:11:::1;1475:21;;;;;;;;;;;;;;;:30;1497:7;1475:30;;;;;;;;;;;:37;;;;;;;;;;;;:51;;;:96;;;;1570:1;1530:8:::0;:21:::1;1539:11;1530:21;;;;;;;;;;;;;;;:30;1552:7;1530:30;;;;;;;;;;;:36;;;:41;1475:96;1471:170;;;1594:36;;;;;;;;;;;;;;1471:170;3560:1:::2;3550:6;:11;3546:88;;3584:39;;;;;;;;;;;;;;3546:88;3682:6;3643:8;:21:::0;3652:11:::2;3643:21;;;;;;;;;;;;;;;:30;3665:7;3643:30;;;;;;;;;;;:36;;:45;;;;3734:10;3703:42;;3717:7;3703:42;3726:6;3703:42;;;;;;:::i;:::-;;;;;;;;1129:1:::1;;3359:393:::0;;;;;:::o;7:139:20:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;7:139;;;;:::o;152:143::-;209:5;240:6;234:13;225:22;;256:33;283:5;256:33;:::i;:::-;152:143;;;;:::o;301:139::-;347:5;385:6;372:20;363:29;;401:33;428:5;401:33;:::i;:::-;301:139;;;;:::o;446:351::-;516:6;565:2;553:9;544:7;540:23;536:32;533:119;;;571:79;;:::i;:::-;533:119;691:1;716:64;772:7;763:6;752:9;748:22;716:64;:::i;:::-;706:74;;662:128;446:351;;;;:::o;803:474::-;871:6;879;928:2;916:9;907:7;903:23;899:32;896:119;;;934:79;;:::i;:::-;896:119;1054:1;1079:53;1124:7;1115:6;1104:9;1100:22;1079:53;:::i;:::-;1069:63;;1025:117;1181:2;1207:53;1252:7;1243:6;1232:9;1228:22;1207:53;:::i;:::-;1197:63;;1152:118;803:474;;;;;:::o;1283:619::-;1360:6;1368;1376;1425:2;1413:9;1404:7;1400:23;1396:32;1393:119;;;1431:79;;:::i;:::-;1393:119;1551:1;1576:53;1621:7;1612:6;1601:9;1597:22;1576:53;:::i;:::-;1566:63;;1522:117;1678:2;1704:53;1749:7;1740:6;1729:9;1725:22;1704:53;:::i;:::-;1694:63;;1649:118;1806:2;1832:53;1877:7;1868:6;1857:9;1853:22;1832:53;:::i;:::-;1822:63;;1777:118;1283:619;;;;;:::o;1908:118::-;1995:24;2013:5;1995:24;:::i;:::-;1990:3;1983:37;1908:118;;:::o;2032:::-;2119:24;2137:5;2119:24;:::i;:::-;2114:3;2107:37;2032:118;;:::o;2156:442::-;2305:4;2343:2;2332:9;2328:18;2320:26;;2356:71;2424:1;2413:9;2409:17;2400:6;2356:71;:::i;:::-;2437:72;2505:2;2494:9;2490:18;2481:6;2437:72;:::i;:::-;2519;2587:2;2576:9;2572:18;2563:6;2519:72;:::i;:::-;2156:442;;;;;;:::o;2604:332::-;2725:4;2763:2;2752:9;2748:18;2740:26;;2776:71;2844:1;2833:9;2829:17;2820:6;2776:71;:::i;:::-;2857:72;2925:2;2914:9;2910:18;2901:6;2857:72;:::i;:::-;2604:332;;;;;:::o;2942:222::-;3035:4;3073:2;3062:9;3058:18;3050:26;;3086:71;3154:1;3143:9;3139:17;3130:6;3086:71;:::i;:::-;2942:222;;;;:::o;3251:96::-;3288:7;3317:24;3335:5;3317:24;:::i;:::-;3306:35;;3251:96;;;:::o;3353:126::-;3390:7;3430:42;3423:5;3419:54;3408:65;;3353:126;;;:::o;3485:77::-;3522:7;3551:5;3540:16;;3485:77;;;:::o;3691:117::-;3800:1;3797;3790:12;3814:122;3887:24;3905:5;3887:24;:::i;:::-;3880:5;3877:35;3867:63;;3926:1;3923;3916:12;3867:63;3814:122;:::o;3942:::-;4015:24;4033:5;4015:24;:::i;:::-;4008:5;4005:35;3995:63;;4054:1;4051;4044:12;3995:63;3942:122;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"995800","executionCost":"1034","totalCost":"996834"},"external":{"buyCard(address,uint256)":"infinite","createListing(address,uint256,uint256)":"infinite","removeListing(address,uint256)":"infinite","updateListing(address,uint256,uint256)":"infinite"}},"methodIdentifiers":{"buyCard(address,uint256)":"7dd9f846","createListing(address,uint256,uint256)":"24780c56","removeListing(address,uint256)":"59edbe71","updateListing(address,uint256,uint256)":"f772adf1"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BusinessCardMarketplace__AlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BusinessCardMarketplace__ApproveNotCleared\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BusinessCardMarketplace__InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BusinessCardMarketplace__NotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BusinessCardMarketplace__NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BusinessCardMarketplace__OnlyOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ListingBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ListingListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ListingRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"buyCard\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"removeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BusinessCardMarketplace.sol\":\"BusinessCardMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BusinessCardMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n// Errors\\nerror BusinessCardMarketplace__OnlyOwner();\\nerror BusinessCardMarketplace__AlreadyListed();\\nerror BusinessCardMarketplace__NotListed();\\nerror BusinessCardMarketplace__InvalidPrice();\\nerror BusinessCardMarketplace__NotApproved();\\nerror BusinessCardMarketplace__ApproveNotCleared();\\n\\ncontract BusinessCardMarketplace {\\n    // State Variables\\n    struct Listing {\\n        uint256 listId;\\n        uint256 price;\\n        address seller;\\n    }\\n\\n    // Mappings\\n    mapping(address => mapping(uint256 => Listing)) internal listings;\\n\\n    // Events\\n    event ListingListed(uint256 indexed cardId, uint256 price, address indexed seller);\\n    event ListingRemoved(uint256 indexed cardId, address indexed seller);\\n    event ListingBought(uint256 indexed cardId, address indexed buyer, address indexed seller, uint256 price);\\n\\n    // Functions\\n    modifier onlyOwner(address _nftAddress, uint256 _cardId) {\\n        if (IERC721(_nftAddress).ownerOf(_cardId) != msg.sender) {\\n            revert BusinessCardMarketplace__OnlyOwner();\\n        }\\n        _;\\n    }\\n\\n    modifier notListed(address _nftAddress, uint256 _cardId) {\\n        if (listings[_nftAddress][_cardId].seller != address(0) || listings[_nftAddress][_cardId].price != 0) {\\n            revert BusinessCardMarketplace__AlreadyListed();\\n        }\\n        _;\\n    }\\n\\n    modifier Listed(address _nftAddress, uint256 _cardId) {\\n        if (listings[_nftAddress][_cardId].seller == address(0) || listings[_nftAddress][_cardId].price == 0) {\\n            revert BusinessCardMarketplace__NotListed();\\n        }\\n        _;\\n    }\\n\\n    function createListing(\\n        address _nftAddress,\\n        uint256 _price,\\n        uint256 _cardId\\n    ) external onlyOwner(_nftAddress, _cardId) notListed(_nftAddress, _cardId) {\\n        if (_price <= 0) {\\n            revert BusinessCardMarketplace__InvalidPrice();\\n        }\\n        IERC721(_nftAddress).approve(address(this), _cardId);\\n        if (IERC721(_nftAddress).getApproved(_cardId) != address(this)) {\\n            revert BusinessCardMarketplace__NotApproved();\\n        }\\n\\n        Listing memory listing = Listing(_cardId, _price, msg.sender);\\n        listings[msg.sender][_cardId] = listing;\\n        emit ListingListed(_cardId, _price, msg.sender);\\n    }\\n\\n    function removeListing(\\n        address _nftAddress,\\n        uint256 _cardId\\n    ) external onlyOwner(_nftAddress, _cardId) Listed(_nftAddress, _cardId) {\\n        IERC721(_nftAddress).approve(address(0), _cardId);\\n        if (IERC721(_nftAddress).getApproved(_cardId) != address(0)) {\\n            revert BusinessCardMarketplace__ApproveNotCleared();\\n        }\\n\\n        delete listings[msg.sender][_cardId];\\n        emit ListingRemoved(_cardId, msg.sender);\\n    }\\n\\n    function buyCard(address _nftAddress, uint256 _cardId) external payable Listed(_nftAddress, _cardId) {\\n        Listing memory listing = listings[_nftAddress][_cardId];\\n        if (msg.value < listing.price) {\\n            revert BusinessCardMarketplace__InvalidPrice();\\n        }\\n        payable(listing.seller).transfer(msg.value);\\n        IERC721(_nftAddress).safeTransferFrom(listing.seller, msg.sender, _cardId);\\n        delete listings[_nftAddress][_cardId];\\n        emit ListingBought(_cardId, msg.sender, listing.seller, listing.price);\\n    }\\n\\n    function updateListing(\\n        address _nftAddress,\\n        uint256 _cardId,\\n        uint256 _price\\n    ) external onlyOwner(_nftAddress, _cardId) Listed(_nftAddress, _cardId) {\\n        if (_price <= 0) {\\n            revert BusinessCardMarketplace__InvalidPrice();\\n        }\\n        listings[_nftAddress][_cardId].price = _price;\\n        emit ListingListed(_cardId, _price, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x8e5b0e45d4d096dad3227cc4a56b8082028bce8987e0c2fa88a30949316ab73c\",\"license\":\"MIT\"},\"contracts/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x12f9e29068ab1d3b67f914a22cd8fa6fcdb485e13209831750473c067ab4c9f4\",\"license\":\"MIT\"},\"contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":685,"contract":"contracts/BusinessCardMarketplace.sol:BusinessCardMarketplace","label":"listings","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)678_storage))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)678_storage))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => struct BusinessCardMarketplace.Listing))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_struct(Listing)678_storage)"},"t_mapping(t_uint256,t_struct(Listing)678_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct BusinessCardMarketplace.Listing)","numberOfBytes":"32","value":"t_struct(Listing)678_storage"},"t_struct(Listing)678_storage":{"encoding":"inplace","label":"struct BusinessCardMarketplace.Listing","members":[{"astId":673,"contract":"contracts/BusinessCardMarketplace.sol:BusinessCardMarketplace","label":"listId","offset":0,"slot":"0","type":"t_uint256"},{"astId":675,"contract":"contracts/BusinessCardMarketplace.sol:BusinessCardMarketplace","label":"price","offset":0,"slot":"1","type":"t_uint256"},{"astId":677,"contract":"contracts/BusinessCardMarketplace.sol:BusinessCardMarketplace","label":"seller","offset":0,"slot":"2","type":"t_address"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ERC721EnumerableUpgradeable.sol":{"ERC721EnumerableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenByIndex(uint256)":{"details":"See {IERC721Enumerable-tokenByIndex}."},"tokenOfOwnerByIndex(address,uint256)":{"details":"See {IERC721Enumerable-tokenOfOwnerByIndex}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"totalSupply()":{"details":"See {IERC721Enumerable-totalSupply}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721EnumerableUpgradeable.sol\":\"ERC721EnumerableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"./proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {}\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {}\\n\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x60daab8ac6fafab6fc0acb4dceac9af25c87e149839319a3760f1ebc9472c6fb\",\"license\":\"MIT\"},\"contracts/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"./utils/AddressUpgradeable.sol\\\";\\nimport \\\"./utils/ContextUpgradeable.sol\\\";\\nimport \\\"./utils/StringsUpgradeable.sol\\\";\\nimport \\\"./utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"./proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC721Upgradeable,\\n    IERC721MetadataUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 /* firstTokenId */, uint256 batchSize) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xf2bf05a6cccace5e6db8073df92e341623302a582a7e31f524f4fe9888627388\",\"license\":\"MIT\"},\"contracts/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x37f8b3bc6b4c6dbae5b16746296071ba43cd4cb4b0c41957298ca42395aa4c87\",\"license\":\"MIT\"},\"contracts/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"contracts/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x22833f657ec750aa0058f0127af6b319f0ede114337fa9e32f416ba042bed861\",\"license\":\"MIT\"},\"contracts/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x055fe4c1e942d42899298a11a5501ed8757b5247d914f500d902fd308f4a169f\",\"license\":\"MIT\"},\"contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf75ca4468e9d5395f6810130e622b0c130e44b72ab4de678f34cf93423d980ab\",\"license\":\"MIT\"},\"contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {}\\n\\n    function __Context_init_unchained() internal onlyInitializing {}\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8d195f4fb42b15464ab01ae3fb99b6f5c88526ae9b4187f0774741ad0dc6d3d2\",\"license\":\"MIT\"},\"contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xef702737c98b0296899e4439c17c4a1c96b8dcef7e176805275e782612fce9c7\",\"license\":\"MIT\"},\"contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {}\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xaae49561857f45b234927e952b0be026fa85f05b7fa073212e20b4130d73b917\",\"license\":\"MIT\"},\"contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05d5d914a129f8a74b1cae41b212965882aed82683efc0888665c4b26cd60e54\",\"license\":\"MIT\"},\"contracts/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2817,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":2820,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3326,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3599,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":1448,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"_name","offset":0,"slot":"101","type":"t_string_storage"},{"astId":1450,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"_symbol","offset":0,"slot":"102","type":"t_string_storage"},{"astId":1454,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"_owners","offset":0,"slot":"103","type":"t_mapping(t_uint256,t_address)"},{"astId":1458,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"_balances","offset":0,"slot":"104","type":"t_mapping(t_address,t_uint256)"},{"astId":1462,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"_tokenApprovals","offset":0,"slot":"105","type":"t_mapping(t_uint256,t_address)"},{"astId":1468,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"_operatorApprovals","offset":0,"slot":"106","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2388,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"__gap","offset":0,"slot":"107","type":"t_array(t_uint256)44_storage"},{"astId":1075,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"_ownedTokens","offset":0,"slot":"151","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":1079,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"_ownedTokensIndex","offset":0,"slot":"152","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1082,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"_allTokens","offset":0,"slot":"153","type":"t_array(t_uint256)dyn_storage"},{"astId":1086,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"_allTokensIndex","offset":0,"slot":"154","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1418,"contract":"contracts/ERC721EnumerableUpgradeable.sol:ERC721EnumerableUpgradeable","label":"__gap","offset":0,"slot":"155","type":"t_array(t_uint256)46_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)44_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[44]","numberOfBytes":"1408"},"t_array(t_uint256)46_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[46]","numberOfBytes":"1472"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ERC721Upgradeable.sol":{"ERC721Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50612322806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611863565b6102bc565b6040516100fb9190611b80565b60405180910390f35b61010c61039e565b6040516101199190611b9b565b60405180910390f35b61013c600480360381019061013791906118bd565b610430565b6040516101499190611b19565b60405180910390f35b61016c60048036038101906101679190611823565b610476565b005b6101886004803603810190610183919061170d565b61058e565b005b6101a4600480360381019061019f919061170d565b6105ee565b005b6101c060048036038101906101bb91906118bd565b61060e565b6040516101cd9190611b19565b60405180910390f35b6101f060048036038101906101eb91906116a0565b610695565b6040516101fd9190611cdd565b60405180910390f35b61020e61074d565b60405161021b9190611b9b565b60405180910390f35b61023e600480360381019061023991906117e3565b6107df565b005b61025a60048036038101906102559190611760565b6107f5565b005b610276600480360381019061027191906118bd565b610857565b6040516102839190611b9b565b60405180910390f35b6102a660048036038101906102a191906116cd565b6108bf565b6040516102b39190611b80565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060606580546103ad90611ed1565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611ed1565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611c9d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611cbd565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611bbd565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e58565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611c7d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611c5d565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606066805461075c90611ed1565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611ed1565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e95565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611bbd565b60405180910390fd5b61085184848484611002565b50505050565b6060610862826109bd565b600061086c61105e565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611075565b6040516020016108a7929190611af5565b6040516020818303038152906040525b915050919050565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c68161114d565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611c7d565b60405180910390fd5b50565b600033905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611bfd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611c1d565b60405180910390fd5b610c51838383600161118e565b8273ffffffffffffffffffffffffffffffffffffffff16610c718261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611bfd565b60405180910390fd5b6069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e5383838360016112b4565b505050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb90611c3d565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff59190611b80565b60405180910390a3505050565b61100d848484610b5e565b611019848484846112ba565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90611bdd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161108484611451565b01905060008167ffffffffffffffff8111156110a3576110a2611fc1565b5b6040519080825280601f01601f1916602001820160405280156110d55781602001600182028036833780820191505090505b509050600082602001820190505b600115611142578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112c5761112b611f63565b5b049450600085141561113d57611142565b6110e3565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116f83610e58565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156112ae57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146112225780606860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461121a9190611de7565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112ad5780606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a59190611d91565b925050819055505b5b50505050565b50505050565b60006112db8473ffffffffffffffffffffffffffffffffffffffff166115a4565b15611444578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611304610a08565b8786866040518563ffffffff1660e01b81526004016113269493929190611b34565b602060405180830381600087803b15801561134057600080fd5b505af192505050801561137157506040513d601f19601f8201168201806040525081019061136e9190611890565b60015b6113f4573d80600081146113a1576040519150601f19603f3d011682016040523d82523d6000602084013e6113a6565b606091505b506000815114156113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e390611bdd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611449565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106114af577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816114a5576114a4611f63565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106114ec576d04ee2d6d415b85acef810000000083816114e2576114e1611f63565b5b0492506020810190505b662386f26fc10000831061151b57662386f26fc10000838161151157611510611f63565b5b0492506010810190505b6305f5e1008310611544576305f5e100838161153a57611539611f63565b5b0492506008810190505b612710831061156957612710838161155f5761155e611f63565b5b0492506004810190505b6064831061158c576064838161158257611581611f63565b5b0492506002810190505b600a831061159b576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006115da6115d584611d1d565b611cf8565b9050828152602081018484840111156115f6576115f5611ff5565b5b611601848285611e8f565b509392505050565b60008135905061161881612290565b92915050565b60008135905061162d816122a7565b92915050565b600081359050611642816122be565b92915050565b600081519050611657816122be565b92915050565b600082601f83011261167257611671611ff0565b5b81356116828482602086016115c7565b91505092915050565b60008135905061169a816122d5565b92915050565b6000602082840312156116b6576116b5611fff565b5b60006116c484828501611609565b91505092915050565b600080604083850312156116e4576116e3611fff565b5b60006116f285828601611609565b925050602061170385828601611609565b9150509250929050565b60008060006060848603121561172657611725611fff565b5b600061173486828701611609565b935050602061174586828701611609565b92505060406117568682870161168b565b9150509250925092565b6000806000806080858703121561177a57611779611fff565b5b600061178887828801611609565b945050602061179987828801611609565b93505060406117aa8782880161168b565b925050606085013567ffffffffffffffff8111156117cb576117ca611ffa565b5b6117d78782880161165d565b91505092959194509250565b600080604083850312156117fa576117f9611fff565b5b600061180885828601611609565b92505060206118198582860161161e565b9150509250929050565b6000806040838503121561183a57611839611fff565b5b600061184885828601611609565b92505060206118598582860161168b565b9150509250929050565b60006020828403121561187957611878611fff565b5b600061188784828501611633565b91505092915050565b6000602082840312156118a6576118a5611fff565b5b60006118b484828501611648565b91505092915050565b6000602082840312156118d3576118d2611fff565b5b60006118e18482850161168b565b91505092915050565b6118f381611e1b565b82525050565b61190281611e2d565b82525050565b600061191382611d4e565b61191d8185611d64565b935061192d818560208601611e9e565b61193681612004565b840191505092915050565b600061194c82611d59565b6119568185611d75565b9350611966818560208601611e9e565b61196f81612004565b840191505092915050565b600061198582611d59565b61198f8185611d86565b935061199f818560208601611e9e565b80840191505092915050565b60006119b8602d83611d75565b91506119c382612015565b604082019050919050565b60006119db603283611d75565b91506119e682612064565b604082019050919050565b60006119fe602583611d75565b9150611a09826120b3565b604082019050919050565b6000611a21602483611d75565b9150611a2c82612102565b604082019050919050565b6000611a44601983611d75565b9150611a4f82612151565b602082019050919050565b6000611a67602983611d75565b9150611a728261217a565b604082019050919050565b6000611a8a601883611d75565b9150611a95826121c9565b602082019050919050565b6000611aad602183611d75565b9150611ab8826121f2565b604082019050919050565b6000611ad0603d83611d75565b9150611adb82612241565b604082019050919050565b611aef81611e85565b82525050565b6000611b01828561197a565b9150611b0d828461197a565b91508190509392505050565b6000602082019050611b2e60008301846118ea565b92915050565b6000608082019050611b4960008301876118ea565b611b5660208301866118ea565b611b636040830185611ae6565b8181036060830152611b758184611908565b905095945050505050565b6000602082019050611b9560008301846118f9565b92915050565b60006020820190508181036000830152611bb58184611941565b905092915050565b60006020820190508181036000830152611bd6816119ab565b9050919050565b60006020820190508181036000830152611bf6816119ce565b9050919050565b60006020820190508181036000830152611c16816119f1565b9050919050565b60006020820190508181036000830152611c3681611a14565b9050919050565b60006020820190508181036000830152611c5681611a37565b9050919050565b60006020820190508181036000830152611c7681611a5a565b9050919050565b60006020820190508181036000830152611c9681611a7d565b9050919050565b60006020820190508181036000830152611cb681611aa0565b9050919050565b60006020820190508181036000830152611cd681611ac3565b9050919050565b6000602082019050611cf26000830184611ae6565b92915050565b6000611d02611d13565b9050611d0e8282611f03565b919050565b6000604051905090565b600067ffffffffffffffff821115611d3857611d37611fc1565b5b611d4182612004565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611d9c82611e85565b9150611da783611e85565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ddc57611ddb611f34565b5b828201905092915050565b6000611df282611e85565b9150611dfd83611e85565b925082821015611e1057611e0f611f34565b5b828203905092915050565b6000611e2682611e65565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611ebc578082015181840152602081019050611ea1565b83811115611ecb576000848401525b50505050565b60006002820490506001821680611ee957607f821691505b60208210811415611efd57611efc611f92565b5b50919050565b611f0c82612004565b810181811067ffffffffffffffff82111715611f2b57611f2a611fc1565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b61229981611e1b565b81146122a457600080fd5b50565b6122b081611e2d565b81146122bb57600080fd5b50565b6122c781611e39565b81146122d257600080fd5b50565b6122de81611e85565b81146122e957600080fd5b5056fea26469706673582212207c52a6e6ba475becb58ac6bb7fb7a9701c7240116c9fe87612220a2776a557d764736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2322 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1863 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x1B19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1823 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x170D JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x170D JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x1B19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x16A0 JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x17E3 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x16CD JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x65 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1C9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1BBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1C5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x68 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x66 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1BBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1002 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x1AF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x114D JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x69 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x1C1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC51 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x118E JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC71 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x68 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x68 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x67 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE53 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x12B4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFB SWAP1 PUSH2 0x1C3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6A PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x100D DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1019 DUP5 DUP5 DUP5 DUP5 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x1BDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1084 DUP5 PUSH2 0x1451 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10A3 JUMPI PUSH2 0x10A2 PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1142 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x112C JUMPI PUSH2 0x112B PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x113D JUMPI PUSH2 0x1142 JUMP JUMPDEST PUSH2 0x10E3 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x116F DUP4 PUSH2 0xE58 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12AE JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1222 JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x121A SWAP2 SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12AD JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12A5 SWAP2 SWAP1 PUSH2 0x1D91 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12DB DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15A4 JUMP JUMPDEST ISZERO PUSH2 0x1444 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1304 PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1326 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1371 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x136E SWAP2 SWAP1 PUSH2 0x1890 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x13F4 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13A1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13A6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x13EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13E3 SWAP1 PUSH2 0x1BDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x14AF JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x14A5 JUMPI PUSH2 0x14A4 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14EC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x14E2 JUMPI PUSH2 0x14E1 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x151B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1511 JUMPI PUSH2 0x1510 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1544 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x153A JUMPI PUSH2 0x1539 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1569 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x155F JUMPI PUSH2 0x155E PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x158C JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1582 JUMPI PUSH2 0x1581 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x159B JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15DA PUSH2 0x15D5 DUP5 PUSH2 0x1D1D JUMP JUMPDEST PUSH2 0x1CF8 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x15F6 JUMPI PUSH2 0x15F5 PUSH2 0x1FF5 JUMP JUMPDEST JUMPDEST PUSH2 0x1601 DUP5 DUP3 DUP6 PUSH2 0x1E8F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1618 DUP2 PUSH2 0x2290 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x162D DUP2 PUSH2 0x22A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1642 DUP2 PUSH2 0x22BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1657 DUP2 PUSH2 0x22BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1672 JUMPI PUSH2 0x1671 PUSH2 0x1FF0 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1682 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x15C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x169A DUP2 PUSH2 0x22D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16B6 JUMPI PUSH2 0x16B5 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16C4 DUP5 DUP3 DUP6 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16E4 JUMPI PUSH2 0x16E3 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16F2 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1703 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1726 JUMPI PUSH2 0x1725 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1734 DUP7 DUP3 DUP8 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1745 DUP7 DUP3 DUP8 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1756 DUP7 DUP3 DUP8 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x177A JUMPI PUSH2 0x1779 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1788 DUP8 DUP3 DUP9 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1799 DUP8 DUP3 DUP9 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x17AA DUP8 DUP3 DUP9 ADD PUSH2 0x168B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17CB JUMPI PUSH2 0x17CA PUSH2 0x1FFA JUMP JUMPDEST JUMPDEST PUSH2 0x17D7 DUP8 DUP3 DUP9 ADD PUSH2 0x165D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17FA JUMPI PUSH2 0x17F9 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1808 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1819 DUP6 DUP3 DUP7 ADD PUSH2 0x161E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x183A JUMPI PUSH2 0x1839 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1848 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1859 DUP6 DUP3 DUP7 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1879 JUMPI PUSH2 0x1878 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1887 DUP5 DUP3 DUP6 ADD PUSH2 0x1633 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18A6 JUMPI PUSH2 0x18A5 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18B4 DUP5 DUP3 DUP6 ADD PUSH2 0x1648 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18D3 JUMPI PUSH2 0x18D2 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18E1 DUP5 DUP3 DUP6 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18F3 DUP2 PUSH2 0x1E1B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1902 DUP2 PUSH2 0x1E2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1913 DUP3 PUSH2 0x1D4E JUMP JUMPDEST PUSH2 0x191D DUP2 DUP6 PUSH2 0x1D64 JUMP JUMPDEST SWAP4 POP PUSH2 0x192D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1936 DUP2 PUSH2 0x2004 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x194C DUP3 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0x1956 DUP2 DUP6 PUSH2 0x1D75 JUMP JUMPDEST SWAP4 POP PUSH2 0x1966 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x196F DUP2 PUSH2 0x2004 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1985 DUP3 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0x198F DUP2 DUP6 PUSH2 0x1D86 JUMP JUMPDEST SWAP4 POP PUSH2 0x199F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B8 PUSH1 0x2D DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x19C3 DUP3 PUSH2 0x2015 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DB PUSH1 0x32 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x19E6 DUP3 PUSH2 0x2064 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19FE PUSH1 0x25 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A09 DUP3 PUSH2 0x20B3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A21 PUSH1 0x24 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A2C DUP3 PUSH2 0x2102 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A44 PUSH1 0x19 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A4F DUP3 PUSH2 0x2151 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A67 PUSH1 0x29 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A72 DUP3 PUSH2 0x217A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A8A PUSH1 0x18 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A95 DUP3 PUSH2 0x21C9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AAD PUSH1 0x21 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AB8 DUP3 PUSH2 0x21F2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AD0 PUSH1 0x3D DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1ADB DUP3 PUSH2 0x2241 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AEF DUP2 PUSH2 0x1E85 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B01 DUP3 DUP6 PUSH2 0x197A JUMP JUMPDEST SWAP2 POP PUSH2 0x1B0D DUP3 DUP5 PUSH2 0x197A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1B49 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0x1B56 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0x1B63 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1AE6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1B75 DUP2 DUP5 PUSH2 0x1908 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B95 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BB5 DUP2 DUP5 PUSH2 0x1941 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BD6 DUP2 PUSH2 0x19AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BF6 DUP2 PUSH2 0x19CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C16 DUP2 PUSH2 0x19F1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C36 DUP2 PUSH2 0x1A14 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C56 DUP2 PUSH2 0x1A37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C76 DUP2 PUSH2 0x1A5A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C96 DUP2 PUSH2 0x1A7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CB6 DUP2 PUSH2 0x1AA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CD6 DUP2 PUSH2 0x1AC3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CF2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1AE6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D02 PUSH2 0x1D13 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D0E DUP3 DUP3 PUSH2 0x1F03 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1D38 JUMPI PUSH2 0x1D37 PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST PUSH2 0x1D41 DUP3 PUSH2 0x2004 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D9C DUP3 PUSH2 0x1E85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DA7 DUP4 PUSH2 0x1E85 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1DDC JUMPI PUSH2 0x1DDB PUSH2 0x1F34 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DF2 DUP3 PUSH2 0x1E85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DFD DUP4 PUSH2 0x1E85 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1E10 JUMPI PUSH2 0x1E0F PUSH2 0x1F34 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E26 DUP3 PUSH2 0x1E65 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EBC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1EA1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1ECB JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1EE9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1EFD JUMPI PUSH2 0x1EFC PUSH2 0x1F92 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F0C DUP3 PUSH2 0x2004 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1F2B JUMPI PUSH2 0x1F2A PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x2299 DUP2 PUSH2 0x1E1B JUMP JUMPDEST DUP2 EQ PUSH2 0x22A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22B0 DUP2 PUSH2 0x1E2D JUMP JUMPDEST DUP2 EQ PUSH2 0x22BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22C7 DUP2 PUSH2 0x1E39 JUMP JUMPDEST DUP2 EQ PUSH2 0x22D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22DE DUP2 PUSH2 0x1E85 JUMP JUMPDEST DUP2 EQ PUSH2 0x22E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x52A6E6BA475BECB58AC6BB7FB7A9701C7240116C9FE87612220A2776A5 JUMPI 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"731:16715:3:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_2383":{"entryPoint":4788,"id":2383,"parameterSlots":4,"returnSlots":0},"@_approve_2216":{"entryPoint":2576,"id":2216,"parameterSlots":2,"returnSlots":0},"@_baseURI_1653":{"entryPoint":4190,"id":1653,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_2370":{"entryPoint":4494,"id":2370,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_2324":{"entryPoint":4794,"id":2324,"parameterSlots":4,"returnSlots":1},"@_exists_1885":{"entryPoint":4429,"id":1885,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_1919":{"entryPoint":2761,"id":1919,"parameterSlots":2,"returnSlots":1},"@_msgSender_3312":{"entryPoint":2568,"id":3312,"parameterSlots":0,"returnSlots":1},"@_ownerOf_1867":{"entryPoint":3672,"id":1867,"parameterSlots":1,"returnSlots":1},"@_requireMinted_2262":{"entryPoint":2493,"id":2262,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_1854":{"entryPoint":4098,"id":1854,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_2248":{"entryPoint":3733,"id":2248,"parameterSlots":3,"returnSlots":0},"@_transfer_2192":{"entryPoint":2910,"id":2192,"parameterSlots":3,"returnSlots":0},"@approve_1696":{"entryPoint":1142,"id":1696,"parameterSlots":2,"returnSlots":0},"@balanceOf_1557":{"entryPoint":1685,"id":1557,"parameterSlots":1,"returnSlots":1},"@getApproved_1714":{"entryPoint":1072,"id":1714,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_1749":{"entryPoint":2239,"id":1749,"parameterSlots":2,"returnSlots":1},"@isContract_2997":{"entryPoint":5540,"id":2997,"parameterSlots":1,"returnSlots":1},"@log10_4327":{"entryPoint":5201,"id":4327,"parameterSlots":1,"returnSlots":1},"@name_1595":{"entryPoint":926,"id":1595,"parameterSlots":0,"returnSlots":1},"@ownerOf_1585":{"entryPoint":1550,"id":1585,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_1795":{"entryPoint":1518,"id":1795,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_1825":{"entryPoint":2037,"id":1825,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_1731":{"entryPoint":2015,"id":1731,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1533":{"entryPoint":700,"id":1533,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3594":{"entryPoint":2387,"id":3594,"parameterSlots":1,"returnSlots":1},"@symbol_1605":{"entryPoint":1869,"id":1605,"parameterSlots":0,"returnSlots":1},"@toString_3386":{"entryPoint":4213,"id":3386,"parameterSlots":1,"returnSlots":1},"@tokenURI_1644":{"entryPoint":2135,"id":1644,"parameterSlots":1,"returnSlots":1},"@transferFrom_1776":{"entryPoint":1422,"id":1776,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":5575,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":5641,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":5662,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":5683,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":5704,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":5725,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":5771,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":5792,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":5837,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":5901,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":5984,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":6115,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":6179,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":6243,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":6288,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":6333,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":6378,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":6393,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":6408,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":6465,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":6522,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":6571,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":6606,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":6641,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":6676,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":6711,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":6746,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":6781,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":6816,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":6851,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":6886,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":6901,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":6937,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":6964,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":7040,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7067,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7101,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7133,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7165,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7197,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7229,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7261,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7293,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7325,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7357,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":7389,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":7416,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":7443,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":7453,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":7502,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":7513,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":7524,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":7541,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7558,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":7569,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7655,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":7707,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":7725,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":7737,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":7781,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":7813,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":7823,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":7838,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":7889,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":7939,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":7988,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":8035,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":8082,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":8129,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":8176,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":8181,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":8186,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":8191,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":8196,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":8213,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":8292,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":8371,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":8450,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":8529,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":8570,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":8649,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":8690,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":8769,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":8848,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":8871,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":8894,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":8917,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:23861:20","statements":[{"body":{"nodeType":"YulBlock","src":"90:327:20","statements":[{"nodeType":"YulAssignment","src":"100:74:20","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"166:6:20"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"125:40:20"},"nodeType":"YulFunctionCall","src":"125:48:20"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"109:15:20"},"nodeType":"YulFunctionCall","src":"109:65:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"100:5:20"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"190:5:20"},{"name":"length","nodeType":"YulIdentifier","src":"197:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"183:6:20"},"nodeType":"YulFunctionCall","src":"183:21:20"},"nodeType":"YulExpressionStatement","src":"183:21:20"},{"nodeType":"YulVariableDeclaration","src":"213:27:20","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"228:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"235:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"224:3:20"},"nodeType":"YulFunctionCall","src":"224:16:20"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"217:3:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"278:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"280:77:20"},"nodeType":"YulFunctionCall","src":"280:79:20"},"nodeType":"YulExpressionStatement","src":"280:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"259:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"264:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"255:3:20"},"nodeType":"YulFunctionCall","src":"255:16:20"},{"name":"end","nodeType":"YulIdentifier","src":"273:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"252:2:20"},"nodeType":"YulFunctionCall","src":"252:25:20"},"nodeType":"YulIf","src":"249:112:20"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"394:3:20"},{"name":"dst","nodeType":"YulIdentifier","src":"399:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"404:6:20"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"370:23:20"},"nodeType":"YulFunctionCall","src":"370:41:20"},"nodeType":"YulExpressionStatement","src":"370:41:20"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"63:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"68:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"76:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"84:5:20","type":""}],"src":"7:410:20"},{"body":{"nodeType":"YulBlock","src":"475:87:20","statements":[{"nodeType":"YulAssignment","src":"485:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"507:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"494:12:20"},"nodeType":"YulFunctionCall","src":"494:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"485:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:20"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"523:26:20"},"nodeType":"YulFunctionCall","src":"523:33:20"},"nodeType":"YulExpressionStatement","src":"523:33:20"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"453:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"461:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"469:5:20","type":""}],"src":"423:139:20"},{"body":{"nodeType":"YulBlock","src":"617:84:20","statements":[{"nodeType":"YulAssignment","src":"627:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"649:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"636:12:20"},"nodeType":"YulFunctionCall","src":"636:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"627:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"689:5:20"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"665:23:20"},"nodeType":"YulFunctionCall","src":"665:30:20"},"nodeType":"YulExpressionStatement","src":"665:30:20"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"595:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"603:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"611:5:20","type":""}],"src":"568:133:20"},{"body":{"nodeType":"YulBlock","src":"758:86:20","statements":[{"nodeType":"YulAssignment","src":"768:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"790:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"777:12:20"},"nodeType":"YulFunctionCall","src":"777:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"768:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"832:5:20"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"806:25:20"},"nodeType":"YulFunctionCall","src":"806:32:20"},"nodeType":"YulExpressionStatement","src":"806:32:20"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"736:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"744:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"752:5:20","type":""}],"src":"707:137:20"},{"body":{"nodeType":"YulBlock","src":"912:79:20","statements":[{"nodeType":"YulAssignment","src":"922:22:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"937:6:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"931:5:20"},"nodeType":"YulFunctionCall","src":"931:13:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"922:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"979:5:20"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"953:25:20"},"nodeType":"YulFunctionCall","src":"953:32:20"},"nodeType":"YulExpressionStatement","src":"953:32:20"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"890:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"898:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"906:5:20","type":""}],"src":"850:141:20"},{"body":{"nodeType":"YulBlock","src":"1071:277:20","statements":[{"body":{"nodeType":"YulBlock","src":"1120:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"1122:77:20"},"nodeType":"YulFunctionCall","src":"1122:79:20"},"nodeType":"YulExpressionStatement","src":"1122:79:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1099:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"1107:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1095:3:20"},"nodeType":"YulFunctionCall","src":"1095:17:20"},{"name":"end","nodeType":"YulIdentifier","src":"1114:3:20"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1091:3:20"},"nodeType":"YulFunctionCall","src":"1091:27:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1084:6:20"},"nodeType":"YulFunctionCall","src":"1084:35:20"},"nodeType":"YulIf","src":"1081:122:20"},{"nodeType":"YulVariableDeclaration","src":"1212:34:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1239:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1226:12:20"},"nodeType":"YulFunctionCall","src":"1226:20:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1216:6:20","type":""}]},{"nodeType":"YulAssignment","src":"1255:87:20","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1315:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"1323:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1311:3:20"},"nodeType":"YulFunctionCall","src":"1311:17:20"},{"name":"length","nodeType":"YulIdentifier","src":"1330:6:20"},{"name":"end","nodeType":"YulIdentifier","src":"1338:3:20"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"1264:46:20"},"nodeType":"YulFunctionCall","src":"1264:78:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1255:5:20"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1049:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"1057:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1065:5:20","type":""}],"src":"1010:338:20"},{"body":{"nodeType":"YulBlock","src":"1406:87:20","statements":[{"nodeType":"YulAssignment","src":"1416:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1438:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1425:12:20"},"nodeType":"YulFunctionCall","src":"1425:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1416:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1481:5:20"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1454:26:20"},"nodeType":"YulFunctionCall","src":"1454:33:20"},"nodeType":"YulExpressionStatement","src":"1454:33:20"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1384:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"1392:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1400:5:20","type":""}],"src":"1354:139:20"},{"body":{"nodeType":"YulBlock","src":"1565:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"1611:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1613:77:20"},"nodeType":"YulFunctionCall","src":"1613:79:20"},"nodeType":"YulExpressionStatement","src":"1613:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1586:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"1595:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1582:3:20"},"nodeType":"YulFunctionCall","src":"1582:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"1607:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1578:3:20"},"nodeType":"YulFunctionCall","src":"1578:32:20"},"nodeType":"YulIf","src":"1575:119:20"},{"nodeType":"YulBlock","src":"1704:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"1719:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"1733:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1723:6:20","type":""}]},{"nodeType":"YulAssignment","src":"1748:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1783:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"1794:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1779:3:20"},"nodeType":"YulFunctionCall","src":"1779:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1803:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1758:20:20"},"nodeType":"YulFunctionCall","src":"1758:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1748:6:20"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1535:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1546:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1558:6:20","type":""}],"src":"1499:329:20"},{"body":{"nodeType":"YulBlock","src":"1917:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"1963:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1965:77:20"},"nodeType":"YulFunctionCall","src":"1965:79:20"},"nodeType":"YulExpressionStatement","src":"1965:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1938:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"1947:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1934:3:20"},"nodeType":"YulFunctionCall","src":"1934:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"1959:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1930:3:20"},"nodeType":"YulFunctionCall","src":"1930:32:20"},"nodeType":"YulIf","src":"1927:119:20"},{"nodeType":"YulBlock","src":"2056:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2071:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"2085:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2075:6:20","type":""}]},{"nodeType":"YulAssignment","src":"2100:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2135:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2146:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2131:3:20"},"nodeType":"YulFunctionCall","src":"2131:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2155:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2110:20:20"},"nodeType":"YulFunctionCall","src":"2110:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2100:6:20"}]}]},{"nodeType":"YulBlock","src":"2183:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2198:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"2212:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2202:6:20","type":""}]},{"nodeType":"YulAssignment","src":"2228:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2263:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2274:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2259:3:20"},"nodeType":"YulFunctionCall","src":"2259:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2283:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2238:20:20"},"nodeType":"YulFunctionCall","src":"2238:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2228:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1879:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1890:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1902:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1910:6:20","type":""}],"src":"1834:474:20"},{"body":{"nodeType":"YulBlock","src":"2414:519:20","statements":[{"body":{"nodeType":"YulBlock","src":"2460:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2462:77:20"},"nodeType":"YulFunctionCall","src":"2462:79:20"},"nodeType":"YulExpressionStatement","src":"2462:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2435:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"2444:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2431:3:20"},"nodeType":"YulFunctionCall","src":"2431:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"2456:2:20","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2427:3:20"},"nodeType":"YulFunctionCall","src":"2427:32:20"},"nodeType":"YulIf","src":"2424:119:20"},{"nodeType":"YulBlock","src":"2553:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2568:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"2582:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2572:6:20","type":""}]},{"nodeType":"YulAssignment","src":"2597:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2632:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2643:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2628:3:20"},"nodeType":"YulFunctionCall","src":"2628:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2652:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2607:20:20"},"nodeType":"YulFunctionCall","src":"2607:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2597:6:20"}]}]},{"nodeType":"YulBlock","src":"2680:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2695:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"2709:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2699:6:20","type":""}]},{"nodeType":"YulAssignment","src":"2725:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2760:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2771:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2756:3:20"},"nodeType":"YulFunctionCall","src":"2756:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2780:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2735:20:20"},"nodeType":"YulFunctionCall","src":"2735:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2725:6:20"}]}]},{"nodeType":"YulBlock","src":"2808:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2823:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"2837:2:20","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2827:6:20","type":""}]},{"nodeType":"YulAssignment","src":"2853:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2888:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2899:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2884:3:20"},"nodeType":"YulFunctionCall","src":"2884:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2908:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2863:20:20"},"nodeType":"YulFunctionCall","src":"2863:53:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2853:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2368:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2379:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2391:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2399:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2407:6:20","type":""}],"src":"2314:619:20"},{"body":{"nodeType":"YulBlock","src":"3065:817:20","statements":[{"body":{"nodeType":"YulBlock","src":"3112:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3114:77:20"},"nodeType":"YulFunctionCall","src":"3114:79:20"},"nodeType":"YulExpressionStatement","src":"3114:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3086:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"3095:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3082:3:20"},"nodeType":"YulFunctionCall","src":"3082:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"3107:3:20","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3078:3:20"},"nodeType":"YulFunctionCall","src":"3078:33:20"},"nodeType":"YulIf","src":"3075:120:20"},{"nodeType":"YulBlock","src":"3205:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3220:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"3234:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3224:6:20","type":""}]},{"nodeType":"YulAssignment","src":"3249:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3284:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"3295:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3280:3:20"},"nodeType":"YulFunctionCall","src":"3280:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3304:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3259:20:20"},"nodeType":"YulFunctionCall","src":"3259:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3249:6:20"}]}]},{"nodeType":"YulBlock","src":"3332:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3347:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"3361:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3351:6:20","type":""}]},{"nodeType":"YulAssignment","src":"3377:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3412:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"3423:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3408:3:20"},"nodeType":"YulFunctionCall","src":"3408:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3432:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3387:20:20"},"nodeType":"YulFunctionCall","src":"3387:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3377:6:20"}]}]},{"nodeType":"YulBlock","src":"3460:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3475:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"3489:2:20","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3479:6:20","type":""}]},{"nodeType":"YulAssignment","src":"3505:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3540:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"3551:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3536:3:20"},"nodeType":"YulFunctionCall","src":"3536:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3560:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3515:20:20"},"nodeType":"YulFunctionCall","src":"3515:53:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3505:6:20"}]}]},{"nodeType":"YulBlock","src":"3588:287:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3603:46:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3634:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3645:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3630:3:20"},"nodeType":"YulFunctionCall","src":"3630:18:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3617:12:20"},"nodeType":"YulFunctionCall","src":"3617:32:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3607:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"3696:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3698:77:20"},"nodeType":"YulFunctionCall","src":"3698:79:20"},"nodeType":"YulExpressionStatement","src":"3698:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3668:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"3676:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3665:2:20"},"nodeType":"YulFunctionCall","src":"3665:30:20"},"nodeType":"YulIf","src":"3662:117:20"},{"nodeType":"YulAssignment","src":"3793:72:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3837:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"3848:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3833:3:20"},"nodeType":"YulFunctionCall","src":"3833:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3857:7:20"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3803:29:20"},"nodeType":"YulFunctionCall","src":"3803:62:20"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3793:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3011:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3022:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3034:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3042:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3050:6:20","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3058:6:20","type":""}],"src":"2939:943:20"},{"body":{"nodeType":"YulBlock","src":"3968:388:20","statements":[{"body":{"nodeType":"YulBlock","src":"4014:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4016:77:20"},"nodeType":"YulFunctionCall","src":"4016:79:20"},"nodeType":"YulExpressionStatement","src":"4016:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3989:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"3998:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3985:3:20"},"nodeType":"YulFunctionCall","src":"3985:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"4010:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3981:3:20"},"nodeType":"YulFunctionCall","src":"3981:32:20"},"nodeType":"YulIf","src":"3978:119:20"},{"nodeType":"YulBlock","src":"4107:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4122:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4136:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4126:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4151:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4186:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4197:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4182:3:20"},"nodeType":"YulFunctionCall","src":"4182:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4206:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4161:20:20"},"nodeType":"YulFunctionCall","src":"4161:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4151:6:20"}]}]},{"nodeType":"YulBlock","src":"4234:115:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4249:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4263:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4253:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4279:60:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4311:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4322:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4307:3:20"},"nodeType":"YulFunctionCall","src":"4307:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4331:7:20"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"4289:17:20"},"nodeType":"YulFunctionCall","src":"4289:50:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4279:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3930:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3941:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3953:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3961:6:20","type":""}],"src":"3888:468:20"},{"body":{"nodeType":"YulBlock","src":"4445:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"4491:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4493:77:20"},"nodeType":"YulFunctionCall","src":"4493:79:20"},"nodeType":"YulExpressionStatement","src":"4493:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4466:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"4475:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4462:3:20"},"nodeType":"YulFunctionCall","src":"4462:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"4487:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4458:3:20"},"nodeType":"YulFunctionCall","src":"4458:32:20"},"nodeType":"YulIf","src":"4455:119:20"},{"nodeType":"YulBlock","src":"4584:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4599:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4613:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4603:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4628:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4663:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4674:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4659:3:20"},"nodeType":"YulFunctionCall","src":"4659:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4683:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4638:20:20"},"nodeType":"YulFunctionCall","src":"4638:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4628:6:20"}]}]},{"nodeType":"YulBlock","src":"4711:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4726:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4740:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4730:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4756:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4791:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4802:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4787:3:20"},"nodeType":"YulFunctionCall","src":"4787:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4811:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4766:20:20"},"nodeType":"YulFunctionCall","src":"4766:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4756:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4407:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4418:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4430:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4438:6:20","type":""}],"src":"4362:474:20"},{"body":{"nodeType":"YulBlock","src":"4907:262:20","statements":[{"body":{"nodeType":"YulBlock","src":"4953:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4955:77:20"},"nodeType":"YulFunctionCall","src":"4955:79:20"},"nodeType":"YulExpressionStatement","src":"4955:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4928:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"4937:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4924:3:20"},"nodeType":"YulFunctionCall","src":"4924:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"4949:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4920:3:20"},"nodeType":"YulFunctionCall","src":"4920:32:20"},"nodeType":"YulIf","src":"4917:119:20"},{"nodeType":"YulBlock","src":"5046:116:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5061:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5075:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5065:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5090:62:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5124:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5135:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5120:3:20"},"nodeType":"YulFunctionCall","src":"5120:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5144:7:20"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"5100:19:20"},"nodeType":"YulFunctionCall","src":"5100:52:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5090:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4877:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4888:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4900:6:20","type":""}],"src":"4842:327:20"},{"body":{"nodeType":"YulBlock","src":"5251:273:20","statements":[{"body":{"nodeType":"YulBlock","src":"5297:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5299:77:20"},"nodeType":"YulFunctionCall","src":"5299:79:20"},"nodeType":"YulExpressionStatement","src":"5299:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5272:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"5281:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5268:3:20"},"nodeType":"YulFunctionCall","src":"5268:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"5293:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5264:3:20"},"nodeType":"YulFunctionCall","src":"5264:32:20"},"nodeType":"YulIf","src":"5261:119:20"},{"nodeType":"YulBlock","src":"5390:127:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5405:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5419:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5409:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5434:73:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5479:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5490:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5475:3:20"},"nodeType":"YulFunctionCall","src":"5475:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5499:7:20"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"5444:30:20"},"nodeType":"YulFunctionCall","src":"5444:63:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5434:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5221:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5232:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5244:6:20","type":""}],"src":"5175:349:20"},{"body":{"nodeType":"YulBlock","src":"5596:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"5642:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5644:77:20"},"nodeType":"YulFunctionCall","src":"5644:79:20"},"nodeType":"YulExpressionStatement","src":"5644:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5617:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"5626:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5613:3:20"},"nodeType":"YulFunctionCall","src":"5613:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"5638:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5609:3:20"},"nodeType":"YulFunctionCall","src":"5609:32:20"},"nodeType":"YulIf","src":"5606:119:20"},{"nodeType":"YulBlock","src":"5735:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5750:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5764:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5754:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5779:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5814:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5825:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5810:3:20"},"nodeType":"YulFunctionCall","src":"5810:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5834:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5789:20:20"},"nodeType":"YulFunctionCall","src":"5789:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5779:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5566:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5577:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5589:6:20","type":""}],"src":"5530:329:20"},{"body":{"nodeType":"YulBlock","src":"5930:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5947:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5970:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5952:17:20"},"nodeType":"YulFunctionCall","src":"5952:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5940:6:20"},"nodeType":"YulFunctionCall","src":"5940:37:20"},"nodeType":"YulExpressionStatement","src":"5940:37:20"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5918:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5925:3:20","type":""}],"src":"5865:118:20"},{"body":{"nodeType":"YulBlock","src":"6048:50:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6065:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6085:5:20"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6070:14:20"},"nodeType":"YulFunctionCall","src":"6070:21:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6058:6:20"},"nodeType":"YulFunctionCall","src":"6058:34:20"},"nodeType":"YulExpressionStatement","src":"6058:34:20"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6036:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6043:3:20","type":""}],"src":"5989:109:20"},{"body":{"nodeType":"YulBlock","src":"6194:270:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6204:52:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6250:5:20"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"6218:31:20"},"nodeType":"YulFunctionCall","src":"6218:38:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6208:6:20","type":""}]},{"nodeType":"YulAssignment","src":"6265:77:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6330:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"6335:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6272:57:20"},"nodeType":"YulFunctionCall","src":"6272:70:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6265:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6377:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"6384:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6373:3:20"},"nodeType":"YulFunctionCall","src":"6373:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"6391:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"6396:6:20"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"6351:21:20"},"nodeType":"YulFunctionCall","src":"6351:52:20"},"nodeType":"YulExpressionStatement","src":"6351:52:20"},{"nodeType":"YulAssignment","src":"6412:46:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6423:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6450:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6428:21:20"},"nodeType":"YulFunctionCall","src":"6428:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6419:3:20"},"nodeType":"YulFunctionCall","src":"6419:39:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6412:3:20"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6175:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6182:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6190:3:20","type":""}],"src":"6104:360:20"},{"body":{"nodeType":"YulBlock","src":"6562:272:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6572:53:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6619:5:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6586:32:20"},"nodeType":"YulFunctionCall","src":"6586:39:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6576:6:20","type":""}]},{"nodeType":"YulAssignment","src":"6634:78:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6700:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"6705:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6641:58:20"},"nodeType":"YulFunctionCall","src":"6641:71:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6634:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6747:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"6754:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6743:3:20"},"nodeType":"YulFunctionCall","src":"6743:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"6761:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"6766:6:20"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"6721:21:20"},"nodeType":"YulFunctionCall","src":"6721:52:20"},"nodeType":"YulExpressionStatement","src":"6721:52:20"},{"nodeType":"YulAssignment","src":"6782:46:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6793:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6820:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6798:21:20"},"nodeType":"YulFunctionCall","src":"6798:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6789:3:20"},"nodeType":"YulFunctionCall","src":"6789:39:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6782:3:20"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6543:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6550:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6558:3:20","type":""}],"src":"6470:364:20"},{"body":{"nodeType":"YulBlock","src":"6950:267:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6960:53:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7007:5:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6974:32:20"},"nodeType":"YulFunctionCall","src":"6974:39:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6964:6:20","type":""}]},{"nodeType":"YulAssignment","src":"7022:96:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7106:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"7111:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"7029:76:20"},"nodeType":"YulFunctionCall","src":"7029:89:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7022:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7153:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"7160:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7149:3:20"},"nodeType":"YulFunctionCall","src":"7149:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"7167:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"7172:6:20"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"7127:21:20"},"nodeType":"YulFunctionCall","src":"7127:52:20"},"nodeType":"YulExpressionStatement","src":"7127:52:20"},{"nodeType":"YulAssignment","src":"7188:23:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7199:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"7204:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7195:3:20"},"nodeType":"YulFunctionCall","src":"7195:16:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7188:3:20"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6931:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6938:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6946:3:20","type":""}],"src":"6840:377:20"},{"body":{"nodeType":"YulBlock","src":"7369:220:20","statements":[{"nodeType":"YulAssignment","src":"7379:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7445:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"7450:2:20","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7386:58:20"},"nodeType":"YulFunctionCall","src":"7386:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7379:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7551:3:20"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"7462:88:20"},"nodeType":"YulFunctionCall","src":"7462:93:20"},"nodeType":"YulExpressionStatement","src":"7462:93:20"},{"nodeType":"YulAssignment","src":"7564:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7575:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"7580:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7571:3:20"},"nodeType":"YulFunctionCall","src":"7571:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7564:3:20"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7357:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7365:3:20","type":""}],"src":"7223:366:20"},{"body":{"nodeType":"YulBlock","src":"7741:220:20","statements":[{"nodeType":"YulAssignment","src":"7751:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7817:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"7822:2:20","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7758:58:20"},"nodeType":"YulFunctionCall","src":"7758:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7751:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7923:3:20"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"7834:88:20"},"nodeType":"YulFunctionCall","src":"7834:93:20"},"nodeType":"YulExpressionStatement","src":"7834:93:20"},{"nodeType":"YulAssignment","src":"7936:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7947:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"7952:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7943:3:20"},"nodeType":"YulFunctionCall","src":"7943:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7936:3:20"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7729:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7737:3:20","type":""}],"src":"7595:366:20"},{"body":{"nodeType":"YulBlock","src":"8113:220:20","statements":[{"nodeType":"YulAssignment","src":"8123:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8189:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"8194:2:20","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8130:58:20"},"nodeType":"YulFunctionCall","src":"8130:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8123:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8295:3:20"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"8206:88:20"},"nodeType":"YulFunctionCall","src":"8206:93:20"},"nodeType":"YulExpressionStatement","src":"8206:93:20"},{"nodeType":"YulAssignment","src":"8308:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8319:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"8324:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8315:3:20"},"nodeType":"YulFunctionCall","src":"8315:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8308:3:20"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8101:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8109:3:20","type":""}],"src":"7967:366:20"},{"body":{"nodeType":"YulBlock","src":"8485:220:20","statements":[{"nodeType":"YulAssignment","src":"8495:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8561:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"8566:2:20","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8502:58:20"},"nodeType":"YulFunctionCall","src":"8502:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8495:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8667:3:20"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"8578:88:20"},"nodeType":"YulFunctionCall","src":"8578:93:20"},"nodeType":"YulExpressionStatement","src":"8578:93:20"},{"nodeType":"YulAssignment","src":"8680:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8691:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"8696:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8687:3:20"},"nodeType":"YulFunctionCall","src":"8687:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8680:3:20"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8473:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8481:3:20","type":""}],"src":"8339:366:20"},{"body":{"nodeType":"YulBlock","src":"8857:220:20","statements":[{"nodeType":"YulAssignment","src":"8867:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8933:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"8938:2:20","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8874:58:20"},"nodeType":"YulFunctionCall","src":"8874:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8867:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9039:3:20"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"8950:88:20"},"nodeType":"YulFunctionCall","src":"8950:93:20"},"nodeType":"YulExpressionStatement","src":"8950:93:20"},{"nodeType":"YulAssignment","src":"9052:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9063:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"9068:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9059:3:20"},"nodeType":"YulFunctionCall","src":"9059:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9052:3:20"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8845:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8853:3:20","type":""}],"src":"8711:366:20"},{"body":{"nodeType":"YulBlock","src":"9229:220:20","statements":[{"nodeType":"YulAssignment","src":"9239:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9305:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"9310:2:20","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9246:58:20"},"nodeType":"YulFunctionCall","src":"9246:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9239:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9411:3:20"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"9322:88:20"},"nodeType":"YulFunctionCall","src":"9322:93:20"},"nodeType":"YulExpressionStatement","src":"9322:93:20"},{"nodeType":"YulAssignment","src":"9424:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9435:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"9440:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9431:3:20"},"nodeType":"YulFunctionCall","src":"9431:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9424:3:20"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9217:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9225:3:20","type":""}],"src":"9083:366:20"},{"body":{"nodeType":"YulBlock","src":"9601:220:20","statements":[{"nodeType":"YulAssignment","src":"9611:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9677:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"9682:2:20","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9618:58:20"},"nodeType":"YulFunctionCall","src":"9618:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9611:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9783:3:20"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"9694:88:20"},"nodeType":"YulFunctionCall","src":"9694:93:20"},"nodeType":"YulExpressionStatement","src":"9694:93:20"},{"nodeType":"YulAssignment","src":"9796:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9807:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"9812:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9803:3:20"},"nodeType":"YulFunctionCall","src":"9803:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9796:3:20"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9589:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9597:3:20","type":""}],"src":"9455:366:20"},{"body":{"nodeType":"YulBlock","src":"9973:220:20","statements":[{"nodeType":"YulAssignment","src":"9983:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10049:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"10054:2:20","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9990:58:20"},"nodeType":"YulFunctionCall","src":"9990:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9983:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10155:3:20"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"10066:88:20"},"nodeType":"YulFunctionCall","src":"10066:93:20"},"nodeType":"YulExpressionStatement","src":"10066:93:20"},{"nodeType":"YulAssignment","src":"10168:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10179:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"10184:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10175:3:20"},"nodeType":"YulFunctionCall","src":"10175:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10168:3:20"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9961:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9969:3:20","type":""}],"src":"9827:366:20"},{"body":{"nodeType":"YulBlock","src":"10345:220:20","statements":[{"nodeType":"YulAssignment","src":"10355:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10421:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"10426:2:20","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10362:58:20"},"nodeType":"YulFunctionCall","src":"10362:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10355:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10527:3:20"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"10438:88:20"},"nodeType":"YulFunctionCall","src":"10438:93:20"},"nodeType":"YulExpressionStatement","src":"10438:93:20"},{"nodeType":"YulAssignment","src":"10540:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10551:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"10556:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10547:3:20"},"nodeType":"YulFunctionCall","src":"10547:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10540:3:20"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10333:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10341:3:20","type":""}],"src":"10199:366:20"},{"body":{"nodeType":"YulBlock","src":"10636:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10653:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10676:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10658:17:20"},"nodeType":"YulFunctionCall","src":"10658:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10646:6:20"},"nodeType":"YulFunctionCall","src":"10646:37:20"},"nodeType":"YulExpressionStatement","src":"10646:37:20"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10624:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10631:3:20","type":""}],"src":"10571:118:20"},{"body":{"nodeType":"YulBlock","src":"10879:251:20","statements":[{"nodeType":"YulAssignment","src":"10890:102:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10979:6:20"},{"name":"pos","nodeType":"YulIdentifier","src":"10988:3:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"10897:81:20"},"nodeType":"YulFunctionCall","src":"10897:95:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10890:3:20"}]},{"nodeType":"YulAssignment","src":"11002:102:20","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11091:6:20"},{"name":"pos","nodeType":"YulIdentifier","src":"11100:3:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"11009:81:20"},"nodeType":"YulFunctionCall","src":"11009:95:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11002:3:20"}]},{"nodeType":"YulAssignment","src":"11114:10:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"11121:3:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11114:3:20"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10850:3:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10856:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10864:6:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10875:3:20","type":""}],"src":"10695:435:20"},{"body":{"nodeType":"YulBlock","src":"11234:124:20","statements":[{"nodeType":"YulAssignment","src":"11244:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11256:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11267:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11252:3:20"},"nodeType":"YulFunctionCall","src":"11252:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11244:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11324:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11337:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11348:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11333:3:20"},"nodeType":"YulFunctionCall","src":"11333:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11280:43:20"},"nodeType":"YulFunctionCall","src":"11280:71:20"},"nodeType":"YulExpressionStatement","src":"11280:71:20"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11206:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11218:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11229:4:20","type":""}],"src":"11136:222:20"},{"body":{"nodeType":"YulBlock","src":"11564:440:20","statements":[{"nodeType":"YulAssignment","src":"11574:27:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11586:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11597:3:20","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11582:3:20"},"nodeType":"YulFunctionCall","src":"11582:19:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11574:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11655:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11668:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11679:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11664:3:20"},"nodeType":"YulFunctionCall","src":"11664:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11611:43:20"},"nodeType":"YulFunctionCall","src":"11611:71:20"},"nodeType":"YulExpressionStatement","src":"11611:71:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11736:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11749:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11760:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11745:3:20"},"nodeType":"YulFunctionCall","src":"11745:18:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11692:43:20"},"nodeType":"YulFunctionCall","src":"11692:72:20"},"nodeType":"YulExpressionStatement","src":"11692:72:20"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11818:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11831:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11842:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11827:3:20"},"nodeType":"YulFunctionCall","src":"11827:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"11774:43:20"},"nodeType":"YulFunctionCall","src":"11774:72:20"},"nodeType":"YulExpressionStatement","src":"11774:72:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11867:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"11878:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11863:3:20"},"nodeType":"YulFunctionCall","src":"11863:18:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11887:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"11893:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11883:3:20"},"nodeType":"YulFunctionCall","src":"11883:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11856:6:20"},"nodeType":"YulFunctionCall","src":"11856:48:20"},"nodeType":"YulExpressionStatement","src":"11856:48:20"},{"nodeType":"YulAssignment","src":"11913:84:20","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"11983:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"11992:4:20"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11921:61:20"},"nodeType":"YulFunctionCall","src":"11921:76:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11913:4:20"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11512:9:20","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11524:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11532:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11540:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11548:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11559:4:20","type":""}],"src":"11364:640:20"},{"body":{"nodeType":"YulBlock","src":"12102:118:20","statements":[{"nodeType":"YulAssignment","src":"12112:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12124:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"12135:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12120:3:20"},"nodeType":"YulFunctionCall","src":"12120:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12112:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12186:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12199:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"12210:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12195:3:20"},"nodeType":"YulFunctionCall","src":"12195:17:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"12148:37:20"},"nodeType":"YulFunctionCall","src":"12148:65:20"},"nodeType":"YulExpressionStatement","src":"12148:65:20"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12074:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12086:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12097:4:20","type":""}],"src":"12010:210:20"},{"body":{"nodeType":"YulBlock","src":"12344:195:20","statements":[{"nodeType":"YulAssignment","src":"12354:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12366:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"12377:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12362:3:20"},"nodeType":"YulFunctionCall","src":"12362:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12354:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12401:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"12412:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12397:3:20"},"nodeType":"YulFunctionCall","src":"12397:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12420:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"12426:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12416:3:20"},"nodeType":"YulFunctionCall","src":"12416:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12390:6:20"},"nodeType":"YulFunctionCall","src":"12390:47:20"},"nodeType":"YulExpressionStatement","src":"12390:47:20"},{"nodeType":"YulAssignment","src":"12446:86:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12518:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"12527:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12454:63:20"},"nodeType":"YulFunctionCall","src":"12454:78:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12446:4:20"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12316:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12328:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12339:4:20","type":""}],"src":"12226:313:20"},{"body":{"nodeType":"YulBlock","src":"12716:248:20","statements":[{"nodeType":"YulAssignment","src":"12726:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12738:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"12749:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12734:3:20"},"nodeType":"YulFunctionCall","src":"12734:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12726:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12773:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"12784:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12769:3:20"},"nodeType":"YulFunctionCall","src":"12769:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12792:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"12798:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12788:3:20"},"nodeType":"YulFunctionCall","src":"12788:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12762:6:20"},"nodeType":"YulFunctionCall","src":"12762:47:20"},"nodeType":"YulExpressionStatement","src":"12762:47:20"},{"nodeType":"YulAssignment","src":"12818:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12952:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12826:124:20"},"nodeType":"YulFunctionCall","src":"12826:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12818:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12696:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12711:4:20","type":""}],"src":"12545:419:20"},{"body":{"nodeType":"YulBlock","src":"13141:248:20","statements":[{"nodeType":"YulAssignment","src":"13151:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13163:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13174:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13159:3:20"},"nodeType":"YulFunctionCall","src":"13159:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13151:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13198:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13209:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13194:3:20"},"nodeType":"YulFunctionCall","src":"13194:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13217:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"13223:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13213:3:20"},"nodeType":"YulFunctionCall","src":"13213:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13187:6:20"},"nodeType":"YulFunctionCall","src":"13187:47:20"},"nodeType":"YulExpressionStatement","src":"13187:47:20"},{"nodeType":"YulAssignment","src":"13243:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13377:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13251:124:20"},"nodeType":"YulFunctionCall","src":"13251:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13243:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13121:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13136:4:20","type":""}],"src":"12970:419:20"},{"body":{"nodeType":"YulBlock","src":"13566:248:20","statements":[{"nodeType":"YulAssignment","src":"13576:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13588:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13599:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13584:3:20"},"nodeType":"YulFunctionCall","src":"13584:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13576:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13623:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13634:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13619:3:20"},"nodeType":"YulFunctionCall","src":"13619:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13642:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"13648:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13638:3:20"},"nodeType":"YulFunctionCall","src":"13638:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13612:6:20"},"nodeType":"YulFunctionCall","src":"13612:47:20"},"nodeType":"YulExpressionStatement","src":"13612:47:20"},{"nodeType":"YulAssignment","src":"13668:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13802:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13676:124:20"},"nodeType":"YulFunctionCall","src":"13676:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13668:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13546:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13561:4:20","type":""}],"src":"13395:419:20"},{"body":{"nodeType":"YulBlock","src":"13991:248:20","statements":[{"nodeType":"YulAssignment","src":"14001:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14013:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"14024:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14009:3:20"},"nodeType":"YulFunctionCall","src":"14009:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14001:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14048:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"14059:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14044:3:20"},"nodeType":"YulFunctionCall","src":"14044:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14067:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"14073:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14063:3:20"},"nodeType":"YulFunctionCall","src":"14063:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14037:6:20"},"nodeType":"YulFunctionCall","src":"14037:47:20"},"nodeType":"YulExpressionStatement","src":"14037:47:20"},{"nodeType":"YulAssignment","src":"14093:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14227:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14101:124:20"},"nodeType":"YulFunctionCall","src":"14101:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14093:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13971:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13986:4:20","type":""}],"src":"13820:419:20"},{"body":{"nodeType":"YulBlock","src":"14416:248:20","statements":[{"nodeType":"YulAssignment","src":"14426:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14438:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"14449:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14434:3:20"},"nodeType":"YulFunctionCall","src":"14434:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14426:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14473:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"14484:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14469:3:20"},"nodeType":"YulFunctionCall","src":"14469:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14492:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"14498:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14488:3:20"},"nodeType":"YulFunctionCall","src":"14488:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14462:6:20"},"nodeType":"YulFunctionCall","src":"14462:47:20"},"nodeType":"YulExpressionStatement","src":"14462:47:20"},{"nodeType":"YulAssignment","src":"14518:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14652:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14526:124:20"},"nodeType":"YulFunctionCall","src":"14526:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14518:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14396:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14411:4:20","type":""}],"src":"14245:419:20"},{"body":{"nodeType":"YulBlock","src":"14841:248:20","statements":[{"nodeType":"YulAssignment","src":"14851:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14863:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"14874:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14859:3:20"},"nodeType":"YulFunctionCall","src":"14859:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14851:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14898:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"14909:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14894:3:20"},"nodeType":"YulFunctionCall","src":"14894:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14917:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"14923:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14913:3:20"},"nodeType":"YulFunctionCall","src":"14913:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14887:6:20"},"nodeType":"YulFunctionCall","src":"14887:47:20"},"nodeType":"YulExpressionStatement","src":"14887:47:20"},{"nodeType":"YulAssignment","src":"14943:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15077:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14951:124:20"},"nodeType":"YulFunctionCall","src":"14951:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14943:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14821:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14836:4:20","type":""}],"src":"14670:419:20"},{"body":{"nodeType":"YulBlock","src":"15266:248:20","statements":[{"nodeType":"YulAssignment","src":"15276:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15288:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"15299:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15284:3:20"},"nodeType":"YulFunctionCall","src":"15284:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15276:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15323:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"15334:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15319:3:20"},"nodeType":"YulFunctionCall","src":"15319:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15342:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"15348:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15338:3:20"},"nodeType":"YulFunctionCall","src":"15338:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15312:6:20"},"nodeType":"YulFunctionCall","src":"15312:47:20"},"nodeType":"YulExpressionStatement","src":"15312:47:20"},{"nodeType":"YulAssignment","src":"15368:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15502:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15376:124:20"},"nodeType":"YulFunctionCall","src":"15376:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15368:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15246:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15261:4:20","type":""}],"src":"15095:419:20"},{"body":{"nodeType":"YulBlock","src":"15691:248:20","statements":[{"nodeType":"YulAssignment","src":"15701:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15713:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"15724:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15709:3:20"},"nodeType":"YulFunctionCall","src":"15709:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15701:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15748:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"15759:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15744:3:20"},"nodeType":"YulFunctionCall","src":"15744:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15767:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"15773:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15763:3:20"},"nodeType":"YulFunctionCall","src":"15763:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15737:6:20"},"nodeType":"YulFunctionCall","src":"15737:47:20"},"nodeType":"YulExpressionStatement","src":"15737:47:20"},{"nodeType":"YulAssignment","src":"15793:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15927:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15801:124:20"},"nodeType":"YulFunctionCall","src":"15801:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15793:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15671:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15686:4:20","type":""}],"src":"15520:419:20"},{"body":{"nodeType":"YulBlock","src":"16116:248:20","statements":[{"nodeType":"YulAssignment","src":"16126:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16138:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"16149:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16134:3:20"},"nodeType":"YulFunctionCall","src":"16134:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16126:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16173:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"16184:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16169:3:20"},"nodeType":"YulFunctionCall","src":"16169:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16192:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"16198:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16188:3:20"},"nodeType":"YulFunctionCall","src":"16188:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16162:6:20"},"nodeType":"YulFunctionCall","src":"16162:47:20"},"nodeType":"YulExpressionStatement","src":"16162:47:20"},{"nodeType":"YulAssignment","src":"16218:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16352:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16226:124:20"},"nodeType":"YulFunctionCall","src":"16226:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16218:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16096:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16111:4:20","type":""}],"src":"15945:419:20"},{"body":{"nodeType":"YulBlock","src":"16468:124:20","statements":[{"nodeType":"YulAssignment","src":"16478:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16490:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"16501:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16486:3:20"},"nodeType":"YulFunctionCall","src":"16486:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16478:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16558:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16571:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"16582:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16567:3:20"},"nodeType":"YulFunctionCall","src":"16567:17:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"16514:43:20"},"nodeType":"YulFunctionCall","src":"16514:71:20"},"nodeType":"YulExpressionStatement","src":"16514:71:20"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16440:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16452:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16463:4:20","type":""}],"src":"16370:222:20"},{"body":{"nodeType":"YulBlock","src":"16639:88:20","statements":[{"nodeType":"YulAssignment","src":"16649:30:20","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"16659:18:20"},"nodeType":"YulFunctionCall","src":"16659:20:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16649:6:20"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16708:6:20"},{"name":"size","nodeType":"YulIdentifier","src":"16716:4:20"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"16688:19:20"},"nodeType":"YulFunctionCall","src":"16688:33:20"},"nodeType":"YulExpressionStatement","src":"16688:33:20"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"16623:4:20","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"16632:6:20","type":""}],"src":"16598:129:20"},{"body":{"nodeType":"YulBlock","src":"16773:35:20","statements":[{"nodeType":"YulAssignment","src":"16783:19:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16799:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16793:5:20"},"nodeType":"YulFunctionCall","src":"16793:9:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16783:6:20"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"16766:6:20","type":""}],"src":"16733:75:20"},{"body":{"nodeType":"YulBlock","src":"16880:241:20","statements":[{"body":{"nodeType":"YulBlock","src":"16985:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"16987:16:20"},"nodeType":"YulFunctionCall","src":"16987:18:20"},"nodeType":"YulExpressionStatement","src":"16987:18:20"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16957:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"16965:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16954:2:20"},"nodeType":"YulFunctionCall","src":"16954:30:20"},"nodeType":"YulIf","src":"16951:56:20"},{"nodeType":"YulAssignment","src":"17017:37:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17047:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"17025:21:20"},"nodeType":"YulFunctionCall","src":"17025:29:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"17017:4:20"}]},{"nodeType":"YulAssignment","src":"17091:23:20","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"17103:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"17109:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17099:3:20"},"nodeType":"YulFunctionCall","src":"17099:15:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"17091:4:20"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"16864:6:20","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"16875:4:20","type":""}],"src":"16814:307:20"},{"body":{"nodeType":"YulBlock","src":"17185:40:20","statements":[{"nodeType":"YulAssignment","src":"17196:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17212:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17206:5:20"},"nodeType":"YulFunctionCall","src":"17206:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"17196:6:20"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17168:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"17178:6:20","type":""}],"src":"17127:98:20"},{"body":{"nodeType":"YulBlock","src":"17290:40:20","statements":[{"nodeType":"YulAssignment","src":"17301:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17317:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17311:5:20"},"nodeType":"YulFunctionCall","src":"17311:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"17301:6:20"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17273:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"17283:6:20","type":""}],"src":"17231:99:20"},{"body":{"nodeType":"YulBlock","src":"17431:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17448:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"17453:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17441:6:20"},"nodeType":"YulFunctionCall","src":"17441:19:20"},"nodeType":"YulExpressionStatement","src":"17441:19:20"},{"nodeType":"YulAssignment","src":"17469:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17488:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17493:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17484:3:20"},"nodeType":"YulFunctionCall","src":"17484:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17469:11:20"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17403:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"17408:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17419:11:20","type":""}],"src":"17336:168:20"},{"body":{"nodeType":"YulBlock","src":"17606:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17623:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"17628:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17616:6:20"},"nodeType":"YulFunctionCall","src":"17616:19:20"},"nodeType":"YulExpressionStatement","src":"17616:19:20"},{"nodeType":"YulAssignment","src":"17644:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17663:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17668:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17659:3:20"},"nodeType":"YulFunctionCall","src":"17659:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17644:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17578:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"17583:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17594:11:20","type":""}],"src":"17510:169:20"},{"body":{"nodeType":"YulBlock","src":"17799:34:20","statements":[{"nodeType":"YulAssignment","src":"17809:18:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"17824:3:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17809:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17771:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"17776:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17787:11:20","type":""}],"src":"17685:148:20"},{"body":{"nodeType":"YulBlock","src":"17883:261:20","statements":[{"nodeType":"YulAssignment","src":"17893:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17916:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17898:17:20"},"nodeType":"YulFunctionCall","src":"17898:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"17893:1:20"}]},{"nodeType":"YulAssignment","src":"17927:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17950:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17932:17:20"},"nodeType":"YulFunctionCall","src":"17932:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"17927:1:20"}]},{"body":{"nodeType":"YulBlock","src":"18090:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18092:16:20"},"nodeType":"YulFunctionCall","src":"18092:18:20"},"nodeType":"YulExpressionStatement","src":"18092:18:20"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18011:1:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18018:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"18086:1:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18014:3:20"},"nodeType":"YulFunctionCall","src":"18014:74:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18008:2:20"},"nodeType":"YulFunctionCall","src":"18008:81:20"},"nodeType":"YulIf","src":"18005:107:20"},{"nodeType":"YulAssignment","src":"18122:16:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18133:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"18136:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18129:3:20"},"nodeType":"YulFunctionCall","src":"18129:9:20"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"18122:3:20"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17870:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"17873:1:20","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"17879:3:20","type":""}],"src":"17839:305:20"},{"body":{"nodeType":"YulBlock","src":"18195:146:20","statements":[{"nodeType":"YulAssignment","src":"18205:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18228:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"18210:17:20"},"nodeType":"YulFunctionCall","src":"18210:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"18205:1:20"}]},{"nodeType":"YulAssignment","src":"18239:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"18262:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"18244:17:20"},"nodeType":"YulFunctionCall","src":"18244:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"18239:1:20"}]},{"body":{"nodeType":"YulBlock","src":"18286:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18288:16:20"},"nodeType":"YulFunctionCall","src":"18288:18:20"},"nodeType":"YulExpressionStatement","src":"18288:18:20"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18280:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"18283:1:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18277:2:20"},"nodeType":"YulFunctionCall","src":"18277:8:20"},"nodeType":"YulIf","src":"18274:34:20"},{"nodeType":"YulAssignment","src":"18318:17:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18330:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"18333:1:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18326:3:20"},"nodeType":"YulFunctionCall","src":"18326:9:20"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"18318:4:20"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"18181:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"18184:1:20","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"18190:4:20","type":""}],"src":"18150:191:20"},{"body":{"nodeType":"YulBlock","src":"18392:51:20","statements":[{"nodeType":"YulAssignment","src":"18402:35:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18431:5:20"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"18413:17:20"},"nodeType":"YulFunctionCall","src":"18413:24:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18402:7:20"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18374:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18384:7:20","type":""}],"src":"18347:96:20"},{"body":{"nodeType":"YulBlock","src":"18491:48:20","statements":[{"nodeType":"YulAssignment","src":"18501:32:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18526:5:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18519:6:20"},"nodeType":"YulFunctionCall","src":"18519:13:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18512:6:20"},"nodeType":"YulFunctionCall","src":"18512:21:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18501:7:20"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18473:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18483:7:20","type":""}],"src":"18449:90:20"},{"body":{"nodeType":"YulBlock","src":"18589:105:20","statements":[{"nodeType":"YulAssignment","src":"18599:89:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18614:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"18621:66:20","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18610:3:20"},"nodeType":"YulFunctionCall","src":"18610:78:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18599:7:20"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18571:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18581:7:20","type":""}],"src":"18545:149:20"},{"body":{"nodeType":"YulBlock","src":"18745:81:20","statements":[{"nodeType":"YulAssignment","src":"18755:65:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18770:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"18777:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18766:3:20"},"nodeType":"YulFunctionCall","src":"18766:54:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18755:7:20"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18727:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18737:7:20","type":""}],"src":"18700:126:20"},{"body":{"nodeType":"YulBlock","src":"18877:32:20","statements":[{"nodeType":"YulAssignment","src":"18887:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"18898:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18887:7:20"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18859:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18869:7:20","type":""}],"src":"18832:77:20"},{"body":{"nodeType":"YulBlock","src":"18966:103:20","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"18989:3:20"},{"name":"src","nodeType":"YulIdentifier","src":"18994:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"18999:6:20"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"18976:12:20"},"nodeType":"YulFunctionCall","src":"18976:30:20"},"nodeType":"YulExpressionStatement","src":"18976:30:20"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19047:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"19052:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19043:3:20"},"nodeType":"YulFunctionCall","src":"19043:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"19061:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19036:6:20"},"nodeType":"YulFunctionCall","src":"19036:27:20"},"nodeType":"YulExpressionStatement","src":"19036:27:20"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"18948:3:20","type":""},{"name":"dst","nodeType":"YulTypedName","src":"18953:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"18958:6:20","type":""}],"src":"18915:154:20"},{"body":{"nodeType":"YulBlock","src":"19124:258:20","statements":[{"nodeType":"YulVariableDeclaration","src":"19134:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"19143:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"19138:1:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"19203:63:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19228:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"19233:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19224:3:20"},"nodeType":"YulFunctionCall","src":"19224:11:20"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"19247:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"19252:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19243:3:20"},"nodeType":"YulFunctionCall","src":"19243:11:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19237:5:20"},"nodeType":"YulFunctionCall","src":"19237:18:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19217:6:20"},"nodeType":"YulFunctionCall","src":"19217:39:20"},"nodeType":"YulExpressionStatement","src":"19217:39:20"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19164:1:20"},{"name":"length","nodeType":"YulIdentifier","src":"19167:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19161:2:20"},"nodeType":"YulFunctionCall","src":"19161:13:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"19175:19:20","statements":[{"nodeType":"YulAssignment","src":"19177:15:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19186:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"19189:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19182:3:20"},"nodeType":"YulFunctionCall","src":"19182:10:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"19177:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"19157:3:20","statements":[]},"src":"19153:113:20"},{"body":{"nodeType":"YulBlock","src":"19300:76:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19350:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"19355:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19346:3:20"},"nodeType":"YulFunctionCall","src":"19346:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"19364:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19339:6:20"},"nodeType":"YulFunctionCall","src":"19339:27:20"},"nodeType":"YulExpressionStatement","src":"19339:27:20"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19281:1:20"},{"name":"length","nodeType":"YulIdentifier","src":"19284:6:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19278:2:20"},"nodeType":"YulFunctionCall","src":"19278:13:20"},"nodeType":"YulIf","src":"19275:101:20"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"19106:3:20","type":""},{"name":"dst","nodeType":"YulTypedName","src":"19111:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"19116:6:20","type":""}],"src":"19075:307:20"},{"body":{"nodeType":"YulBlock","src":"19439:269:20","statements":[{"nodeType":"YulAssignment","src":"19449:22:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19463:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"19469:1:20","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"19459:3:20"},"nodeType":"YulFunctionCall","src":"19459:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"19449:6:20"}]},{"nodeType":"YulVariableDeclaration","src":"19480:38:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19510:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"19516:1:20","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19506:3:20"},"nodeType":"YulFunctionCall","src":"19506:12:20"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"19484:18:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"19557:51:20","statements":[{"nodeType":"YulAssignment","src":"19571:27:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19585:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"19593:4:20","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19581:3:20"},"nodeType":"YulFunctionCall","src":"19581:17:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"19571:6:20"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"19537:18:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19530:6:20"},"nodeType":"YulFunctionCall","src":"19530:26:20"},"nodeType":"YulIf","src":"19527:81:20"},{"body":{"nodeType":"YulBlock","src":"19660:42:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"19674:16:20"},"nodeType":"YulFunctionCall","src":"19674:18:20"},"nodeType":"YulExpressionStatement","src":"19674:18:20"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"19624:18:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19647:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"19655:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19644:2:20"},"nodeType":"YulFunctionCall","src":"19644:14:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19621:2:20"},"nodeType":"YulFunctionCall","src":"19621:38:20"},"nodeType":"YulIf","src":"19618:84:20"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"19423:4:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"19432:6:20","type":""}],"src":"19388:320:20"},{"body":{"nodeType":"YulBlock","src":"19757:238:20","statements":[{"nodeType":"YulVariableDeclaration","src":"19767:58:20","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19789:6:20"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"19819:4:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"19797:21:20"},"nodeType":"YulFunctionCall","src":"19797:27:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19785:3:20"},"nodeType":"YulFunctionCall","src":"19785:40:20"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"19771:10:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"19936:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"19938:16:20"},"nodeType":"YulFunctionCall","src":"19938:18:20"},"nodeType":"YulExpressionStatement","src":"19938:18:20"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19879:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"19891:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19876:2:20"},"nodeType":"YulFunctionCall","src":"19876:34:20"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19915:10:20"},{"name":"memPtr","nodeType":"YulIdentifier","src":"19927:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19912:2:20"},"nodeType":"YulFunctionCall","src":"19912:22:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"19873:2:20"},"nodeType":"YulFunctionCall","src":"19873:62:20"},"nodeType":"YulIf","src":"19870:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19974:2:20","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19978:10:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19967:6:20"},"nodeType":"YulFunctionCall","src":"19967:22:20"},"nodeType":"YulExpressionStatement","src":"19967:22:20"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19743:6:20","type":""},{"name":"size","nodeType":"YulTypedName","src":"19751:4:20","type":""}],"src":"19714:281:20"},{"body":{"nodeType":"YulBlock","src":"20029:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20046:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20049:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20039:6:20"},"nodeType":"YulFunctionCall","src":"20039:88:20"},"nodeType":"YulExpressionStatement","src":"20039:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20143:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20146:4:20","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20136:6:20"},"nodeType":"YulFunctionCall","src":"20136:15:20"},"nodeType":"YulExpressionStatement","src":"20136:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20167:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20170:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20160:6:20"},"nodeType":"YulFunctionCall","src":"20160:15:20"},"nodeType":"YulExpressionStatement","src":"20160:15:20"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"20001:180:20"},{"body":{"nodeType":"YulBlock","src":"20215:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20232:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20235:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20225:6:20"},"nodeType":"YulFunctionCall","src":"20225:88:20"},"nodeType":"YulExpressionStatement","src":"20225:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20329:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20332:4:20","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20322:6:20"},"nodeType":"YulFunctionCall","src":"20322:15:20"},"nodeType":"YulExpressionStatement","src":"20322:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20353:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20356:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20346:6:20"},"nodeType":"YulFunctionCall","src":"20346:15:20"},"nodeType":"YulExpressionStatement","src":"20346:15:20"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"20187:180:20"},{"body":{"nodeType":"YulBlock","src":"20401:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20418:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20421:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20411:6:20"},"nodeType":"YulFunctionCall","src":"20411:88:20"},"nodeType":"YulExpressionStatement","src":"20411:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20515:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20518:4:20","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20508:6:20"},"nodeType":"YulFunctionCall","src":"20508:15:20"},"nodeType":"YulExpressionStatement","src":"20508:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20539:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20542:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20532:6:20"},"nodeType":"YulFunctionCall","src":"20532:15:20"},"nodeType":"YulExpressionStatement","src":"20532:15:20"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"20373:180:20"},{"body":{"nodeType":"YulBlock","src":"20587:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20604:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20607:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20597:6:20"},"nodeType":"YulFunctionCall","src":"20597:88:20"},"nodeType":"YulExpressionStatement","src":"20597:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20701:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20704:4:20","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20694:6:20"},"nodeType":"YulFunctionCall","src":"20694:15:20"},"nodeType":"YulExpressionStatement","src":"20694:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20725:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20728:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20718:6:20"},"nodeType":"YulFunctionCall","src":"20718:15:20"},"nodeType":"YulExpressionStatement","src":"20718:15:20"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"20559:180:20"},{"body":{"nodeType":"YulBlock","src":"20834:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20851:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20854:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20844:6:20"},"nodeType":"YulFunctionCall","src":"20844:12:20"},"nodeType":"YulExpressionStatement","src":"20844:12:20"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"20745:117:20"},{"body":{"nodeType":"YulBlock","src":"20957:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20974:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20977:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20967:6:20"},"nodeType":"YulFunctionCall","src":"20967:12:20"},"nodeType":"YulExpressionStatement","src":"20967:12:20"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"20868:117:20"},{"body":{"nodeType":"YulBlock","src":"21080:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21097:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21100:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21090:6:20"},"nodeType":"YulFunctionCall","src":"21090:12:20"},"nodeType":"YulExpressionStatement","src":"21090:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"20991:117:20"},{"body":{"nodeType":"YulBlock","src":"21203:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21220:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21223:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21213:6:20"},"nodeType":"YulFunctionCall","src":"21213:12:20"},"nodeType":"YulExpressionStatement","src":"21213:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"21114:117:20"},{"body":{"nodeType":"YulBlock","src":"21285:54:20","statements":[{"nodeType":"YulAssignment","src":"21295:38:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21313:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"21320:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21309:3:20"},"nodeType":"YulFunctionCall","src":"21309:14:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21329:2:20","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21325:3:20"},"nodeType":"YulFunctionCall","src":"21325:7:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21305:3:20"},"nodeType":"YulFunctionCall","src":"21305:28:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"21295:6:20"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21268:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"21278:6:20","type":""}],"src":"21237:102:20"},{"body":{"nodeType":"YulBlock","src":"21451:126:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21473:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"21481:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21469:3:20"},"nodeType":"YulFunctionCall","src":"21469:14:20"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"21485:34:20","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21462:6:20"},"nodeType":"YulFunctionCall","src":"21462:58:20"},"nodeType":"YulExpressionStatement","src":"21462:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21541:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"21549:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21537:3:20"},"nodeType":"YulFunctionCall","src":"21537:15:20"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"21554:15:20","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21530:6:20"},"nodeType":"YulFunctionCall","src":"21530:40:20"},"nodeType":"YulExpressionStatement","src":"21530:40:20"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21443:6:20","type":""}],"src":"21345:232:20"},{"body":{"nodeType":"YulBlock","src":"21689:131:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21711:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"21719:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21707:3:20"},"nodeType":"YulFunctionCall","src":"21707:14:20"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"21723:34:20","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21700:6:20"},"nodeType":"YulFunctionCall","src":"21700:58:20"},"nodeType":"YulExpressionStatement","src":"21700:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21779:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"21787:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21775:3:20"},"nodeType":"YulFunctionCall","src":"21775:15:20"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"21792:20:20","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21768:6:20"},"nodeType":"YulFunctionCall","src":"21768:45:20"},"nodeType":"YulExpressionStatement","src":"21768:45:20"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21681:6:20","type":""}],"src":"21583:237:20"},{"body":{"nodeType":"YulBlock","src":"21932:118:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21954:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"21962:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21950:3:20"},"nodeType":"YulFunctionCall","src":"21950:14:20"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"21966:34:20","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21943:6:20"},"nodeType":"YulFunctionCall","src":"21943:58:20"},"nodeType":"YulExpressionStatement","src":"21943:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22022:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"22030:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22018:3:20"},"nodeType":"YulFunctionCall","src":"22018:15:20"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"22035:7:20","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22011:6:20"},"nodeType":"YulFunctionCall","src":"22011:32:20"},"nodeType":"YulExpressionStatement","src":"22011:32:20"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21924:6:20","type":""}],"src":"21826:224:20"},{"body":{"nodeType":"YulBlock","src":"22162:117:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22184:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"22192:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22180:3:20"},"nodeType":"YulFunctionCall","src":"22180:14:20"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"22196:34:20","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22173:6:20"},"nodeType":"YulFunctionCall","src":"22173:58:20"},"nodeType":"YulExpressionStatement","src":"22173:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22252:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"22260:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22248:3:20"},"nodeType":"YulFunctionCall","src":"22248:15:20"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"22265:6:20","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22241:6:20"},"nodeType":"YulFunctionCall","src":"22241:31:20"},"nodeType":"YulExpressionStatement","src":"22241:31:20"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22154:6:20","type":""}],"src":"22056:223:20"},{"body":{"nodeType":"YulBlock","src":"22391:69:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22413:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"22421:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22409:3:20"},"nodeType":"YulFunctionCall","src":"22409:14:20"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"22425:27:20","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22402:6:20"},"nodeType":"YulFunctionCall","src":"22402:51:20"},"nodeType":"YulExpressionStatement","src":"22402:51:20"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22383:6:20","type":""}],"src":"22285:175:20"},{"body":{"nodeType":"YulBlock","src":"22572:122:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22594:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"22602:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22590:3:20"},"nodeType":"YulFunctionCall","src":"22590:14:20"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"22606:34:20","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22583:6:20"},"nodeType":"YulFunctionCall","src":"22583:58:20"},"nodeType":"YulExpressionStatement","src":"22583:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22662:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"22670:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22658:3:20"},"nodeType":"YulFunctionCall","src":"22658:15:20"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"22675:11:20","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22651:6:20"},"nodeType":"YulFunctionCall","src":"22651:36:20"},"nodeType":"YulExpressionStatement","src":"22651:36:20"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22564:6:20","type":""}],"src":"22466:228:20"},{"body":{"nodeType":"YulBlock","src":"22806:68:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22828:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"22836:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22824:3:20"},"nodeType":"YulFunctionCall","src":"22824:14:20"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"22840:26:20","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22817:6:20"},"nodeType":"YulFunctionCall","src":"22817:50:20"},"nodeType":"YulExpressionStatement","src":"22817:50:20"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22798:6:20","type":""}],"src":"22700:174:20"},{"body":{"nodeType":"YulBlock","src":"22986:114:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23008:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"23016:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23004:3:20"},"nodeType":"YulFunctionCall","src":"23004:14:20"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"23020:34:20","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22997:6:20"},"nodeType":"YulFunctionCall","src":"22997:58:20"},"nodeType":"YulExpressionStatement","src":"22997:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23076:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"23084:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23072:3:20"},"nodeType":"YulFunctionCall","src":"23072:15:20"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"23089:3:20","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23065:6:20"},"nodeType":"YulFunctionCall","src":"23065:28:20"},"nodeType":"YulExpressionStatement","src":"23065:28:20"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22978:6:20","type":""}],"src":"22880:220:20"},{"body":{"nodeType":"YulBlock","src":"23212:142:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23234:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"23242:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23230:3:20"},"nodeType":"YulFunctionCall","src":"23230:14:20"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"23246:34:20","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23223:6:20"},"nodeType":"YulFunctionCall","src":"23223:58:20"},"nodeType":"YulExpressionStatement","src":"23223:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23302:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"23310:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23298:3:20"},"nodeType":"YulFunctionCall","src":"23298:15:20"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"23315:31:20","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23291:6:20"},"nodeType":"YulFunctionCall","src":"23291:56:20"},"nodeType":"YulExpressionStatement","src":"23291:56:20"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23204:6:20","type":""}],"src":"23106:248:20"},{"body":{"nodeType":"YulBlock","src":"23403:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"23460:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23469:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23472:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23462:6:20"},"nodeType":"YulFunctionCall","src":"23462:12:20"},"nodeType":"YulExpressionStatement","src":"23462:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23426:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23451:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"23433:17:20"},"nodeType":"YulFunctionCall","src":"23433:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23423:2:20"},"nodeType":"YulFunctionCall","src":"23423:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23416:6:20"},"nodeType":"YulFunctionCall","src":"23416:43:20"},"nodeType":"YulIf","src":"23413:63:20"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23396:5:20","type":""}],"src":"23360:122:20"},{"body":{"nodeType":"YulBlock","src":"23528:76:20","statements":[{"body":{"nodeType":"YulBlock","src":"23582:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23591:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23594:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23584:6:20"},"nodeType":"YulFunctionCall","src":"23584:12:20"},"nodeType":"YulExpressionStatement","src":"23584:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23551:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23573:5:20"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"23558:14:20"},"nodeType":"YulFunctionCall","src":"23558:21:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23548:2:20"},"nodeType":"YulFunctionCall","src":"23548:32:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23541:6:20"},"nodeType":"YulFunctionCall","src":"23541:40:20"},"nodeType":"YulIf","src":"23538:60:20"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23521:5:20","type":""}],"src":"23488:116:20"},{"body":{"nodeType":"YulBlock","src":"23652:78:20","statements":[{"body":{"nodeType":"YulBlock","src":"23708:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23717:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23720:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23710:6:20"},"nodeType":"YulFunctionCall","src":"23710:12:20"},"nodeType":"YulExpressionStatement","src":"23710:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23675:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23699:5:20"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"23682:16:20"},"nodeType":"YulFunctionCall","src":"23682:23:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23672:2:20"},"nodeType":"YulFunctionCall","src":"23672:34:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23665:6:20"},"nodeType":"YulFunctionCall","src":"23665:42:20"},"nodeType":"YulIf","src":"23662:62:20"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23645:5:20","type":""}],"src":"23610:120:20"},{"body":{"nodeType":"YulBlock","src":"23779:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"23836:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23845:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23848:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23838:6:20"},"nodeType":"YulFunctionCall","src":"23838:12:20"},"nodeType":"YulExpressionStatement","src":"23838:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23802:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23827:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23809:17:20"},"nodeType":"YulFunctionCall","src":"23809:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23799:2:20"},"nodeType":"YulFunctionCall","src":"23799:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23792:6:20"},"nodeType":"YulFunctionCall","src":"23792:43:20"},"nodeType":"YulIf","src":"23789:63:20"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23772:5:20","type":""}],"src":"23736:122:20"}]},"contents":"{\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611863565b6102bc565b6040516100fb9190611b80565b60405180910390f35b61010c61039e565b6040516101199190611b9b565b60405180910390f35b61013c600480360381019061013791906118bd565b610430565b6040516101499190611b19565b60405180910390f35b61016c60048036038101906101679190611823565b610476565b005b6101886004803603810190610183919061170d565b61058e565b005b6101a4600480360381019061019f919061170d565b6105ee565b005b6101c060048036038101906101bb91906118bd565b61060e565b6040516101cd9190611b19565b60405180910390f35b6101f060048036038101906101eb91906116a0565b610695565b6040516101fd9190611cdd565b60405180910390f35b61020e61074d565b60405161021b9190611b9b565b60405180910390f35b61023e600480360381019061023991906117e3565b6107df565b005b61025a60048036038101906102559190611760565b6107f5565b005b610276600480360381019061027191906118bd565b610857565b6040516102839190611b9b565b60405180910390f35b6102a660048036038101906102a191906116cd565b6108bf565b6040516102b39190611b80565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060606580546103ad90611ed1565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611ed1565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611c9d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611cbd565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611bbd565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e58565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611c7d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611c5d565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606066805461075c90611ed1565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611ed1565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e95565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611bbd565b60405180910390fd5b61085184848484611002565b50505050565b6060610862826109bd565b600061086c61105e565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611075565b6040516020016108a7929190611af5565b6040516020818303038152906040525b915050919050565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c68161114d565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611c7d565b60405180910390fd5b50565b600033905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611bfd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611c1d565b60405180910390fd5b610c51838383600161118e565b8273ffffffffffffffffffffffffffffffffffffffff16610c718261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611bfd565b60405180910390fd5b6069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e5383838360016112b4565b505050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb90611c3d565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff59190611b80565b60405180910390a3505050565b61100d848484610b5e565b611019848484846112ba565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90611bdd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161108484611451565b01905060008167ffffffffffffffff8111156110a3576110a2611fc1565b5b6040519080825280601f01601f1916602001820160405280156110d55781602001600182028036833780820191505090505b509050600082602001820190505b600115611142578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112c5761112b611f63565b5b049450600085141561113d57611142565b6110e3565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116f83610e58565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156112ae57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146112225780606860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461121a9190611de7565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112ad5780606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a59190611d91565b925050819055505b5b50505050565b50505050565b60006112db8473ffffffffffffffffffffffffffffffffffffffff166115a4565b15611444578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611304610a08565b8786866040518563ffffffff1660e01b81526004016113269493929190611b34565b602060405180830381600087803b15801561134057600080fd5b505af192505050801561137157506040513d601f19601f8201168201806040525081019061136e9190611890565b60015b6113f4573d80600081146113a1576040519150601f19603f3d011682016040523d82523d6000602084013e6113a6565b606091505b506000815114156113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e390611bdd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611449565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106114af577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816114a5576114a4611f63565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106114ec576d04ee2d6d415b85acef810000000083816114e2576114e1611f63565b5b0492506020810190505b662386f26fc10000831061151b57662386f26fc10000838161151157611510611f63565b5b0492506010810190505b6305f5e1008310611544576305f5e100838161153a57611539611f63565b5b0492506008810190505b612710831061156957612710838161155f5761155e611f63565b5b0492506004810190505b6064831061158c576064838161158257611581611f63565b5b0492506002810190505b600a831061159b576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006115da6115d584611d1d565b611cf8565b9050828152602081018484840111156115f6576115f5611ff5565b5b611601848285611e8f565b509392505050565b60008135905061161881612290565b92915050565b60008135905061162d816122a7565b92915050565b600081359050611642816122be565b92915050565b600081519050611657816122be565b92915050565b600082601f83011261167257611671611ff0565b5b81356116828482602086016115c7565b91505092915050565b60008135905061169a816122d5565b92915050565b6000602082840312156116b6576116b5611fff565b5b60006116c484828501611609565b91505092915050565b600080604083850312156116e4576116e3611fff565b5b60006116f285828601611609565b925050602061170385828601611609565b9150509250929050565b60008060006060848603121561172657611725611fff565b5b600061173486828701611609565b935050602061174586828701611609565b92505060406117568682870161168b565b9150509250925092565b6000806000806080858703121561177a57611779611fff565b5b600061178887828801611609565b945050602061179987828801611609565b93505060406117aa8782880161168b565b925050606085013567ffffffffffffffff8111156117cb576117ca611ffa565b5b6117d78782880161165d565b91505092959194509250565b600080604083850312156117fa576117f9611fff565b5b600061180885828601611609565b92505060206118198582860161161e565b9150509250929050565b6000806040838503121561183a57611839611fff565b5b600061184885828601611609565b92505060206118598582860161168b565b9150509250929050565b60006020828403121561187957611878611fff565b5b600061188784828501611633565b91505092915050565b6000602082840312156118a6576118a5611fff565b5b60006118b484828501611648565b91505092915050565b6000602082840312156118d3576118d2611fff565b5b60006118e18482850161168b565b91505092915050565b6118f381611e1b565b82525050565b61190281611e2d565b82525050565b600061191382611d4e565b61191d8185611d64565b935061192d818560208601611e9e565b61193681612004565b840191505092915050565b600061194c82611d59565b6119568185611d75565b9350611966818560208601611e9e565b61196f81612004565b840191505092915050565b600061198582611d59565b61198f8185611d86565b935061199f818560208601611e9e565b80840191505092915050565b60006119b8602d83611d75565b91506119c382612015565b604082019050919050565b60006119db603283611d75565b91506119e682612064565b604082019050919050565b60006119fe602583611d75565b9150611a09826120b3565b604082019050919050565b6000611a21602483611d75565b9150611a2c82612102565b604082019050919050565b6000611a44601983611d75565b9150611a4f82612151565b602082019050919050565b6000611a67602983611d75565b9150611a728261217a565b604082019050919050565b6000611a8a601883611d75565b9150611a95826121c9565b602082019050919050565b6000611aad602183611d75565b9150611ab8826121f2565b604082019050919050565b6000611ad0603d83611d75565b9150611adb82612241565b604082019050919050565b611aef81611e85565b82525050565b6000611b01828561197a565b9150611b0d828461197a565b91508190509392505050565b6000602082019050611b2e60008301846118ea565b92915050565b6000608082019050611b4960008301876118ea565b611b5660208301866118ea565b611b636040830185611ae6565b8181036060830152611b758184611908565b905095945050505050565b6000602082019050611b9560008301846118f9565b92915050565b60006020820190508181036000830152611bb58184611941565b905092915050565b60006020820190508181036000830152611bd6816119ab565b9050919050565b60006020820190508181036000830152611bf6816119ce565b9050919050565b60006020820190508181036000830152611c16816119f1565b9050919050565b60006020820190508181036000830152611c3681611a14565b9050919050565b60006020820190508181036000830152611c5681611a37565b9050919050565b60006020820190508181036000830152611c7681611a5a565b9050919050565b60006020820190508181036000830152611c9681611a7d565b9050919050565b60006020820190508181036000830152611cb681611aa0565b9050919050565b60006020820190508181036000830152611cd681611ac3565b9050919050565b6000602082019050611cf26000830184611ae6565b92915050565b6000611d02611d13565b9050611d0e8282611f03565b919050565b6000604051905090565b600067ffffffffffffffff821115611d3857611d37611fc1565b5b611d4182612004565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611d9c82611e85565b9150611da783611e85565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ddc57611ddb611f34565b5b828201905092915050565b6000611df282611e85565b9150611dfd83611e85565b925082821015611e1057611e0f611f34565b5b828203905092915050565b6000611e2682611e65565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611ebc578082015181840152602081019050611ea1565b83811115611ecb576000848401525b50505050565b60006002820490506001821680611ee957607f821691505b60208210811415611efd57611efc611f92565b5b50919050565b611f0c82612004565b810181811067ffffffffffffffff82111715611f2b57611f2a611fc1565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b61229981611e1b565b81146122a457600080fd5b50565b6122b081611e2d565b81146122bb57600080fd5b50565b6122c781611e39565b81146122d257600080fd5b50565b6122de81611e85565b81146122e957600080fd5b5056fea26469706673582212207c52a6e6ba475becb58ac6bb7fb7a9701c7240116c9fe87612220a2776a557d764736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1863 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x1B19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1823 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x170D JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x170D JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x1B19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x16A0 JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x17E3 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x16CD JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x65 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1C9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1BBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1C5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x68 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x66 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1BBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1002 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x1AF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x114D JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x69 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x1C1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC51 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x118E JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC71 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x68 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x68 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x67 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE53 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x12B4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFB SWAP1 PUSH2 0x1C3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6A PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x100D DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1019 DUP5 DUP5 DUP5 DUP5 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x1BDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1084 DUP5 PUSH2 0x1451 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10A3 JUMPI PUSH2 0x10A2 PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1142 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x112C JUMPI PUSH2 0x112B PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x113D JUMPI PUSH2 0x1142 JUMP JUMPDEST PUSH2 0x10E3 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x116F DUP4 PUSH2 0xE58 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12AE JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1222 JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x121A SWAP2 SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12AD JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12A5 SWAP2 SWAP1 PUSH2 0x1D91 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12DB DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15A4 JUMP JUMPDEST ISZERO PUSH2 0x1444 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1304 PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1326 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1371 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x136E SWAP2 SWAP1 PUSH2 0x1890 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x13F4 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13A1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13A6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x13EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13E3 SWAP1 PUSH2 0x1BDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x14AF JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x14A5 JUMPI PUSH2 0x14A4 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14EC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x14E2 JUMPI PUSH2 0x14E1 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x151B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1511 JUMPI PUSH2 0x1510 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1544 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x153A JUMPI PUSH2 0x1539 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1569 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x155F JUMPI PUSH2 0x155E PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x158C JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1582 JUMPI PUSH2 0x1581 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x159B JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15DA PUSH2 0x15D5 DUP5 PUSH2 0x1D1D JUMP JUMPDEST PUSH2 0x1CF8 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x15F6 JUMPI PUSH2 0x15F5 PUSH2 0x1FF5 JUMP JUMPDEST JUMPDEST PUSH2 0x1601 DUP5 DUP3 DUP6 PUSH2 0x1E8F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1618 DUP2 PUSH2 0x2290 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x162D DUP2 PUSH2 0x22A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1642 DUP2 PUSH2 0x22BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1657 DUP2 PUSH2 0x22BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1672 JUMPI PUSH2 0x1671 PUSH2 0x1FF0 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1682 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x15C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x169A DUP2 PUSH2 0x22D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16B6 JUMPI PUSH2 0x16B5 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16C4 DUP5 DUP3 DUP6 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16E4 JUMPI PUSH2 0x16E3 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16F2 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1703 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1726 JUMPI PUSH2 0x1725 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1734 DUP7 DUP3 DUP8 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1745 DUP7 DUP3 DUP8 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1756 DUP7 DUP3 DUP8 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x177A JUMPI PUSH2 0x1779 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1788 DUP8 DUP3 DUP9 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1799 DUP8 DUP3 DUP9 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x17AA DUP8 DUP3 DUP9 ADD PUSH2 0x168B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17CB JUMPI PUSH2 0x17CA PUSH2 0x1FFA JUMP JUMPDEST JUMPDEST PUSH2 0x17D7 DUP8 DUP3 DUP9 ADD PUSH2 0x165D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17FA JUMPI PUSH2 0x17F9 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1808 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1819 DUP6 DUP3 DUP7 ADD PUSH2 0x161E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x183A JUMPI PUSH2 0x1839 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1848 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1859 DUP6 DUP3 DUP7 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1879 JUMPI PUSH2 0x1878 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1887 DUP5 DUP3 DUP6 ADD PUSH2 0x1633 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18A6 JUMPI PUSH2 0x18A5 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18B4 DUP5 DUP3 DUP6 ADD PUSH2 0x1648 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18D3 JUMPI PUSH2 0x18D2 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18E1 DUP5 DUP3 DUP6 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18F3 DUP2 PUSH2 0x1E1B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1902 DUP2 PUSH2 0x1E2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1913 DUP3 PUSH2 0x1D4E JUMP JUMPDEST PUSH2 0x191D DUP2 DUP6 PUSH2 0x1D64 JUMP JUMPDEST SWAP4 POP PUSH2 0x192D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1936 DUP2 PUSH2 0x2004 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x194C DUP3 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0x1956 DUP2 DUP6 PUSH2 0x1D75 JUMP JUMPDEST SWAP4 POP PUSH2 0x1966 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x196F DUP2 PUSH2 0x2004 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1985 DUP3 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0x198F DUP2 DUP6 PUSH2 0x1D86 JUMP JUMPDEST SWAP4 POP PUSH2 0x199F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B8 PUSH1 0x2D DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x19C3 DUP3 PUSH2 0x2015 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DB PUSH1 0x32 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x19E6 DUP3 PUSH2 0x2064 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19FE PUSH1 0x25 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A09 DUP3 PUSH2 0x20B3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A21 PUSH1 0x24 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A2C DUP3 PUSH2 0x2102 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A44 PUSH1 0x19 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A4F DUP3 PUSH2 0x2151 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A67 PUSH1 0x29 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A72 DUP3 PUSH2 0x217A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A8A PUSH1 0x18 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A95 DUP3 PUSH2 0x21C9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AAD PUSH1 0x21 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AB8 DUP3 PUSH2 0x21F2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AD0 PUSH1 0x3D DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1ADB DUP3 PUSH2 0x2241 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AEF DUP2 PUSH2 0x1E85 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B01 DUP3 DUP6 PUSH2 0x197A JUMP JUMPDEST SWAP2 POP PUSH2 0x1B0D DUP3 DUP5 PUSH2 0x197A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1B49 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0x1B56 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0x1B63 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1AE6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1B75 DUP2 DUP5 PUSH2 0x1908 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B95 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BB5 DUP2 DUP5 PUSH2 0x1941 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BD6 DUP2 PUSH2 0x19AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BF6 DUP2 PUSH2 0x19CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C16 DUP2 PUSH2 0x19F1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C36 DUP2 PUSH2 0x1A14 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C56 DUP2 PUSH2 0x1A37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C76 DUP2 PUSH2 0x1A5A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C96 DUP2 PUSH2 0x1A7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CB6 DUP2 PUSH2 0x1AA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CD6 DUP2 PUSH2 0x1AC3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CF2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1AE6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D02 PUSH2 0x1D13 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D0E DUP3 DUP3 PUSH2 0x1F03 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1D38 JUMPI PUSH2 0x1D37 PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST PUSH2 0x1D41 DUP3 PUSH2 0x2004 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D9C DUP3 PUSH2 0x1E85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DA7 DUP4 PUSH2 0x1E85 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1DDC JUMPI PUSH2 0x1DDB PUSH2 0x1F34 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DF2 DUP3 PUSH2 0x1E85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DFD DUP4 PUSH2 0x1E85 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1E10 JUMPI PUSH2 0x1E0F PUSH2 0x1F34 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E26 DUP3 PUSH2 0x1E65 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EBC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1EA1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1ECB JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1EE9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1EFD JUMPI PUSH2 0x1EFC PUSH2 0x1F92 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F0C DUP3 PUSH2 0x2004 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1F2B JUMPI PUSH2 0x1F2A PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x2299 DUP2 PUSH2 0x1E1B JUMP JUMPDEST DUP2 EQ PUSH2 0x22A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22B0 DUP2 PUSH2 0x1E2D JUMP JUMPDEST DUP2 EQ PUSH2 0x22BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22C7 DUP2 PUSH2 0x1E39 JUMP JUMPDEST DUP2 EQ PUSH2 0x22D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22DE DUP2 PUSH2 0x1E85 JUMP JUMPDEST DUP2 EQ PUSH2 0x22E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x52A6E6BA475BECB58AC6BB7FB7A9701C7240116C9FE87612220A2776A5 JUMPI 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"731:16715:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1987:358;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2946:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4421:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3943:417;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5098:296;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5460:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2665:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2404:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3108:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4655:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5675:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4874:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1987:358;2125:4;2175:36;2160:51;;;:11;:51;;;;:126;;;;2242:44;2227:59;;;:11;:59;;;;2160:126;:178;;;;2302:36;2326:11;2302:23;:36::i;:::-;2160:178;2141:197;;1987:358;;;:::o;2946:98::-;3000:13;3032:5;3025:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2946:98;:::o;4421:167::-;4497:7;4516:23;4531:7;4516:14;:23::i;:::-;4557:15;:24;4573:7;4557:24;;;;;;;;;;;;;;;;;;;;;4550:31;;4421:167;;;:::o;3943:417::-;4023:13;4039:34;4065:7;4039:25;:34::i;:::-;4023:50;;4097:5;4091:11;;:2;:11;;;;4083:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;4188:5;4172:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;4197:37;4214:5;4221:12;:10;:12::i;:::-;4197:16;:37::i;:::-;4172:62;4151:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;4332:21;4341:2;4345:7;4332:8;:21::i;:::-;4013:347;3943:417;;:::o;5098:296::-;5257:41;5276:12;:10;:12::i;:::-;5290:7;5257:18;:41::i;:::-;5249:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5359:28;5369:4;5375:2;5379:7;5359:9;:28::i;:::-;5098:296;;;:::o;5460:149::-;5563:39;5580:4;5586:2;5590:7;5563:39;;;;;;;;;;;;:16;:39::i;:::-;5460:149;;;:::o;2665:219::-;2737:7;2756:13;2772:17;2781:7;2772:8;:17::i;:::-;2756:33;;2824:1;2807:19;;:5;:19;;;;2799:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2872:5;2865:12;;;2665:219;;;:::o;2404:204::-;2476:7;2520:1;2503:19;;:5;:19;;;;2495:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2585:9;:16;2595:5;2585:16;;;;;;;;;;;;;;;;2578:23;;2404:204;;;:::o;3108:102::-;3164:13;3196:7;3189:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3108:102;:::o;4655:153::-;4749:52;4768:12;:10;:12::i;:::-;4782:8;4792;4749:18;:52::i;:::-;4655:153;;:::o;5675:276::-;5805:41;5824:12;:10;:12::i;:::-;5838:7;5805:18;:41::i;:::-;5797:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5906:38;5920:4;5926:2;5930:7;5939:4;5906:13;:38::i;:::-;5675:276;;;;:::o;3276:::-;3349:13;3374:23;3389:7;3374:14;:23::i;:::-;3408:21;3432:10;:8;:10::i;:::-;3408:34;;3483:1;3465:7;3459:21;:25;:86;;;;;;;;;;;;;;;;;3511:7;3520:18;:7;:16;:18::i;:::-;3494:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3459:86;3452:93;;;3276:276;;;:::o;4874:162::-;4971:4;4994:18;:25;5013:5;4994:25;;;;;;;;;;;;;;;:35;5020:8;4994:35;;;;;;;;;;;;;;;;;;;;;;;;;4987:42;;4874:162;;;;:::o;1051:166:15:-;1136:4;1174:36;1159:51;;;:11;:51;;;;1152:58;;1051:166;;;:::o;13758:133:3:-;13839:16;13847:7;13839;:16::i;:::-;13831:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13758:133;:::o;841:96:13:-;894:7;920:10;913:17;;841:96;:::o;13079:182:3:-;13180:2;13153:15;:24;13169:7;13153:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;13246:7;13242:2;13197:57;;13206:34;13232:7;13206:25;:34::i;:::-;13197:57;;;;;;;;;;;;13079:182;;:::o;7890:272::-;7983:4;7999:13;8015:34;8041:7;8015:25;:34::i;:::-;7999:50;;8078:5;8067:16;;:7;:16;;;:52;;;;8087:32;8104:5;8111:7;8087:16;:32::i;:::-;8067:52;:87;;;;8147:7;8123:31;;:20;8135:7;8123:11;:20::i;:::-;:31;;;8067:87;8059:96;;;7890:272;;;;:::o;11742:1225::-;11877:4;11839:42;;:34;11865:7;11839:25;:34::i;:::-;:42;;;11831:92;;;;;;;;;;;;:::i;:::-;;;;;;;;;11955:1;11941:16;;:2;:16;;;;11933:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;12009:42;12030:4;12036:2;12040:7;12049:1;12009:20;:42::i;:::-;12189:4;12151:42;;:34;12177:7;12151:25;:34::i;:::-;:42;;;12143:92;;;;;;;;;;;;:::i;:::-;;;;;;;;;12304:15;:24;12320:7;12304:24;;;;;;;;;;;;12297:31;;;;;;;;;;;12791:1;12772:9;:15;12782:4;12772:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12823:1;12806:9;:13;12816:2;12806:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12863:2;12844:7;:16;12852:7;12844:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12900:7;12896:2;12881:27;;12890:4;12881:27;;;;;;;;;;;;12919:41;12939:4;12945:2;12949:7;12958:1;12919:19;:41::i;:::-;11742:1225;;;:::o;7188:115::-;7254:7;7280;:16;7288:7;7280:16;;;;;;;;;;;;;;;;;;;;;7273:23;;7188:115;;;:::o;13397:277::-;13517:8;13508:17;;:5;:17;;;;13500:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13603:8;13565:18;:25;13584:5;13565:25;;;;;;;;;;;;;;;:35;13591:8;13565:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13648:8;13626:41;;13641:5;13626:41;;;13658:8;13626:41;;;;;;:::i;:::-;;;;;;;;13397:277;;;:::o;6812:267::-;6924:28;6934:4;6940:2;6944:7;6924:9;:28::i;:::-;6970:47;6993:4;6999:2;7003:7;7012:4;6970:22;:47::i;:::-;6962:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6812:267;;;;:::o;3794:92::-;3845:13;3870:9;;;;;;;;;;;;;;3794:92;:::o;480:707:14:-;536:13;585:14;633:1;602:28;624:5;602:21;:28::i;:::-;:32;585:49;;648:20;682:6;671:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;648:41;;703:11;829:6;825:2;821:15;813:6;809:28;802:35;;864:280;871:4;864:280;;;895:5;;;;;;;;1034:8;1029:2;1022:5;1018:14;1013:30;1008:3;1000:44;1088:2;1079:11;;;;;;:::i;:::-;;;;;1121:1;1112:5;:10;1108:21;;;1124:5;;1108:21;864:280;;;1164:6;1157:13;;;;;480:707;;;:::o;7606:126:3:-;7671:4;7723:1;7694:31;;:17;7703:7;7694:8;:17::i;:::-;:31;;;;7687:38;;7606:126;;;:::o;15974:358::-;16120:1;16108:9;:13;16104:222;;;16157:1;16141:18;;:4;:18;;;16137:85;;16198:9;16179;:15;16189:4;16179:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;16137:85;16253:1;16239:16;;:2;:16;;;16235:81;;16292:9;16275;:13;16285:2;16275:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;16235:81;16104:222;15974:358;;;;:::o;17038:115::-;;;;;:::o;14443:815::-;14554:4;14574:15;:2;:13;;;:15::i;:::-;14570:682;;;14636:2;14609:47;;;14657:12;:10;:12::i;:::-;14671:4;14677:7;14686:4;14609:82;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14605:595;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14886:1;14869:6;:13;:18;14865:321;;;14911:60;;;;;;;;;;:::i;:::-;;;;;;;;14865:321;15138:6;15132:13;15123:6;15119:2;15115:15;15108:38;14605:595;14751:52;;;14741:62;;;:6;:62;;;;14734:69;;;;;14570:682;15237:4;15230:11;;14443:815;;;;;;;:::o;9857:916:18:-;9910:7;9929:14;9946:1;9929:18;;9994:8;9985:5;:17;9981:103;;10031:8;10022:17;;;;;;:::i;:::-;;;;;10067:2;10057:12;;;;9981:103;10110:8;10101:5;:17;10097:103;;10147:8;10138:17;;;;;;:::i;:::-;;;;;10183:2;10173:12;;;;10097:103;10226:8;10217:5;:17;10213:103;;10263:8;10254:17;;;;;;:::i;:::-;;;;;10299:2;10289:12;;;;10213:103;10342:7;10333:5;:16;10329:100;;10378:7;10369:16;;;;;;:::i;:::-;;;;;10413:1;10403:11;;;;10329:100;10455:7;10446:5;:16;10442:100;;10491:7;10482:16;;;;;;:::i;:::-;;;;;10526:1;10516:11;;;;10442:100;10568:7;10559:5;:16;10555:100;;10604:7;10595:16;;;;;;:::i;:::-;;;;;10639:1;10629:11;;;;10555:100;10681:7;10672:5;:16;10668:66;;10718:1;10708:11;;;;10668:66;10760:6;10753:13;;;9857:916;;;:::o;1423:320:11:-;1483:4;1735:1;1713:7;:19;;;:23;1706:30;;1423:320;;;:::o;7:410:20:-;84:5;109:65;125:48;166:6;125:48;:::i;:::-;109:65;:::i;:::-;100:74;;197:6;190:5;183:21;235:4;228:5;224:16;273:3;264:6;259:3;255:16;252:25;249:112;;;280:79;;:::i;:::-;249:112;370:41;404:6;399:3;394;370:41;:::i;:::-;90:327;7:410;;;;;:::o;423:139::-;469:5;507:6;494:20;485:29;;523:33;550:5;523:33;:::i;:::-;423:139;;;;:::o;568:133::-;611:5;649:6;636:20;627:29;;665:30;689:5;665:30;:::i;:::-;568:133;;;;:::o;707:137::-;752:5;790:6;777:20;768:29;;806:32;832:5;806:32;:::i;:::-;707:137;;;;:::o;850:141::-;906:5;937:6;931:13;922:22;;953:32;979:5;953:32;:::i;:::-;850:141;;;;:::o;1010:338::-;1065:5;1114:3;1107:4;1099:6;1095:17;1091:27;1081:122;;1122:79;;:::i;:::-;1081:122;1239:6;1226:20;1264:78;1338:3;1330:6;1323:4;1315:6;1311:17;1264:78;:::i;:::-;1255:87;;1071:277;1010:338;;;;:::o;1354:139::-;1400:5;1438:6;1425:20;1416:29;;1454:33;1481:5;1454:33;:::i;:::-;1354:139;;;;:::o;1499:329::-;1558:6;1607:2;1595:9;1586:7;1582:23;1578:32;1575:119;;;1613:79;;:::i;:::-;1575:119;1733:1;1758:53;1803:7;1794:6;1783:9;1779:22;1758:53;:::i;:::-;1748:63;;1704:117;1499:329;;;;:::o;1834:474::-;1902:6;1910;1959:2;1947:9;1938:7;1934:23;1930:32;1927:119;;;1965:79;;:::i;:::-;1927:119;2085:1;2110:53;2155:7;2146:6;2135:9;2131:22;2110:53;:::i;:::-;2100:63;;2056:117;2212:2;2238:53;2283:7;2274:6;2263:9;2259:22;2238:53;:::i;:::-;2228:63;;2183:118;1834:474;;;;;:::o;2314:619::-;2391:6;2399;2407;2456:2;2444:9;2435:7;2431:23;2427:32;2424:119;;;2462:79;;:::i;:::-;2424:119;2582:1;2607:53;2652:7;2643:6;2632:9;2628:22;2607:53;:::i;:::-;2597:63;;2553:117;2709:2;2735:53;2780:7;2771:6;2760:9;2756:22;2735:53;:::i;:::-;2725:63;;2680:118;2837:2;2863:53;2908:7;2899:6;2888:9;2884:22;2863:53;:::i;:::-;2853:63;;2808:118;2314:619;;;;;:::o;2939:943::-;3034:6;3042;3050;3058;3107:3;3095:9;3086:7;3082:23;3078:33;3075:120;;;3114:79;;:::i;:::-;3075:120;3234:1;3259:53;3304:7;3295:6;3284:9;3280:22;3259:53;:::i;:::-;3249:63;;3205:117;3361:2;3387:53;3432:7;3423:6;3412:9;3408:22;3387:53;:::i;:::-;3377:63;;3332:118;3489:2;3515:53;3560:7;3551:6;3540:9;3536:22;3515:53;:::i;:::-;3505:63;;3460:118;3645:2;3634:9;3630:18;3617:32;3676:18;3668:6;3665:30;3662:117;;;3698:79;;:::i;:::-;3662:117;3803:62;3857:7;3848:6;3837:9;3833:22;3803:62;:::i;:::-;3793:72;;3588:287;2939:943;;;;;;;:::o;3888:468::-;3953:6;3961;4010:2;3998:9;3989:7;3985:23;3981:32;3978:119;;;4016:79;;:::i;:::-;3978:119;4136:1;4161:53;4206:7;4197:6;4186:9;4182:22;4161:53;:::i;:::-;4151:63;;4107:117;4263:2;4289:50;4331:7;4322:6;4311:9;4307:22;4289:50;:::i;:::-;4279:60;;4234:115;3888:468;;;;;:::o;4362:474::-;4430:6;4438;4487:2;4475:9;4466:7;4462:23;4458:32;4455:119;;;4493:79;;:::i;:::-;4455:119;4613:1;4638:53;4683:7;4674:6;4663:9;4659:22;4638:53;:::i;:::-;4628:63;;4584:117;4740:2;4766:53;4811:7;4802:6;4791:9;4787:22;4766:53;:::i;:::-;4756:63;;4711:118;4362:474;;;;;:::o;4842:327::-;4900:6;4949:2;4937:9;4928:7;4924:23;4920:32;4917:119;;;4955:79;;:::i;:::-;4917:119;5075:1;5100:52;5144:7;5135:6;5124:9;5120:22;5100:52;:::i;:::-;5090:62;;5046:116;4842:327;;;;:::o;5175:349::-;5244:6;5293:2;5281:9;5272:7;5268:23;5264:32;5261:119;;;5299:79;;:::i;:::-;5261:119;5419:1;5444:63;5499:7;5490:6;5479:9;5475:22;5444:63;:::i;:::-;5434:73;;5390:127;5175:349;;;;:::o;5530:329::-;5589:6;5638:2;5626:9;5617:7;5613:23;5609:32;5606:119;;;5644:79;;:::i;:::-;5606:119;5764:1;5789:53;5834:7;5825:6;5814:9;5810:22;5789:53;:::i;:::-;5779:63;;5735:117;5530:329;;;;:::o;5865:118::-;5952:24;5970:5;5952:24;:::i;:::-;5947:3;5940:37;5865:118;;:::o;5989:109::-;6070:21;6085:5;6070:21;:::i;:::-;6065:3;6058:34;5989:109;;:::o;6104:360::-;6190:3;6218:38;6250:5;6218:38;:::i;:::-;6272:70;6335:6;6330:3;6272:70;:::i;:::-;6265:77;;6351:52;6396:6;6391:3;6384:4;6377:5;6373:16;6351:52;:::i;:::-;6428:29;6450:6;6428:29;:::i;:::-;6423:3;6419:39;6412:46;;6194:270;6104:360;;;;:::o;6470:364::-;6558:3;6586:39;6619:5;6586:39;:::i;:::-;6641:71;6705:6;6700:3;6641:71;:::i;:::-;6634:78;;6721:52;6766:6;6761:3;6754:4;6747:5;6743:16;6721:52;:::i;:::-;6798:29;6820:6;6798:29;:::i;:::-;6793:3;6789:39;6782:46;;6562:272;6470:364;;;;:::o;6840:377::-;6946:3;6974:39;7007:5;6974:39;:::i;:::-;7029:89;7111:6;7106:3;7029:89;:::i;:::-;7022:96;;7127:52;7172:6;7167:3;7160:4;7153:5;7149:16;7127:52;:::i;:::-;7204:6;7199:3;7195:16;7188:23;;6950:267;6840:377;;;;:::o;7223:366::-;7365:3;7386:67;7450:2;7445:3;7386:67;:::i;:::-;7379:74;;7462:93;7551:3;7462:93;:::i;:::-;7580:2;7575:3;7571:12;7564:19;;7223:366;;;:::o;7595:::-;7737:3;7758:67;7822:2;7817:3;7758:67;:::i;:::-;7751:74;;7834:93;7923:3;7834:93;:::i;:::-;7952:2;7947:3;7943:12;7936:19;;7595:366;;;:::o;7967:::-;8109:3;8130:67;8194:2;8189:3;8130:67;:::i;:::-;8123:74;;8206:93;8295:3;8206:93;:::i;:::-;8324:2;8319:3;8315:12;8308:19;;7967:366;;;:::o;8339:::-;8481:3;8502:67;8566:2;8561:3;8502:67;:::i;:::-;8495:74;;8578:93;8667:3;8578:93;:::i;:::-;8696:2;8691:3;8687:12;8680:19;;8339:366;;;:::o;8711:::-;8853:3;8874:67;8938:2;8933:3;8874:67;:::i;:::-;8867:74;;8950:93;9039:3;8950:93;:::i;:::-;9068:2;9063:3;9059:12;9052:19;;8711:366;;;:::o;9083:::-;9225:3;9246:67;9310:2;9305:3;9246:67;:::i;:::-;9239:74;;9322:93;9411:3;9322:93;:::i;:::-;9440:2;9435:3;9431:12;9424:19;;9083:366;;;:::o;9455:::-;9597:3;9618:67;9682:2;9677:3;9618:67;:::i;:::-;9611:74;;9694:93;9783:3;9694:93;:::i;:::-;9812:2;9807:3;9803:12;9796:19;;9455:366;;;:::o;9827:::-;9969:3;9990:67;10054:2;10049:3;9990:67;:::i;:::-;9983:74;;10066:93;10155:3;10066:93;:::i;:::-;10184:2;10179:3;10175:12;10168:19;;9827:366;;;:::o;10199:::-;10341:3;10362:67;10426:2;10421:3;10362:67;:::i;:::-;10355:74;;10438:93;10527:3;10438:93;:::i;:::-;10556:2;10551:3;10547:12;10540:19;;10199:366;;;:::o;10571:118::-;10658:24;10676:5;10658:24;:::i;:::-;10653:3;10646:37;10571:118;;:::o;10695:435::-;10875:3;10897:95;10988:3;10979:6;10897:95;:::i;:::-;10890:102;;11009:95;11100:3;11091:6;11009:95;:::i;:::-;11002:102;;11121:3;11114:10;;10695:435;;;;;:::o;11136:222::-;11229:4;11267:2;11256:9;11252:18;11244:26;;11280:71;11348:1;11337:9;11333:17;11324:6;11280:71;:::i;:::-;11136:222;;;;:::o;11364:640::-;11559:4;11597:3;11586:9;11582:19;11574:27;;11611:71;11679:1;11668:9;11664:17;11655:6;11611:71;:::i;:::-;11692:72;11760:2;11749:9;11745:18;11736:6;11692:72;:::i;:::-;11774;11842:2;11831:9;11827:18;11818:6;11774:72;:::i;:::-;11893:9;11887:4;11883:20;11878:2;11867:9;11863:18;11856:48;11921:76;11992:4;11983:6;11921:76;:::i;:::-;11913:84;;11364:640;;;;;;;:::o;12010:210::-;12097:4;12135:2;12124:9;12120:18;12112:26;;12148:65;12210:1;12199:9;12195:17;12186:6;12148:65;:::i;:::-;12010:210;;;;:::o;12226:313::-;12339:4;12377:2;12366:9;12362:18;12354:26;;12426:9;12420:4;12416:20;12412:1;12401:9;12397:17;12390:47;12454:78;12527:4;12518:6;12454:78;:::i;:::-;12446:86;;12226:313;;;;:::o;12545:419::-;12711:4;12749:2;12738:9;12734:18;12726:26;;12798:9;12792:4;12788:20;12784:1;12773:9;12769:17;12762:47;12826:131;12952:4;12826:131;:::i;:::-;12818:139;;12545:419;;;:::o;12970:::-;13136:4;13174:2;13163:9;13159:18;13151:26;;13223:9;13217:4;13213:20;13209:1;13198:9;13194:17;13187:47;13251:131;13377:4;13251:131;:::i;:::-;13243:139;;12970:419;;;:::o;13395:::-;13561:4;13599:2;13588:9;13584:18;13576:26;;13648:9;13642:4;13638:20;13634:1;13623:9;13619:17;13612:47;13676:131;13802:4;13676:131;:::i;:::-;13668:139;;13395:419;;;:::o;13820:::-;13986:4;14024:2;14013:9;14009:18;14001:26;;14073:9;14067:4;14063:20;14059:1;14048:9;14044:17;14037:47;14101:131;14227:4;14101:131;:::i;:::-;14093:139;;13820:419;;;:::o;14245:::-;14411:4;14449:2;14438:9;14434:18;14426:26;;14498:9;14492:4;14488:20;14484:1;14473:9;14469:17;14462:47;14526:131;14652:4;14526:131;:::i;:::-;14518:139;;14245:419;;;:::o;14670:::-;14836:4;14874:2;14863:9;14859:18;14851:26;;14923:9;14917:4;14913:20;14909:1;14898:9;14894:17;14887:47;14951:131;15077:4;14951:131;:::i;:::-;14943:139;;14670:419;;;:::o;15095:::-;15261:4;15299:2;15288:9;15284:18;15276:26;;15348:9;15342:4;15338:20;15334:1;15323:9;15319:17;15312:47;15376:131;15502:4;15376:131;:::i;:::-;15368:139;;15095:419;;;:::o;15520:::-;15686:4;15724:2;15713:9;15709:18;15701:26;;15773:9;15767:4;15763:20;15759:1;15748:9;15744:17;15737:47;15801:131;15927:4;15801:131;:::i;:::-;15793:139;;15520:419;;;:::o;15945:::-;16111:4;16149:2;16138:9;16134:18;16126:26;;16198:9;16192:4;16188:20;16184:1;16173:9;16169:17;16162:47;16226:131;16352:4;16226:131;:::i;:::-;16218:139;;15945:419;;;:::o;16370:222::-;16463:4;16501:2;16490:9;16486:18;16478:26;;16514:71;16582:1;16571:9;16567:17;16558:6;16514:71;:::i;:::-;16370:222;;;;:::o;16598:129::-;16632:6;16659:20;;:::i;:::-;16649:30;;16688:33;16716:4;16708:6;16688:33;:::i;:::-;16598:129;;;:::o;16733:75::-;16766:6;16799:2;16793:9;16783:19;;16733:75;:::o;16814:307::-;16875:4;16965:18;16957:6;16954:30;16951:56;;;16987:18;;:::i;:::-;16951:56;17025:29;17047:6;17025:29;:::i;:::-;17017:37;;17109:4;17103;17099:15;17091:23;;16814:307;;;:::o;17127:98::-;17178:6;17212:5;17206:12;17196:22;;17127:98;;;:::o;17231:99::-;17283:6;17317:5;17311:12;17301:22;;17231:99;;;:::o;17336:168::-;17419:11;17453:6;17448:3;17441:19;17493:4;17488:3;17484:14;17469:29;;17336:168;;;;:::o;17510:169::-;17594:11;17628:6;17623:3;17616:19;17668:4;17663:3;17659:14;17644:29;;17510:169;;;;:::o;17685:148::-;17787:11;17824:3;17809:18;;17685:148;;;;:::o;17839:305::-;17879:3;17898:20;17916:1;17898:20;:::i;:::-;17893:25;;17932:20;17950:1;17932:20;:::i;:::-;17927:25;;18086:1;18018:66;18014:74;18011:1;18008:81;18005:107;;;18092:18;;:::i;:::-;18005:107;18136:1;18133;18129:9;18122:16;;17839:305;;;;:::o;18150:191::-;18190:4;18210:20;18228:1;18210:20;:::i;:::-;18205:25;;18244:20;18262:1;18244:20;:::i;:::-;18239:25;;18283:1;18280;18277:8;18274:34;;;18288:18;;:::i;:::-;18274:34;18333:1;18330;18326:9;18318:17;;18150:191;;;;:::o;18347:96::-;18384:7;18413:24;18431:5;18413:24;:::i;:::-;18402:35;;18347:96;;;:::o;18449:90::-;18483:7;18526:5;18519:13;18512:21;18501:32;;18449:90;;;:::o;18545:149::-;18581:7;18621:66;18614:5;18610:78;18599:89;;18545:149;;;:::o;18700:126::-;18737:7;18777:42;18770:5;18766:54;18755:65;;18700:126;;;:::o;18832:77::-;18869:7;18898:5;18887:16;;18832:77;;;:::o;18915:154::-;18999:6;18994:3;18989;18976:30;19061:1;19052:6;19047:3;19043:16;19036:27;18915:154;;;:::o;19075:307::-;19143:1;19153:113;19167:6;19164:1;19161:13;19153:113;;;19252:1;19247:3;19243:11;19237:18;19233:1;19228:3;19224:11;19217:39;19189:2;19186:1;19182:10;19177:15;;19153:113;;;19284:6;19281:1;19278:13;19275:101;;;19364:1;19355:6;19350:3;19346:16;19339:27;19275:101;19124:258;19075:307;;;:::o;19388:320::-;19432:6;19469:1;19463:4;19459:12;19449:22;;19516:1;19510:4;19506:12;19537:18;19527:81;;19593:4;19585:6;19581:17;19571:27;;19527:81;19655:2;19647:6;19644:14;19624:18;19621:38;19618:84;;;19674:18;;:::i;:::-;19618:84;19439:269;19388:320;;;:::o;19714:281::-;19797:27;19819:4;19797:27;:::i;:::-;19789:6;19785:40;19927:6;19915:10;19912:22;19891:18;19879:10;19876:34;19873:62;19870:88;;;19938:18;;:::i;:::-;19870:88;19978:10;19974:2;19967:22;19757:238;19714:281;;:::o;20001:180::-;20049:77;20046:1;20039:88;20146:4;20143:1;20136:15;20170:4;20167:1;20160:15;20187:180;20235:77;20232:1;20225:88;20332:4;20329:1;20322:15;20356:4;20353:1;20346:15;20373:180;20421:77;20418:1;20411:88;20518:4;20515:1;20508:15;20542:4;20539:1;20532:15;20559:180;20607:77;20604:1;20597:88;20704:4;20701:1;20694:15;20728:4;20725:1;20718:15;20745:117;20854:1;20851;20844:12;20868:117;20977:1;20974;20967:12;20991:117;21100:1;21097;21090:12;21114:117;21223:1;21220;21213:12;21237:102;21278:6;21329:2;21325:7;21320:2;21313:5;21309:14;21305:28;21295:38;;21237:102;;;:::o;21345:232::-;21485:34;21481:1;21473:6;21469:14;21462:58;21554:15;21549:2;21541:6;21537:15;21530:40;21345:232;:::o;21583:237::-;21723:34;21719:1;21711:6;21707:14;21700:58;21792:20;21787:2;21779:6;21775:15;21768:45;21583:237;:::o;21826:224::-;21966:34;21962:1;21954:6;21950:14;21943:58;22035:7;22030:2;22022:6;22018:15;22011:32;21826:224;:::o;22056:223::-;22196:34;22192:1;22184:6;22180:14;22173:58;22265:6;22260:2;22252:6;22248:15;22241:31;22056:223;:::o;22285:175::-;22425:27;22421:1;22413:6;22409:14;22402:51;22285:175;:::o;22466:228::-;22606:34;22602:1;22594:6;22590:14;22583:58;22675:11;22670:2;22662:6;22658:15;22651:36;22466:228;:::o;22700:174::-;22840:26;22836:1;22828:6;22824:14;22817:50;22700:174;:::o;22880:220::-;23020:34;23016:1;23008:6;23004:14;22997:58;23089:3;23084:2;23076:6;23072:15;23065:28;22880:220;:::o;23106:248::-;23246:34;23242:1;23234:6;23230:14;23223:58;23315:31;23310:2;23302:6;23298:15;23291:56;23106:248;:::o;23360:122::-;23433:24;23451:5;23433:24;:::i;:::-;23426:5;23423:35;23413:63;;23472:1;23469;23462:12;23413:63;23360:122;:::o;23488:116::-;23558:21;23573:5;23558:21;:::i;:::-;23551:5;23548:32;23538:60;;23594:1;23591;23584:12;23538:60;23488:116;:::o;23610:120::-;23682:23;23699:5;23682:23;:::i;:::-;23675:5;23672:34;23662:62;;23720:1;23717;23710:12;23662:62;23610:120;:::o;23736:122::-;23809:24;23827:5;23809:24;:::i;:::-;23802:5;23799:35;23789:63;;23848:1;23845;23838:12;23789:63;23736:122;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1798800","executionCost":"1898","totalCost":"1800698"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2924","getApproved(uint256)":"5277","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"3025","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"774","symbol()":"infinite","tokenURI(uint256)":"3467","transferFrom(address,address,uint256)":"infinite"},"internal":{"__ERC721_init(string memory,string memory)":"infinite","__ERC721_init_unchained(string memory,string memory)":"infinite","_afterTokenTransfer(address,address,uint256,uint256)":"17","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"2312","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"2248","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721Upgradeable.sol\":\"ERC721Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"./utils/AddressUpgradeable.sol\\\";\\nimport \\\"./utils/ContextUpgradeable.sol\\\";\\nimport \\\"./utils/StringsUpgradeable.sol\\\";\\nimport \\\"./utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"./proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC721Upgradeable,\\n    IERC721MetadataUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 /* firstTokenId */, uint256 batchSize) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xf2bf05a6cccace5e6db8073df92e341623302a582a7e31f524f4fe9888627388\",\"license\":\"MIT\"},\"contracts/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"contracts/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x22833f657ec750aa0058f0127af6b319f0ede114337fa9e32f416ba042bed861\",\"license\":\"MIT\"},\"contracts/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x055fe4c1e942d42899298a11a5501ed8757b5247d914f500d902fd308f4a169f\",\"license\":\"MIT\"},\"contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf75ca4468e9d5395f6810130e622b0c130e44b72ab4de678f34cf93423d980ab\",\"license\":\"MIT\"},\"contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {}\\n\\n    function __Context_init_unchained() internal onlyInitializing {}\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8d195f4fb42b15464ab01ae3fb99b6f5c88526ae9b4187f0774741ad0dc6d3d2\",\"license\":\"MIT\"},\"contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xef702737c98b0296899e4439c17c4a1c96b8dcef7e176805275e782612fce9c7\",\"license\":\"MIT\"},\"contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {}\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xaae49561857f45b234927e952b0be026fa85f05b7fa073212e20b4130d73b917\",\"license\":\"MIT\"},\"contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05d5d914a129f8a74b1cae41b212965882aed82683efc0888665c4b26cd60e54\",\"license\":\"MIT\"},\"contracts/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2817,"contract":"contracts/ERC721Upgradeable.sol:ERC721Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":2820,"contract":"contracts/ERC721Upgradeable.sol:ERC721Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3326,"contract":"contracts/ERC721Upgradeable.sol:ERC721Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3599,"contract":"contracts/ERC721Upgradeable.sol:ERC721Upgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":1448,"contract":"contracts/ERC721Upgradeable.sol:ERC721Upgradeable","label":"_name","offset":0,"slot":"101","type":"t_string_storage"},{"astId":1450,"contract":"contracts/ERC721Upgradeable.sol:ERC721Upgradeable","label":"_symbol","offset":0,"slot":"102","type":"t_string_storage"},{"astId":1454,"contract":"contracts/ERC721Upgradeable.sol:ERC721Upgradeable","label":"_owners","offset":0,"slot":"103","type":"t_mapping(t_uint256,t_address)"},{"astId":1458,"contract":"contracts/ERC721Upgradeable.sol:ERC721Upgradeable","label":"_balances","offset":0,"slot":"104","type":"t_mapping(t_address,t_uint256)"},{"astId":1462,"contract":"contracts/ERC721Upgradeable.sol:ERC721Upgradeable","label":"_tokenApprovals","offset":0,"slot":"105","type":"t_mapping(t_uint256,t_address)"},{"astId":1468,"contract":"contracts/ERC721Upgradeable.sol:ERC721Upgradeable","label":"_operatorApprovals","offset":0,"slot":"106","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2388,"contract":"contracts/ERC721Upgradeable.sol:ERC721Upgradeable","label":"__gap","offset":0,"slot":"107","type":"t_array(t_uint256)44_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)44_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[44]","numberOfBytes":"1408"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x12f9e29068ab1d3b67f914a22cd8fa6fcdb485e13209831750473c067ab4c9f4\",\"license\":\"MIT\"},\"contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/IERC721EnumerableUpgradeable.sol":{"IERC721EnumerableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"tokenByIndex(uint256)":{"details":"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."},"tokenOfOwnerByIndex(address,uint256)":{"details":"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"totalSupply()":{"details":"Returns the total amount of tokens stored by the contract."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional enumeration extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC721EnumerableUpgradeable.sol\":\"IERC721EnumerableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x37f8b3bc6b4c6dbae5b16746296071ba43cd4cb4b0c41957298ca42395aa4c87\",\"license\":\"MIT\"},\"contracts/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x22833f657ec750aa0058f0127af6b319f0ede114337fa9e32f416ba042bed861\",\"license\":\"MIT\"},\"contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/IERC721ReceiverUpgradeable.sol":{"IERC721ReceiverUpgradeable":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC721ReceiverUpgradeable.sol\":\"IERC721ReceiverUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/IERC721Upgradeable.sol":{"IERC721Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC721Upgradeable.sol\":\"IERC721Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x22833f657ec750aa0058f0127af6b319f0ede114337fa9e32f416ba042bed861\",\"license\":\"MIT\"},\"contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6ffea652401e324aaed987e7bd28f560078de8a6647deb1bb6a5359f000dff37\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2678,"contract":"contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/extensions/IERC721MetadataUpgradeable.sol":{"IERC721MetadataUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/IERC721MetadataUpgradeable.sol\":\"IERC721MetadataUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x22833f657ec750aa0058f0127af6b319f0ede114337fa9e32f416ba042bed861\",\"license\":\"MIT\"},\"contracts/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x055fe4c1e942d42899298a11a5501ed8757b5247d914f500d902fd308f4a169f\",\"license\":\"MIT\"},\"contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf75ca4468e9d5395f6810130e622b0c130e44b72ab4de678f34cf93423d980ab\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2817,"contract":"contracts/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":2820,"contract":"contracts/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e9fdcd3865404d323b36c2eccd6789ebb747ccdcdf9928502cc50f0fdc3ce7064736f6c63430008070033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E SWAP16 0xDC 0xD3 DUP7 SLOAD DIV 0xD3 0x23 0xB3 PUSH13 0x2ECCD6789EBB747CCDCDF99285 MUL 0xCC POP CREATE REVERT 0xC3 0xCE PUSH17 0x64736F6C63430008070033000000000000 ","sourceMap":"194:8263:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e9fdcd3865404d323b36c2eccd6789ebb747ccdcdf9928502cc50f0fdc3ce7064736f6c63430008070033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E SWAP16 0xDC 0xD3 DUP7 SLOAD DIV 0xD3 0x23 0xB3 PUSH13 0x2ECCD6789EBB747CCDCDF99285 MUL 0xCC POP CREATE REVERT 0xC3 0xCE PUSH17 0x64736F6C63430008070033000000000000 ","sourceMap":"194:8263:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf75ca4468e9d5395f6810130e622b0c130e44b72ab4de678f34cf93423d980ab\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x055fe4c1e942d42899298a11a5501ed8757b5247d914f500d902fd308f4a169f\",\"license\":\"MIT\"},\"contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf75ca4468e9d5395f6810130e622b0c130e44b72ab4de678f34cf93423d980ab\",\"license\":\"MIT\"},\"contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {}\\n\\n    function __Context_init_unchained() internal onlyInitializing {}\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8d195f4fb42b15464ab01ae3fb99b6f5c88526ae9b4187f0774741ad0dc6d3d2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2817,"contract":"contracts/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":2820,"contract":"contracts/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3326,"contract":"contracts/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220378cda0ddf98f38ef39813a20d1e525ebe3998ce6542b0e1e8eaab69bebabb6564736f6c63430008070033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY DUP13 0xDA 0xD 0xDF SWAP9 RETURN DUP15 RETURN SWAP9 SGT LOG2 0xD 0x1E MSTORE 0x5E 0xBE CODECOPY SWAP9 0xCE PUSH6 0x42B0E1E8EAAB PUSH10 0xBEBABB6564736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"242:2603:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220378cda0ddf98f38ef39813a20d1e525ebe3998ce6542b0e1e8eaab69bebabb6564736f6c63430008070033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY DUP13 0xDA 0xD 0xDF SWAP9 RETURN DUP15 RETURN SWAP9 SGT LOG2 0xD 0x1E MSTORE 0x5E 0xBE CODECOPY SWAP9 0xCE PUSH6 0x42B0E1E8EAAB PUSH10 0xBEBABB6564736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"242:2603:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xef702737c98b0296899e4439c17c4a1c96b8dcef7e176805275e782612fce9c7\",\"license\":\"MIT\"},\"contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05d5d914a129f8a74b1cae41b212965882aed82683efc0888665c4b26cd60e54\",\"license\":\"MIT\"},\"contracts/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x055fe4c1e942d42899298a11a5501ed8757b5247d914f500d902fd308f4a169f\",\"license\":\"MIT\"},\"contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf75ca4468e9d5395f6810130e622b0c130e44b72ab4de678f34cf93423d980ab\",\"license\":\"MIT\"},\"contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {}\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xaae49561857f45b234927e952b0be026fa85f05b7fa073212e20b4130d73b917\",\"license\":\"MIT\"},\"contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2817,"contract":"contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":2820,"contract":"contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3599,"contract":"contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208c62d557c8429da80fcfb8858bdd9645a8d671cdef5b3340b8e3dfcb5b9c95f764736f6c63430008070033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 PUSH3 0xD557C8 TIMESTAMP SWAP14 0xA8 0xF 0xCF 0xB8 DUP6 DUP12 0xDD SWAP7 GASLIMIT 0xA8 0xD6 PUSH18 0xCDEF5B3340B8E3DFCB5B9C95F764736F6C63 NUMBER STOP ADDMOD SMOD STOP CALLER ","sourceMap":"202:12300:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208c62d557c8429da80fcfb8858bdd9645a8d671cdef5b3340b8e3dfcb5b9c95f764736f6c63430008070033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 PUSH3 0xD557C8 TIMESTAMP SWAP14 0xA8 0xF 0xCF 0xB8 DUP6 DUP12 0xDD SWAP7 GASLIMIT 0xA8 0xD6 PUSH18 0xCDEF5B3340B8E3DFCB5B9C95F764736F6C63 NUMBER STOP ADDMOD SMOD STOP CALLER ","sourceMap":"202:12300:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05d5d914a129f8a74b1cae41b212965882aed82683efc0888665c4b26cd60e54\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/math/SignedMathUpgradeable.sol":{"SignedMathUpgradeable":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122099f0b882b303268500e22cdea391991d2cc5cec11ca0a4b526e1ec5bac5f146d64736f6c63430008070033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 CREATE 0xB8 DUP3 0xB3 SUB 0x26 DUP6 STOP 0xE2 0x2C 0xDE LOG3 SWAP2 SWAP10 SAR 0x2C 0xC5 0xCE 0xC1 SHR LOG0 LOG4 0xB5 0x26 0xE1 0xEC JUMPDEST 0xAC 0x5F EQ PUSH14 0x64736F6C63430008070033000000 ","sourceMap":"215:1058:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122099f0b882b303268500e22cdea391991d2cc5cec11ca0a4b526e1ec5bac5f146d64736f6c63430008070033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 CREATE 0xB8 DUP3 0xB3 SUB 0x26 DUP6 STOP 0xE2 0x2C 0xDE LOG3 SWAP2 SWAP10 SAR 0x2C 0xC5 0xCE 0xC1 SHR LOG0 LOG4 0xB5 0x26 0xE1 0xEC JUMPDEST 0xAC 0x5F EQ PUSH14 0x64736F6C63430008070033000000 ","sourceMap":"215:1058:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}